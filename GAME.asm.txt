displaystring macro STR
    mov ah,09h
    mov dx,offset STR
    int 21h
endM displaystring
   
   SetCursorPos MACRO X, Y, PageNum
    MOV AH, 02H
    MOV BH, PageNum
    MOV DL, X
    MOV DH, Y
    INT 10H
ENDM SetCursorPos

NEWFLINE MACRO x, Step
MANUALPUSH
    mov ah,03h
    mov bh,0h
    int 10h
    add dh,step
    mov ah,02h
    mov di,X
    int 10h
MANUALPOP
ENDM NEWFLINE

ClearTXT MACRO
MANUALPUSH
mov ax,03H
int 10h
MANUALPOP
ENDM ClearTXT

MOUSE_MACRO MACRO
  mov  ax, 0001h  ; show mouse
  int  33h
;MouseLP:
  mov  ax, 0003h  ; get mouse position and buttonstatus
  int  33h        ; -> BX CX DX
  test bx, 1      ; check left mouse click
  ;jz   MouseLP    ; Loop until mouse click
   MOV P1_MOUSE_COLUMN,CX
  MOV P1_MOUSE_ROW,DX
ENDM MOUSE_MACRO
CursorPosition Macro C,R
  mov ah,02h
  mov dl,C
  mov dh,R 
  int 10h
ENDM CursorPosition

WaitKeyPress MACRO
    MOV AH, 00H
    INT 16H
ENDM WaitKeyPress

NOWaitKeyPress MACRO
    MOV AH, 01H
    INT 16H
ENDM NOWaitKeyPress


REGISTERSDRAWINGS  MACRO C1,C2,R1,R2
LOCAL UPROW, DOWNROW, SUBROWZ, LEFTCOLUMN, RIGHTCOLUMN, UPROW1, DOWNROW1, SUBROWZ1, LEFTCOLUMN1, RIGHTCOLUMN1  
;LEFT REGISTERS
int 10h
MANUALPUSH
mov cx,C1
mov dx,R1
mov al,L_CYAN
mov ah,0ch
UPROW:
int 10h
inc CX
cmp cx,C2 
JNZ UPROW 

SUBROWZ:
MOV CX,C1
ADD DX,25
int 10h

mov al,L_CYAN
mov ah,0ch
DOWNROW:
int 10h
inc CX
cmp cx,C2
JNZ DOWNROW 
CMP DX,R2
JNZ SUBROWZ 


int 10h
mov cx,C1
mov dx,R1
mov al,L_CYAN
mov ah,0ch
LEFTCOLUMN:
int 10h
inc DX
cmp DX,R2 
JNZ LEFTCOLUMN


int 10h
mov cx,C2
mov dx,R1
mov al,L_CYAN
mov ah,0ch
RIGHTCOLUMN:
int 10h
inc DX
cmp DX,R2
JNZ RIGHTCOLUMN

ADD C1,90
ADD C2,90
;RIGHTREGISTERS
int 10h
mov cx,C1
mov dx,R1
mov al,L_CYAN
mov ah,0ch
UPROW1:
int 10h
inc CX
cmp cx,C2 
JNZ UPROW1 

SUBROWZ1:
ADD DX,25
int 10h
mov cx,C1
mov al,L_CYAN
mov ah,0ch
DOWNROW1:
int 10h
inc CX
cmp cx,C2
JNZ DOWNROW1 
CMP DX,R2
JNZ SUBROWZ1


int 10h
mov cx,C1
mov dx,R1
mov al,L_CYAN
mov ah,0ch
LEFTCOLUMN1:
int 10h
inc DX
cmp DX,R2 
JNZ LEFTCOLUMN1


int 10h
mov cx,C2
mov dx,R1
mov al,L_CYAN
mov ah,0ch
RIGHTCOLUMN1:
int 10h
inc DX
cmp DX,R2
JNZ RIGHTCOLUMN1
MANUALPOP
ENDM REGISTERSDRAWINGS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

VERTICALLINES MACRO COLUMN,ROWSTART, ROWEND
LOCAL BACK
int 10h
mov cx,COLUMN
mov dx,ROWSTART
mov al,L_CYAN
mov ah,0ch
back:
int 10h
inc dx
cmp dx,ROWEND
jnz back
ENDM VERTICALLINES

HORIZONTALLINES MACRO ROW,STARTC,ENDC
LOCAL HORIZONTALL
MANUALPUSH
int 10H

MOV CX,STARTC
MOV DX,ROW
mov al,L_CYAN
mov ah,0ch
HORIZONTALL:
int 10h
inc CX
cmp CX,ENDC
jnz HORIZONTALL
MANUALPOP
ENDM HORIZONTALLINES 

MANUALPUSH MACRO
PUSH AX
PUSH BX
PUSH CX 
PUSH DX
PUSH SI
PUSH DI 
PUSH SP
PUSH BP
ENDM MANUALPUSH


MANUALPOP MACRO
POP BP
POP SP
POP DI
POP SI
POP DX
POP CX
POP BX
POP AX
ENDM MANUALPOP

DRAW_CHAR MACRO Character,CHAR_COLOR
MANUALPUSH
    MOV AH,0EH
    MOV AL,Character
    MOV BL,CHAR_COLOR
    int 10H
MANUALPOP
ENDM DRAW_CHAR

DRAW_MEMORY MACRO 
    LOCAL MEMORY, MEMORY1
MANUALPUSH
;;;;PLAYER 1 MEMORY
MOV DX,0
MEMORY:
HORIZONTALLINES DX,C5,HALF 
ADD DX,14
CMP DX,215
JB MEMORY
MANUALPOP
;;;;PLAYER 2 MEMORY
MANUALPUSH
MOV DX,0
MEMORY1:
HORIZONTALLINES DX,C6,639 
ADD DX,14
CMP DX,215
JB MEMORY1
MANUALPOP

ENDM DRAW_MEMORY

.model small
.386
.stack 64
.data 
    msg1 db 'Player 1 Please Enter your name','$'
    msg2 db 'Player 1 Please Enter your intial points','$' 
    msg6 db 'Player 2 Please Enter your name','$'
    msg7 db 'Player 2 Please Enter your intial points','$' 
    msg3 db 'To start chatting press F1','$'
    msg4 db 'To start Game Press F2','$'
    msg5 db 'To End program press ESC','$' 

    NOTIFI db 'Notifications','$'

    msg10 db 'GAME INVITAION SENT','$'
    msg11 db 'YOU RECIVED GAME INVITAION','$'
    ;;;;;;;;;;;;;;;;;
    msg12 db 'CHAT INVITAION SENT','$'
    msg13 db 'YOU RECIVED CHAT INVITAION','$'              
    NEWLINE DB '',10,'$'  

    CHATING_MODE DB 'CHATING MODE','$'
    P2_REJECTION_MSG DB 'INVITATION REJECTED','$'
    P2_ESC_OPTION DB 'PRESS ESC TO REJECT','$'

    WELCOME_GAME DB 'WELCOME GAME','$'
    FORBIDEN_MSG DB 'ENTER OPPONENT FORBIDDEN: ','$'
    ERROR DB 'ERROR!RE-ENTER OPPONENT FORBIDDEN ','$'
    FChar DB 3,0,3 dup("$")
    FCHAR2 DB 3,0,3 dup("$")
    LEVEL DB 'PLEASE CHOOSE YOUR LEVEL','$'
    OP_LEVEL DB ' CHOOSEN LEVEL: ',"$"
    CHOSEN_LVL DB ?
    DE_LIMITER DB '$'

    ;QUIT DB 'QUIT GAME','$'
    TEXT_ROW db 0   
    Character DW ?
    BLUE_BUBBLE_COUNTER DB '0','1','2','3','4','5','6','7','8','9'
    GRAY_BUBBLE_COUNTER DB '0','1','2','3','4','5','6','7','8','9'
    YELLOW_BUBBLE_COUNTER DB '0','1','2','3','4','5','6','7','8','9'
    PINK_BUBBLE_COUNTER DB '0','1','2','3','4','5','6','7','8','9'
    P1_MOUSE_COLUMN DW ?
    P1_MOUSE_ROW DW ?
    P2_MOUSE_COLUMN DW ?
    P2_MOUSE_ROW DW ?
    ;Player 1 Registers CO.
    C1   dW   50 
    C2   dW   130
    R1   dW   53 
    R2   dW   153    
    HALF DW  320 
    ;Player 2 Registers CO.
    C3 DW 370
    C4 DW 450
    R3 DW 53
    R4 DW 153

    ;MEMORY PLAYER 1
    C5 DW 260


    ;MEMORY PLAYER 2 
    C6 DW 580



    ;COMMAND LINE PLAYER1
    ROW1 DW    262
    STARTC1 DW 0
    ENDC1   DW 320
    ;BUBBLE EXCUTED PLAYER1
    ROW11    DW   227
    STARTC11 DW   0
    ENDC11   DW   320
    ;COMMAND LINE PLAYER2
    ROW2   DW    262
    STARTC2 DW    160
    ENDC2   DW    640
    ;NAMES EXCUTED PLAYER2
    ROW22    DW    227
    STARTC22 DW    320
    ENDC22   DW    640   
    ;CHAT AREA
    ROWCHAT   DW   297
    STARTCHAT DW   0
    ENDCHAT   DW   640 
    ;ROW VARIABLE
    ROW_REDEFINE DW 17


    ;;;;SPACESHIP PARAMETERS

        BLACK EQU 0
        BLUE EQU 1
        GREEN EQU 2
        CYAN EQU 3
        RED EQU 4
        MAGENTA EQU 5
        BROWN EQU 6
        L_GRAY EQU 7
        D_GRAY EQU 8
        L_BLUE EQU 9
        L_GREEN EQU 10
        L_CYAN EQU 11
        L_RED EQU 12
        L_MAGENTA EQU 13
        YELLOW EQU 14
        WHITE EQU 15
        
        TEMP1 DW 0
        TEMP2 DW 0	
        TEMP3 DW 0
        TEMP4 DW 0	
        
        
        COLOR DB ?
        X_REC DW ?
        Y_REC DW ?
        REC_SIZE DW ?
        X_REC2 DW ?
        Y_REC2 DW ?
        REC_SIZE2 DW ?


        ;CIRCLEPARAMETERS
        X_CENTER DW ?        ;X_CENTER CO.
        Y_CENTER DW ?        ;Y_CENTER CO.

        X_CENTER_FLYING DW ?
        Y_CENTER_FLYING DW ?
        RADIUS_FLYING DW ?
        RADIUS2_FLYING DW ?

        BLUE_X_CENTER_FLYING DW ?
        BLUE_Y_CENTER_FLYING DW ?
        BLUE_RADIUS_FLYING DW ?
        BLUE_RADIUS2_FLYING DW ?

        GRAY_X_CENTER_FLYING DW ?
        GRAY_Y_CENTER_FLYING DW ?
        GRAY_RADIUS_FLYING DW ?
        GRAY_RADIUS2_FLYING DW ?

        YELLOW_X_CENTER_FLYING DW ?
        YELLOW_Y_CENTER_FLYING DW ?
        YELLOW_RADIUS_FLYING DW ?
        YELLOW_RADIUS2_FLYING DW ?

        PINK_X_CENTER_FLYING DW ?
        PINK_Y_CENTER_FLYING DW ?
        PINK_RADIUS_FLYING DW ?
        PINK_RADIUS2_FLYING DW ?


        X_CENTER_FLYING2 DW ?
        Y_CENTER_FLYING2 DW ?
        RADIUS_FLYING2 DW ?
        RADIUS2_FLYING2 DW ?

        BLUE_X_CENTER_FLYING2 DW ?
        BLUE_Y_CENTER_FLYING2 DW ?
        BLUE_RADIUS_FLYING2 DW ?
        BLUE_RADIUS2_FLYING2 DW ?

        GRAY_X_CENTER_FLYING2 DW ?
        GRAY_Y_CENTER_FLYING2 DW ?
        GRAY_RADIUS_FLYING2 DW ?
        GRAY_RADIUS2_FLYING2 DW ?

        YELLOW_X_CENTER_FLYING2 DW ?
        YELLOW_Y_CENTER_FLYING2 DW ?
        YELLOW_RADIUS_FLYING2 DW ?
        YELLOW_RADIUS2_FLYING2 DW ?

        PINK_X_CENTER_FLYING2 DW ?
        PINK_Y_CENTER_FLYING2 DW ?
        PINK_RADIUS_FLYING2 DW ?
        PINK_RADIUS2_FLYING2 DW ?



        RADIUS DW ?               ; RADIUS
        RADIUS2 DW ?               ;RADIUS SQUARED
        VAR1 DW ?
        VAR2 DW ?
        VAR1_FLYING DW ?
        VAR2_FLYING DW ?
        BLUE_VAR1_FLYING DW ?
        BLUE_VAR2_FLYING DW ?
        GRAY_VAR1_FLYING DW ?
        GRAY_VAR2_FLYING DW ?

        RADIUSS DW ?               ; RADIUS
        RADIUS22 DW ?               ;RADIUS SQUARED
        VAR12 DW ?
        VAR22 DW ?
        VAR1_FLYING2 DW ?
        VAR2_FLYING2 DW ?
        BLUE_VAR1_FLYING2 DW ?
        BLUE_VAR2_FLYING2 DW ?
        GRAY_VAR1_FLYING2 DW ?
        GRAY_VAR2_FLYING2 DW ?
        ;;;;;;;;;;;;;ROCKETS
        X_ROCKET DW ?
        Y_ROCKET DW ?
    

        TEMP5 DW ?
        TEMP6 DW ?


        ;;;;;;;;;;;

        HALT DW 20

        ;;;;;;;;;;;;;;;;;;;;;;;;

        AVAILIBLE_BUBBLES DB 9
        AVAILIBLE_BUBBLES2 DB 9
        HITTER_BLUE DB 0
        HITTER_GRAY DB 0
        HITTER_YELLOW DB 0
        HITTER_PINK DB 0

        HITTER_BLUE2 DB 0
        HITTER_GRAY2 DB 0
        HITTER_YELLOW2 DB 0
        HITTER_PINK2 DB 0

        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    Name1 db 18,0,18 dup('$')
    intialPTS db 4,0,4 dup('$')
    Lower_intialPTS db 4,0,4 dup('$')
    Name2 db 18,0,18 dup('$')  
    intialPTS2 db 4,0,4 dup('$')          

    ;;;;;;;;;;;;;;;
    msg15 db 7CH,'$' ;; ':' symbol

    P1_TRIGGER DB 1
    P2_TRIGGER DB 0

;;Plaeyr2
 new_line db 0Dh,0Ah,'$'  ; new line code.
        
        TEXT_ERROR DB 'ERROR','$'  
        TEXT DB  64,0,64 dup('0')
        ;instructions with 2 operands 
        TEXT1 DB 'MOV ','$'
        TEXT2 DB 'ADD','$'
        TEXT3 DB 'SUB','$'
        TEXT4 DB 'SHR','$'
        TEXT5 DB 'SHL','$'
        TEXT6 DB 'CLC','$'
        TEXT7 DB 'ROR','$' ;;CLC is HERE
        TEXT8 DB 'ROL','$'
        TEXT9 DB 'XOR','$'
        TEXT10 DB 'OR','$'
        TEXT11 DB 'AND','$'
        
        
        ;instructions with 1 operand 
        TEXT12 DB 'INC','$'
        TEXT13 DB 'DEC','$'
        TEXT14 DB 'DIV','$'
        TEXT15 DB 'MUL','$'
        TEXT16 DB 'NOP','$'
        
        ;to separate the input 
        INST DB 6 dup('$')
        OP1 DB 6 dup('$')
        OP2 DB 6 dup('$')
        
        ; for the size of each input    
        Size_INST DB 0
        Size_OP1 DB 0
        Size_OP2 DB 0
        
        
        Reg1 DB 'AX','$'         ;AX->1 AH->5 AL->9
        Reg2 DB 'BX','$'		 ;BX->1 BH->5 BL->9
        Reg3 DB 'CX','$'	     ;CX->1 CH->5 CL->9
        Reg4 DB 'DX','$'		 ;DX->1 DH->5 DL->9
        
        
        Reg9 DB 'AH','$'
        Reg10 DB 'BH','$'
        Reg11 DB 'CH','$'
        Reg12 DB 'DH','$'
        
        
        Reg5 DB 'AL','$'
        Reg6 DB 'BL','$'
        Reg7 DB 'CL','$'
        Reg8 DB 'DL','$'
        
        
        Reg_1 DB 'SI','$'
        Reg_2 DB 'DI','$'
        Reg_3 DB 'BP','$'
        Reg_4 DB 'SP','$'
        
        
        ;Memroy Location 						;Stack input ( 12 bit ) inc 12 (12 bit) Stack inc 12  (12 bit)  
        Reg_5 DB '[BX]','$'  
        Reg_6 DB '[SI]','$'
        Reg_7 DB '[DI]','$'
        
        
        VALUE1 DW 0
        Memory DB 4 dup('0'),'$'
        Dest_Index DB 0  ; if it is still 0 means error detected _ memory to memory or No Space
        Source_Index DB 0  ; Reg 1->16 VALUE1 ->17 Memory ->18 Index->19 , 0 Means Error detected
        INST_INDEX DB 0
		MValue DB 0
        Reg2Value_1 DB 0
        Reg2Reg_1 DB 0
        Reg2Memory_1 DB 0
        Reg2Index_1 DB 0  
        
        VALUE_AX1 DW 0000
        VALUE_BX1 DW 0000
        VALUE_CX1 DW 0000
        VALUE_DX1 DW 0000
        VALUE_SI1 DW 0000
        VALUE_DI1 DW 0000
        VALUE_SP1 DW 0000
        VALUE_BP1 DW 0000  
 ;;Player2

        P2Value_AX2 DW 0000
        VALUE_BX2 DW 0000
        VALUE_CX2 DW 1234
        VALUE_DX2 DW 1234
        VALUE_SI2 DW 1234
        VALUE_DI2 DW 1234
        VALUE_SP2 DW 1234
        VALUE_BP2 DW 1234
        BUFFER DB 6 dup('$') 
   
        scount db ?      
        X256 DB 0
        Memory2 DB 4 dup('0'),'$'



      

        CCF db 0
        PPF db 0
        AAF db 0
        ZZF db 0
        SSF db 0
        TTF db 0
        IIF db 0
        DDF db 0
        OOF db 0
        
        P2CCF db 0
        P2PPF db 0
        P2AAF db 0
        P2ZZF db 0
        P2SSF db 0
        P2TTF db 0
        P2IIF db 0
        P2DDF db 0
        P2OOF db 0
        
.code


P1_INFO PROC
displaystring msg1   
;NEW LINE           
  MOV AH,02H
  MOV DL,00H
  INT 10H
  MOV AH,09H
  MOV DX,OFFSET NEWLINE
  INT 21H
  
  MANUALPUSH
  Mov SI,0
  MOV CX,14   
  
  INC SI
;CHECK BACKSPACE
  REMOVE_CHAR_P1: 
  MOV AL,08H
  MOV Name1[SI-1],AL
  mov AH,2
  MOV DL,AL
  INT 21H
  MOV AL,00H 
  MOV Name1[SI-1],AL
  mov AH,2
  MOV DL,AL
  INT 21H
  MOV AL,08H 
  MOV Name1[SI-1],AL
  mov AH,2
  MOV DL,AL
  INT 21H 
  INC CX 
  dec SI
  INVALID_SYMBOL_P1:
  MOV AL,08H
   
  
  LOOP1:
  
  MOV AH,07h
  int 21h
           
           
  CMP AL,08h
  JE REMOVE_CHAR_P1         
           
  CMP AL,0DH
  JE ENTER_P1  
  CMP AL,20H
  JE SPACE_P1
  
  CMP AL,41h
  JB INVALID_SYMBOL_P1
  CMP AL,7AH
  JA INVALID_SYMBOL_P1
  CMP AL,5BH
  JE INVALID_SYMBOL_P1
  CMP AL,5CH
  JE INVALID_SYMBOL_P1
  CMP AL,5DH
  JE INVALID_SYMBOL_P1
  CMP AL,5EH
  JE INVALID_SYMBOL_P1
  CMP AL,5FH
  JE INVALID_SYMBOL_P1
  CMP AL,60H
  JE INVALID_SYMBOL_P1
   
  SPACE_P1:
  MOV Name1[SI],AL
  INC SI
  mov AH,2
  MOV DL,AL
  INT 21H 
  
  LOOP LOOP1
  ENTER_P1:
  MANUALPOP
  displaystring NEWLINE
  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;END OF NAME INPUT 

  displaystring msg2 
  MANUALPUSH
  MOV AH,02H
  MOV DL,00H
  MOV DH,03
  INT 10H
  
  MOV SI,0
  MOV CX,2
;CHECK BACKSPACE 
  INITIAL_PTS_BACKSPACE_P1:
  MOV AL,08H
  MOV intialPTS[SI],AL
  mov AH,2
  MOV DL,AL
  INT 21H
  MOV AL,00H 
  MOV intialPTS[SI],AL
  mov AH,2                                      
  MOV DL,AL
  INT 21H
  MOV AL,08H 
  MOV intialPTS[SI],AL
  mov AH,2
  MOV DL,AL
  INT 21H 
  INC CX
  
  INITIAL_PTS_NUMBERS_P1:
  MOV AL,08H
  LOOP2:
  
  
  MOV AH,07h
  int 21h
  
  CMP AL,08h
  JE INITIAL_PTS_BACKSPACE_P1
  
   CMP AL,0DH
  JE INITIAL_PTS_ENTER_P1
  
  CMP AL,2Fh
  JB INITIAL_PTS_NUMBERS_P1
  CMP AL,3AH
  JA INITIAL_PTS_NUMBERS_P1
  
  
   
 
  MOV intialPTS[SI],AL
  INC SI
  mov AH,2
  MOV DL,AL
  INT 21H
  
  LOOP LOOP2
  INITIAL_PTS_ENTER_P1:
  MANUALPOP
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PLAYER 2  
  ;;;;;START OF PLAYER 2 INPUT
  CALL CLR_SCR 

RET
P1_INFO ENDP


P2_INFO PROC
displaystring msg6    
;NEW LINE           
  MOV AH,02H
  MOV DL,00H
  INT 10H
  MOV AH,09H
  MOV DX,OFFSET NEWLINE
  INT 21H
  
  MANUALPUSH
  Mov SI,0
  MOV CX,14   
  
  INC SI
;CHECK BACKSPACE
  REMOVE_CHAR_P2: 
  MOV AL,08H
  MOV Name2[SI-1],AL
  mov AH,2
  MOV DL,AL
  INT 21H
  MOV AL,00H 
  MOV Name2[SI-1],AL
  mov AH,2
  MOV DL,AL
  INT 21H
  MOV AL,08H 
  MOV Name2[SI-1],AL
  mov AH,2
  MOV DL,AL
  INT 21H 
  INC CX 
  dec SI
  INVALID_SYMBOL_P2:
  MOV AL,08H
   
  
  LOOP10:
  
  MOV AH,07h
  int 21h
           
           
  CMP AL,08h
  JE REMOVE_CHAR_P2         
           
  CMP AL,0DH
  JE ENTER_P2  
  CMP AL,20H
  JE SPACE_P2
  
  CMP AL,41h
  JB INVALID_SYMBOL_P2
  CMP AL,7AH
  JA INVALID_SYMBOL_P2
  CMP AL,5BH
  JE INVALID_SYMBOL_P2
  CMP AL,5CH
  JE INVALID_SYMBOL_P2
  CMP AL,5DH
  JE INVALID_SYMBOL_P2
  CMP AL,5EH
  JE INVALID_SYMBOL_P2
  CMP AL,5FH
  JE INVALID_SYMBOL_P2
  CMP AL,60H
  JE INVALID_SYMBOL_P2
   
  SPACE_P2:
  MOV Name2[SI],AL
  INC SI
  mov AH,2
  MOV DL,AL
  INT 21H 
  
  LOOP LOOP10
  ENTER_P2:
  MANUALPOP
 ;NEW Line     
  MOV AH,02H
  MOV DL,00H
  INT 10H
  MOV AH,09H
  MOV DX,OFFSET NEWLINE
  INT 21H
;;;;DISPLAY INITIAL PTS PLAYER 2 MSG
  displaystring msg7  
   MANUALPUSH 
  MOV AH,02H
  MOV DL,00H
  MOV DH,03
  INT 10H

  MOV SI,0
  MOV CX,2
;CHECK BACKSPACE 
  INITIAL_PTS_BACKSPACE_P2:
  MOV AL,08H
  MOV intialPTS2[SI],AL
  mov AH,2
  MOV DL,AL
  INT 21H
  MOV AL,00H 
  MOV intialPTS2[SI],AL
  mov AH,2                                      
  MOV DL,AL
  INT 21H
  MOV AL,08H 
  MOV intialPTS2[SI],AL
  mov AH,2
  MOV DL,AL
  INT 21H 
  INC CX
  
  INITIAL_PTS_NUMBERS_P2:
  MOV AL,08H
  LOOP20:
  
  
  MOV AH,07h
  int 21h
  
  CMP AL,08h
  JE INITIAL_PTS_BACKSPACE_P2
  
   CMP AL,0DH
  JE INITIAL_PTS_ENTER_P2
  
  CMP AL,2Fh
  JB INITIAL_PTS_NUMBERS_P2
  CMP AL,3AH
  JA INITIAL_PTS_NUMBERS_P2
  
  
   
 
  MOV intialPTS2[SI],AL
  INC SI
  mov AH,2
  MOV DL,AL
  INT 21H
  
  LOOP LOOP20
  INITIAL_PTS_ENTER_P2:
  MANUALPOP
  
 CALL CLR_SCR  
RET
P2_INFO ENDP

MAIN_INTERFACE proc
  SPLIT_SCREEN_INTERFACE1:
  CursorPosition 28H,TEXT_ROW 
  displaystring msg15
  INC TEXT_ROW       
  CMP TEXT_ROW,25
  JNE SPLIT_SCREEN_INTERFACE1
  ;SET OPTIONS ON BOTH SIDES
  ;PLAYER 1 HALF
  CursorPosition 00,00H
  displaystring Name1
  CursorPosition 01,05H
  displaystring msg3   
  CursorPosition 01,07H
  displaystring msg4
  CursorPosition 01,09H
  displaystring msg5
  ;PLAYER 2 HALF
  CursorPosition 29H,00H
  displaystring Name2                  
  CursorPosition 29H,05H
  displaystring msg3   
  CursorPosition 29H,07H
  displaystring msg4
  CursorPosition 29H,09H
  displaystring msg5
  ;;;NOTIFICATION CENTER
  ;P1
  CursorPosition 0,22 
  displaystring NOTIFI
  ;P2
  CursorPosition 41,22
  displaystring NOTIFI
  MANUALPUSH
  MOV BL,intialPTS2
  cmp BL,intialPTS 
  JA OP01
  cmp intialPTS,BL 
  JA OP02
  CMP intialPTS,BL
  JE UNIT_CHECK


  OP02:
  MOV intialPTS,BL
  mov [intialPTS2+1],BL
  MOV [intialPTS+1],BL
  MANUALPOP
  Ret

  OP01:
  MOV BL,[intialPTS]
  MOV [intialPTS2],BL
  MOV BL,[intialPTS+1]
  MOV [intialPTS2+1],BL
  MANUALPOP
  Ret


  UNIT_CHECK:
  MOV BL,[intialPTS2+1]
  cmp BL,[intialPTS+1] 
  JA OP3
  cmp [intialPTS+1],BL 
  JA OP4

  OP4:
  MOV [intialPTS+1],BL
  MANUALPOP
  RET
  OP3:
  MOV BL,[intialPTS+1]
  MOV [intialPTS2+1],BL
  MANUALPOP
  
ret
MAIN_INTERFACE ENDP

INTERFACE_OPERATIONS PROC
  CMP P2_TRIGGER,1
  CMP P1_TRIGGER,1
  JE WAITING_P1
  ;JE WAITING_P2

  RETURN_MAIN:
  CALL CLR_SCR
  CALL MAIN_INTERFACE

  WAITING_P1:
  CursorPosition 25,09H
  WaitKeyPress
  CMP AH,3CH
  JE P1_F2_PRESSED
  CMP AH,3DH
  JE P1_F3_PRESSED
  CMP AH,01H
  JE P1_ESC_PRESSED
  JMP WAITING_P1

  P1_F2_PRESSED:
  CursorPosition 0,23
  displaystring msg12
  CursorPosition 41,23
  displaystring msg13
  JMP PLAYER2_CHAT

  P1_F3_PRESSED:
  CursorPosition 0,24
  displaystring msg10
  CursorPosition 41,24
  displaystring msg11
  JMP PLAYER2_GAME

  P1_ESC_PRESSED:
  CALL CLR_SCR
  JMP END_PROGRAM

;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  PLAYER2_CHAT:
  WaitKeyPress
  CMP AH,3CH
  JE START_CHAT
  CMP AH,01H
  JE INVITAION_REJECTED
  JMP PLAYER2_CHAT

  START_CHAT:
  CALL CLR_SCR
  CHAT:
  CursorPosition 1,0
  displaystring CHATING_MODE
  WaitKeyPress
  CMP AH,01H
  JE RETURN_MAIN
  jmp CHAT

  INVITAION_REJECTED:
  CALL CLR_SCR
  call MAIN_INTERFACE
  CursorPosition 41,23
  displaystring P2_REJECTION_MSG
  JMP WAITING_P1

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  PLAYER2_GAME:
  WaitKeyPress
  CMP AH,3DH
  JE JUMP_GAME
  CMP AH,01H
  JE GAME_REJ
  JMP PLAYER2_GAME

  JUMP_GAME:
  CALL CLR_SCR
  MOV TEXT_ROW,0
  SPLIT_SCREEN_INTERFACE2:
  CursorPosition 28H,TEXT_ROW 
  displaystring msg15
  INC TEXT_ROW       
  CMP TEXT_ROW,25
  JNE SPLIT_SCREEN_INTERFACE2
  CursorPosition 0,0
  displaystring Name1
  displaystring NEWLINE
  displaystring FORBIDEN_MSG
  JMP ENTERY1
  RE_ENTER:
  CALL CLR_SCR 
  MOV TEXT_ROW,0
  SPLIT_SCREEN_INTERFACE3:
  CursorPosition 28H,TEXT_ROW 
  displaystring msg15
  INC TEXT_ROW       
  CMP TEXT_ROW,25
  JNE SPLIT_SCREEN_INTERFACE3
  CursorPosition 0,0
  displaystring Name1
  displaystring NEWLINE
  displaystring ERROR
  ENTERY1:
  mov ah,07
  int 21h
  CMP AL,30H
  JB RE_ENTER
  CMP AL,3AH
  JE RE_ENTER
  CMP AL,3BH
  JE RE_ENTER
  CMP AL,3CH
  JE RE_ENTER
  CMP AL,3DH
  JE RE_ENTER
  CMP AL,3EH
  JE RE_ENTER
  CMP AL,3FH
  JE RE_ENTER
  CMP AL,5BH
  JE RE_ENTER
  CMP AL,5CH
  JE RE_ENTER
  CMP AL,5DH
  JE RE_ENTER
  CMP AL,5EH
  JE RE_ENTER
  CMP AL,5FH
  JE RE_ENTER
  CMP AL,60H
  JE RE_ENTER
  CMP AL,7AH
  JA RE_ENTER
  MOV FCHAR,AL
  displaystring FCHAR
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  CALL CLR_SCR
  
  MOV TEXT_ROW,0
  SPLIT_SCREEN_INTERFACE6:
  CursorPosition 28H,TEXT_ROW 
  displaystring msg15
  INC TEXT_ROW       
  CMP TEXT_ROW,25
  JNE SPLIT_SCREEN_INTERFACE6
  CursorPosition 41,0
  displaystring Name2
  displaystring NEWLINE
  CursorPosition 41,1
  displaystring FORBIDEN_MSG
  JMP ENTERY2
  RE_ENTER1:
 CALL CLR_SCR
   SPLIT_SCREEN_INTERFACE7:
  CursorPosition 28H,TEXT_ROW 
  displaystring msg15
  INC TEXT_ROW       
  CMP TEXT_ROW,25
  JNE SPLIT_SCREEN_INTERFACE7
 CursorPosition 41,0
  displaystring Name2
  displaystring NEWLINE
  CursorPosition 41,1
  displaystring ERROR
  ENTERY2:
  mov ah,07
  int 21h
  CMP AL,30H
  JB RE_ENTER1
  CMP AL,7AH
  JA RE_ENTER1
  CMP AL,5BH
  JE RE_ENTER1
  CMP AL,5CH
  JE RE_ENTER1
  CMP AL,5DH
  JE RE_ENTER1
  CMP AL,5EH
  JE RE_ENTER1
  CMP AL,5FH
  JE RE_ENTER1
  CMP AL,60H
  JE RE_ENTER1
  CMP AL,3AH
  JE RE_ENTER1
  CMP AL,3BH
  JE RE_ENTER1
  CMP AL,3CH
  JE RE_ENTER1
  CMP AL,3DH
  JE RE_ENTER1
  CMP AL,3EH
  JE RE_ENTER1
  CMP AL,3FH
  JE RE_ENTER1
  MOV FCHAR2,AL
  displaystring FCHAR2
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  CALL CLR_SCR


  ret
  GAME_REJ:
  CALL CLR_SCR
  CALL MAIN_INTERFACE
  CursorPosition 41,23
  displaystring P2_REJECTION_MSG
  JMP WAITING_P1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

RET
INTERFACE_OPERATIONS ENDP

CLR_SCR PROC
	MOV AH,00H
    MOV AL,10H
	INT 10H
	RET
CLR_SCR ENDP


;;;;DRAW RECTANGULAR FILLED P1
	DRAW_REC2 PROC
    
	MOV AX, Y_REC
	MOV TEMP1, AX   ;TEMP1 == ROWS
	MOV CX, REC_SIZE    ;DE akenaha X2
    
	L_ALL:
	PUSH CX             ;el satr da hy3rafny hanzel kam row
	JMP LINE_IT
	LINE_IT_FINISH:
	INC TEMP1   ;HAZWED EL ROWS 
	POP CX
	LOOP L_ALL
	RET 
	
	LINE_IT:
	MOV AX, X_REC       ;X1
	MOV TEMP2, AX
	MOV CX, REC_SIZE
	L1:
	PUSH CX             ;de X2 push m3aya POP CX1 then CX2 harsem mn elso8yar lel keber
    
	MOV AH, 0CH   ;WRITE DOT WITH INTERRUPTS 
	MOV AL, RED     ;COLOUR
	MOV DX, TEMP1     ;ROW
	MOV CX, TEMP2     ;COLUMN
	INT 10H
	INC TEMP2
	POP CX
	LOOP L1            ;na keda n2ast el CX FA lama h3mel loop tany hatkoon CX-1
	JMP LINE_IT_FINISH
	RET
	DRAW_REC2 ENDP	
	
    
DRAW_REC3 PROC
    
	MOV AX, Y_REC2
	MOV TEMP3, AX   ;TEMP3 == ROWS
	MOV CX, REC_SIZE2    ;DE akenaha X2
    
	L_ALL3:
	PUSH CX             ;el satr da hy3rafny hanzel kam row
	JMP LINE_IT3
	LINE_IT_FINISH3:
	INC TEMP3   ;HAZWED EL ROWS 
	POP CX
	LOOP L_ALL3
	RET 
	
	LINE_IT3:
	MOV AX, X_REC2       ;X1
	MOV TEMP4, AX
	MOV CX, REC_SIZE2
	L13:
	PUSH CX             ;de X2 push m3aya POP CX1 then CX2 harsem mn elso8yar lel keber
    
	MOV AH, 0CH   ;WRITE DOT WITH INTERRUPTS 
	MOV AL, RED     ;COLOUR
	MOV DX, TEMP3     ;ROW
	MOV CX, TEMP4     ;COLUMN
	INT 10H
	INC TEMP4
	POP CX
	LOOP L13            ;na keda n2ast el CX FA lama h3mel loop tany hatkoon CX-1
	JMP LINE_IT_FINISH3
	RET
	DRAW_REC3 ENDP	
	
	;--------------------------------------------------------------------------
; clears keyboard buffer
;--------------------------------------------------------------------------
clearkeyboardbuffer		proc	
   mov ah,0ch
    mov al,0
    int 21h
clearkeyboardbuffer		endp
RET



SQRT PROC  
   JZ finish
   mov bx,0ffffh
   mov ax,00
   LS:
   inc ax
   add bx,02
   sub cx,bx        ;CX VALUE EL RADIUS 
   jl finish
   jnz LS
   finish: 
 ret 
SQRT ENDP 



DRAW_RING PROC 
    MANUALPUSH
    ;DRAW FIRST POINT AT MAXIMUM R AT RIGHT   
    mov ax,RADIUS
    mul ax
    mov RADIUS2,ax
    
    mov cx,X_CENTER 
    add cx,RADIUS   ;CENTER + RADIUS GOT MAXIMUM RIGHT POINT
    mov dx,Y_CENTER
    mov ah,0CH
    mov al,COLOR
    int 10h                       
    
;USING CIRCLE EQN han7ot el X ngeeeb el Y 
    CIRC1:
    dec cx
    mov VAR1,CX ; 3ashan n7afez 3la qemet el CX EL ASLYA ABL EL OPERATIONS ELY GYA
    mov bx,X_CENTER
    sub cx,bx
    mov ax,cx
    mul ax
    mov bx,RADIUS2
    sub bx,ax
    mov cx,bx
                                         
    CALL SQRT
; HY5rog mn el SQRT FN ROOT EL RADIUS 
    add ax,Y_Center
    mov dx,ax
    mov cx,var1
    
    mov AH,0CH
    mov AL,COLOR
    int 10h        ;OUTPUT HYKOON -VE Y  bas 22al mn -90
    
    mov bx,dx
    sub bx,Y_CENTER
    add bx,bx
    sub dx,bx
    int 10h     ;output hykooon +y bas 22al mn 90
    
    mov bx,cx
    sub bx,X_CENTER
    add bx,bx
    sub cx,bx
    int 10H     ;output hykooon +y bas akbar mn 90
    
    mov bx,Y_CENTER
    sub bx,dx
    add bx,bx
    add dx,bx
    int 10h     ;output hykooon -y bas akbar mn -90
    
    mov cx,VAR1
    mov dx,VAR2
    
    CMP CX,X_CENTER
    jne CIRC1
;REPEAT bas n8yar etegah el rasm hnrsem 3al DX
;3ashan el sqrt bytl3 discret values mesh arqam DECIMAL     
    mov dx,y_CENTER 
    add dx,RADIUS
    mov cx,x_CENTER
    mov ah,0CH
    mov al,COLOR
    int 10h                        
;USING CIRCLE EQN han7ot el X ngeeeb el Y 
    CIRC2:
    dec dx
    mov VAR2,dX
    mov bx,y_CENTER
    sub dx,bx
    mov ax,dx
    mul ax
    mov bx,RADIUS2
    sub bx,ax
    mov cx,bx
                                         
    CALL SQRT

    add ax,x_Center
    mov cx,ax
    mov dx,var2
    mov AH,0CH
    mov AL,COLOR
    int 10h        
    
    mov bx,cx
    sub bx,x_CENTER
    add bx,bx
    sub cx,bx
    int 10h
    
    mov bx,dx
    sub bx,y_CENTER
    add bx,bx
    sub dx,bx
    int 10H
    
    mov bx,x_CENTER
    sub bx,cx
    add bx,bx
    add cx,bx
    int 10h
    
    mov dx,VAR2
    mov cx,VAR1
    
    CMP dX,y_CENTER
    jne CIRC2       
    CMP RADIUS,0
    MANUALPOP
    RET
 DRAW_RING  ENDP


DRAW_CIRCLE PROC
    FILLING:
    CALL DRAW_RING 
    DEC RADIUS
    CMP RADIUS,0
    JNE FILLING
     RET
DRAW_CIRCLE ENDP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


DRAW_RING_FLYING2 PROC 
    MANUALPUSH
    ;DRAW FIRST POINT AT MAXIMUM R AT RIGHT   
    mov ax,RADIUS_FLYING2
    mul ax
    mov RADIUS2_FLYING2,ax
    
    mov cx,X_CENTER_FLYING2
    add cx,RADIUS_FLYING2   ;CENTER + RADIUS GOT MAXIMUM RIGHT POINT
    mov dx,Y_CENTER_FLYING2
    mov ah,0CH
    mov al,COLOR
    int 10h                       
    
;USING CIRCLE EQN han7ot el X ngeeeb el Y 
    CIRC1_FLYING2:
    dec cx
    mov VAR1_FLYING2,CX ; 3ashan n7afez 3la qemet el CX EL ASLYA ABL EL OPERATIONS ELY GYA
    mov bx,X_CENTER_FLYING2
    sub cx,bx
    mov ax,cx
    mul ax
    mov bx,RADIUS2_FLYING2
    sub bx,ax
    mov cx,bx
                                         
    CALL SQRT
; HY5rog mn el SQRT FN ROOT EL RADIUS 
    add ax,Y_CENTER_FLYING2
    mov dx,ax
    mov cx,VAR1_FLYING2

    
    mov AH,0CH
    mov AL,COLOR
    int 10h        ;OUTPUT HYKOON -VE Y  bas 22al mn -90
    
    mov bx,dx
    sub bx,Y_CENTER_FLYING2
    add bx,bx
    sub dx,bx
    int 10h     ;output hykooon +y bas 22al mn 90
    
    mov bx,cx
    sub bx,X_CENTER_FLYING2
    add bx,bx
    sub cx,bx
    int 10H     ;output hykooon +y bas akbar mn 0
    
    mov bx,Y_CENTER_FLYING2
    sub bx,dx
    add bx,bx
    add dx,bx
    int 10h     ;output hykooon -y bas akbar mn -90
    
    mov cx,VAR1_FLYING2
    mov dx,VAR2_FLYING2
    
    CMP CX,X_CENTER_FLYING2
    jne CIRC1_FLYING2
;REPEAT bas n8yar etegah el rasm hnrsem 3al DX
;3ashan el sqrt bytl3 discret values mesh arqam DECIMAL     
    mov dx,Y_CENTER_FLYING2
    add dx,RADIUS_FLYING2
    mov cx,X_CENTER_FLYING2
    mov ah,0CH
    mov al,COLOR
    int 10h                        
;USING CIRCLE EQN han7ot el X ngeeeb el Y 
    CIRC2_FLYING2:
    dec dx
    mov VAR2_FLYING2,dX
    mov bx,Y_CENTER_FLYING2
    sub dx,bx
    mov ax,dx
    mul ax
    mov bx,RADIUS2_FLYING2
    sub bx,ax
    mov cx,bx
                                         
    CALL SQRT

    add ax,X_CENTER_FLYING2
    mov cx,ax
    mov dx,VAR2_FLYING2
    mov AH,0CH
    mov AL,COLOR
    int 10h        
    
    mov bx,cx
    sub bx,X_CENTER_FLYING2
    add bx,bx
    sub cx,bx
    int 10h
    
    mov bx,dx
    sub bx,Y_CENTER_FLYING2
    add bx,bx
    sub dx,bx
    int 10H
    
    mov bx,X_CENTER_FLYING2
    sub bx,cx
    add bx,bx
    add cx,bx
    int 10h
    
    mov dx,VAR2_FLYING2
    mov cx,VAR1_FLYING2
    
    CMP dX,Y_CENTER_FLYING2
    jne CIRC2_FLYING2      
    CMP RADIUS_FLYING2,0
    MANUALPOP
    RET
 DRAW_RING_FLYING2  ENDP


DRAW_CIRCLE_FLYING2 PROC
    FILLING_FLYING2:
    CALL DRAW_RING_FLYING2
    DEC RADIUS_FLYING2
    CMP RADIUS_FLYING2,0
    JNE FILLING_FLYING2
     RET
DRAW_CIRCLE_FLYING2 ENDP

DRAW_RING_FLYING PROC 
    MANUALPUSH
    ;DRAW FIRST POINT AT MAXIMUM R AT RIGHT   
    mov ax,RADIUS_FLYING
    mul ax
    mov RADIUS2_FLYING,ax
    
    mov cx,X_CENTER_FLYING
    add cx,RADIUS_FLYING   ;CENTER + RADIUS GOT MAXIMUM RIGHT POINT
    mov dx,Y_CENTER_FLYING
    mov ah,0CH
    mov al,COLOR
    int 10h                       
    
;USING CIRCLE EQN han7ot el X ngeeeb el Y 
    CIRC1_FLYING:
    dec cx
    mov VAR1_FLYING,CX ; 3ashan n7afez 3la qemet el CX EL ASLYA ABL EL OPERATIONS ELY GYA
    mov bx,X_CENTER_FLYING
    sub cx,bx
    mov ax,cx
    mul ax
    mov bx,RADIUS2_FLYING
    sub bx,ax
    mov cx,bx
                                         
    CALL SQRT
; HY5rog mn el SQRT FN ROOT EL RADIUS 
    add ax,Y_CENTER_FLYING
    mov dx,ax
    mov cx,VAR1_FLYING

    
    mov AH,0CH
    mov AL,COLOR
    int 10h        ;OUTPUT HYKOON -VE Y  bas 22al mn -90
    
    mov bx,dx
    sub bx,Y_CENTER_FLYING
    add bx,bx
    sub dx,bx
    int 10h     ;output hykooon +y bas 22al mn 90
    
    mov bx,cx
    sub bx,X_CENTER_FLYING
    add bx,bx
    sub cx,bx
    int 10H     ;output hykooon +y bas akbar mn 0
    
    mov bx,Y_CENTER_FLYING
    sub bx,dx
    add bx,bx
    add dx,bx
    int 10h     ;output hykooon -y bas akbar mn -90
    
    mov cx,VAR1_FLYING
    mov dx,VAR2_FLYING
    
    CMP CX,X_CENTER_FLYING
    jne CIRC1_FLYING
;REPEAT bas n8yar etegah el rasm hnrsem 3al DX
;3ashan el sqrt bytl3 discret values mesh arqam DECIMAL     
    mov dx,Y_CENTER_FLYING
    add dx,RADIUS_FLYING
    mov cx,X_CENTER_FLYING
    mov ah,0CH
    mov al,COLOR
    int 10h                        
;USING CIRCLE EQN han7ot el X ngeeeb el Y 
    CIRC2_FLYING:
    dec dx
    mov VAR2_FLYING,dX
    mov bx,Y_CENTER_FLYING
    sub dx,bx
    mov ax,dx
    mul ax
    mov bx,RADIUS2_FLYING
    sub bx,ax
    mov cx,bx
                                         
    CALL SQRT

    add ax,X_CENTER_FLYING
    mov cx,ax
    mov dx,VAR2_FLYING
    mov AH,0CH
    mov AL,COLOR
    int 10h        
    
    mov bx,cx
    sub bx,X_CENTER_FLYING
    add bx,bx
    sub cx,bx
    int 10h
    
    mov bx,dx
    sub bx,Y_CENTER_FLYING
    add bx,bx
    sub dx,bx
    int 10H
    
    mov bx,X_CENTER_FLYING
    sub bx,cx
    add bx,bx
    add cx,bx
    int 10h
    
    mov dx,VAR2_FLYING
    mov cx,VAR1_FLYING
    
    CMP dX,Y_CENTER_FLYING
    jne CIRC2_FLYING       
    CMP RADIUS_FLYING,0
    MANUALPOP
    RET
 DRAW_RING_FLYING  ENDP


DRAW_CIRCLE_FLYING PROC
    FILLING_FLYING:
    CALL DRAW_RING_FLYING 
    DEC RADIUS_FLYING
    CMP RADIUS_FLYING,0
    JNE FILLING_FLYING
     RET
DRAW_CIRCLE_FLYING ENDP


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

MAINDESIGN PROC 


    CursorPosition 44,17
    displaystring Name1
    displaystring msg15
    displaystring intialPTS
    CursorPosition 58,17
    displaystring Name2
    displaystring msg15
    displaystring intialPTS2
;;;;;;;;PLAYER 1 REGISTERS
;AX
   CursorPosition 4,4
    DRAW_CHAR 'A',BROWN 
    DRAW_CHAR 'X',BROWN 
    MOV AX,VALUE_AX1
    MOV SI,OFFSET BUFFER
    CALL number2string
    CursorPosition 9,4
    displaystring Buffer 


;BX
    CursorPosition 4,6
    DRAW_CHAR 'B',BROWN 
    DRAW_CHAR 'X',BROWN
      MOV AX,VALUE_BX1
    MOV SI,OFFSET BUFFER
    CALL number2string
    CursorPosition 9,6
    displaystring Buffer 


;CX 
    CursorPosition 4,8
    DRAW_CHAR 'C',BROWN 
    DRAW_CHAR 'X',BROWN
     MOV AX,VALUE_CX1
    MOV SI,OFFSET BUFFER
    CALL number2string
    CursorPosition 9,8
    displaystring Buffer  
;DX
    CursorPosition 4,10
    DRAW_CHAR 'D',BROWN 
    DRAW_CHAR 'X',BROWN
     MOV AX,VALUE_DX1
    MOV SI,OFFSET BUFFER
    CALL number2string
    CursorPosition 9,10
    displaystring Buffer   
;SI
    CursorPosition 28,4
    DRAW_CHAR 'S',BROWN 
    DRAW_CHAR 'I',BROWN
  
    MOV AX,VALUE_SI1
    MOV SI,OFFSET BUFFER
    CALL number2string
    CursorPosition 21,4
    displaystring Buffer  
;DI
    CursorPosition 28,6
    DRAW_CHAR 'D',BROWN 
    DRAW_CHAR 'I',BROWN 
   MOV AX,VALUE_DI1
    MOV SI,OFFSET BUFFER
    CALL number2string
    CursorPosition 21,6
    displaystring Buffer 
;SP
    CursorPosition 28,8
    DRAW_CHAR 'S',BROWN 
    DRAW_CHAR 'P',BROWN
      MOV AX,VALUE_SP1
    MOV SI,OFFSET BUFFER
    CALL number2string
    CursorPosition 21,8
    displaystring Buffer   
;DP
    CursorPosition 28,10
    DRAW_CHAR 'B',BROWN 
    DRAW_CHAR 'P',BROWN 
         MOV AX,VALUE_BP1
    MOV SI,OFFSET BUFFER
    CALL number2string
    CursorPosition 21,10
    displaystring Buffer
;;;;;;;;;;PLAYER 2 REGISTERS
;AX
    CursorPosition 44,4
    DRAW_CHAR 'A',BROWN 
    DRAW_CHAR 'X',BROWN 
    CursorPosition 49,4
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
;BX
    CursorPosition 44,6
    DRAW_CHAR 'B',BROWN 
    DRAW_CHAR 'X',BROWN 
    CursorPosition 49,6
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE 
;CX
    CursorPosition 44,8
    DRAW_CHAR 'C',BROWN 
    DRAW_CHAR 'X',BROWN 
    CursorPosition 49,8
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE 
;DX
    CursorPosition 44,10
    DRAW_CHAR 'D',BROWN 
    DRAW_CHAR 'X',BROWN 
    CursorPosition 49,10
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
;SI
    CursorPosition 68,4
    DRAW_CHAR 'S',BROWN 
    DRAW_CHAR 'I',BROWN
    CursorPosition 61,4
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
;DI
    CursorPosition 68,6
    DRAW_CHAR 'D',BROWN 
    DRAW_CHAR 'I',BROWN 
    CursorPosition 61,6
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
;SP
    CursorPosition 68,8
    DRAW_CHAR 'S',BROWN 
    DRAW_CHAR 'P',BROWN 
    CursorPosition 61,8
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
;DP
    CursorPosition 68,10
    DRAW_CHAR 'D',BROWN 
    DRAW_CHAR 'P',BROWN 
    CursorPosition 61,10
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
 ;;;;;;;;;;;;;;;;;;;;;
 ;PLAYER 1 MEMORY
        CursorPosition 33,0
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
            CursorPosition 38,0
    DRAW_CHAR '0',WHITE 

        CursorPosition 33,1
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,1
    DRAW_CHAR '1',WHITE 

        CursorPosition 33,2
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE 
                CursorPosition 38,2
    DRAW_CHAR '2',WHITE  

        CursorPosition 33,3
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,3
    DRAW_CHAR '3',WHITE 

        CursorPosition 33,4
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,4
    DRAW_CHAR '4',WHITE 

        CursorPosition 33,5
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,5
    DRAW_CHAR '5',WHITE 

        CursorPosition 33,6
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,6
    DRAW_CHAR '6',WHITE 

        CursorPosition 33,7
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,7
    DRAW_CHAR '7',WHITE 

        CursorPosition 33,8
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,8
    DRAW_CHAR '8',WHITE 

        CursorPosition 33,9
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,9
    DRAW_CHAR '9',WHITE 

        CursorPosition 33,10
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,10
    DRAW_CHAR 'A',WHITE 
        CursorPosition 33,11
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,11
    DRAW_CHAR 'B',WHITE 
        CursorPosition 33,12
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,12
    DRAW_CHAR 'C',WHITE 
        CursorPosition 33,13
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,13
    DRAW_CHAR 'D',WHITE 
        CursorPosition 33,14
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,14
    DRAW_CHAR 'E',WHITE 
        CursorPosition 33,15
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,15
    DRAW_CHAR 'F',WHITE 
 ;;;;;;;;;;;;;;;;;;;;;;;
 ;;PLAYER 2 MEMORY

         CursorPosition 73,0
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
            CursorPosition 78,0
    DRAW_CHAR '0',WHITE 

        CursorPosition 73,1
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,1
    DRAW_CHAR '1',WHITE 

        CursorPosition 73,2
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE 
                CursorPosition 78,2
    DRAW_CHAR '2',WHITE  

        CursorPosition 73,3
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,3
    DRAW_CHAR '3',WHITE 

        CursorPosition 73,4
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,4
    DRAW_CHAR '4',WHITE 

        CursorPosition 73,5
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,5
    DRAW_CHAR '5',WHITE 

        CursorPosition 73,6
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,6
    DRAW_CHAR '6',WHITE 

        CursorPosition 73,7
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,7
    DRAW_CHAR '7',WHITE 

        CursorPosition 73,8
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,8
    DRAW_CHAR '8',WHITE 

        CursorPosition 73,9
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,9
    DRAW_CHAR '9',WHITE 

        CursorPosition 73,10
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,10
    DRAW_CHAR 'A',WHITE 
        CursorPosition 73,11
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,11
    DRAW_CHAR 'B',WHITE 
        CursorPosition 73,12
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,12
    DRAW_CHAR 'C',WHITE 
        CursorPosition 73,13
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,13
    DRAW_CHAR 'D',WHITE 
        CursorPosition 73,14
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,14
    DRAW_CHAR 'E',WHITE 
        CursorPosition 73,15
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,15
    DRAW_CHAR 'F',WHITE   
    CursorPosition 1,22
    DRAW_CHAR 'C',WHITE       
    DRAW_CHAR 'H',WHITE
    DRAW_CHAR 'A',WHITE
    DRAW_CHAR 'T',WHITE
    DRAW_CHAR ' ',WHITE
    DRAW_CHAR 'A',WHITE
    DRAW_CHAR 'R',WHITE
    DRAW_CHAR 'E',WHITE
    DRAW_CHAR 'A',WHITE

    CursorPosition 1,23
    DRAW_CHAR 'C',WHITE       
    DRAW_CHAR 'H',WHITE
    DRAW_CHAR 'A',WHITE
    DRAW_CHAR 'T',WHITE
    DRAW_CHAR ' ',WHITE
    DRAW_CHAR 'A',WHITE
    DRAW_CHAR 'R',WHITE
    DRAW_CHAR 'E',WHITE
    DRAW_CHAR 'A',WHITE

    CursorPosition 1,24
    DRAW_CHAR 'C',WHITE       
    DRAW_CHAR 'H',WHITE
    DRAW_CHAR 'A',WHITE
    DRAW_CHAR 'T',WHITE
    DRAW_CHAR ' ',WHITE
    DRAW_CHAR 'A',WHITE
    DRAW_CHAR 'R',WHITE
    DRAW_CHAR 'E',WHITE
    DRAW_CHAR 'A',WHITE

    
;;;;;;;;;;;;;;;;;;;;;;;;;;
  MOV ROW_REDEFINE,20
  ;PLAYER1
    VERTICALLINES HALF,0,ROWCHAT       ;PASS COLUMN  
    ;;;;;;;;;;;;;;;;;;;;;;
    VERTICALLINES C5,0,225
    VERTICALLINES 298,0,225 ;Numbering Memory Lines Player 1
 
    ;;;;;;;;;;;;;;;;;;;;; 
    MOV ROW_REDEFINE,20
    VERTICALLINES C6,0,225
    VERTICALLINES 618,0,225 ;Numbering Memory Lines Player 2
    

    
    ;CHAT AREA

    HORIZONTALLINES ROWCHAT,STARTCHAT,ENDCHAT

    ;PLAYER 1
    HORIZONTALLINES ROW1,STARTC1,ENDC1 
    HORIZONTALLINES ROW11,STARTC11,ENDC11
    ;PLAYER 2
    HORIZONTALLINES ROW2,STARTC2,ENDC2
    HORIZONTALLINES ROW22,STARTC22,ENDC22   
    MOV C1,50
    MOV C2,130
    MOV C3,370
    MOV C4,450
    
    REGISTERSDRAWINGS C1,C2,R1,R2  

    REGISTERSDRAWINGS C3,C4,R3,R4 

    MOV X_CENTER,35
    MOV Y_CENTER,245
    MOV RADIUS,12
    MOV COLOR,L_MAGENTA
    CALL DRAW_CIRCLE 


    MOV X_CENTER,100
    MOV Y_CENTER,245
    MOV RADIUS,12
    MOV COLOR,YELLOW
    CALL DRAW_CIRCLE 

    MOV X_CENTER,171
    MOV Y_CENTER,245
    MOV RADIUS,12
    MOV COLOR,L_GRAY
    CALL DRAW_CIRCLE 

    MOV X_CENTER,235
    MOV Y_CENTER,245
    MOV RADIUS,12
    MOV COLOR,BLUE
    CALL DRAW_CIRCLE 

    ADD HITTER_BLUE,48
    CursorPosition 29,17
    DRAW_CHAR HITTER_BLUE,Green
    sub HITTER_BLUE,48

    ADD HITTER_GRAY,48
    CursorPosition 21,17
    DRAW_CHAR HITTER_GRAY,Green
    sub HITTER_GRAY,48

    ADD HITTER_YELLOW,48
    CursorPosition 12,17
    DRAW_CHAR HITTER_YELLOW,Green
    sub HITTER_YELLOW,48

    ADD HITTER_PINK,48
    CursorPosition 4,17
    DRAW_CHAR HITTER_PINK,Green
    sub HITTER_PINK,48
    DRAW_MEMORY C5,C6  
    RET 

MAINDESIGN ENDP


MAINDESIGN2 PROC 


    CursorPosition 44,17
    displaystring Name1
    displaystring msg15
    displaystring intialPTS
    CursorPosition 58,17
    displaystring Name2
    displaystring msg15
    displaystring intialPTS2
;;;;;;;;PLAYER 1 REGISTERS
;AX
   CursorPosition 4,4
    DRAW_CHAR 'A',BROWN 
    DRAW_CHAR 'X',BROWN 

    CursorPosition 9,4
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  


;BX
    CursorPosition 4,6
    DRAW_CHAR 'B',BROWN 
    DRAW_CHAR 'X',BROWN
    CursorPosition 9,6
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  


;CX 
    CursorPosition 4,8
    DRAW_CHAR 'C',BROWN 
    DRAW_CHAR 'X',BROWN
    CursorPosition 9,8
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE   
;DX
    CursorPosition 4,10
    DRAW_CHAR 'D',BROWN 
    DRAW_CHAR 'X',BROWN
    CursorPosition 9,10
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE   
;SI
    CursorPosition 28,4
    DRAW_CHAR 'S',BROWN 
    DRAW_CHAR 'I',BROWN
    CursorPosition 21,4
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE   
;DI
    CursorPosition 28,6
    DRAW_CHAR 'D',BROWN 
    DRAW_CHAR 'I',BROWN 
    CursorPosition 21,6
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
;SP
    CursorPosition 28,8
    DRAW_CHAR 'S',BROWN 
    DRAW_CHAR 'P',BROWN
    CursorPosition 21,8
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE   
;DP
    CursorPosition 28,10
    DRAW_CHAR 'D',BROWN 
    DRAW_CHAR 'P',BROWN 
    CursorPosition 21,10
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
;;;;;;;;;;PLAYER 2 REGISTERS
;AX
    CursorPosition 44,4
    DRAW_CHAR 'A',BROWN 
    DRAW_CHAR 'X',BROWN 
    CursorPosition 49,4
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
;BX
    CursorPosition 44,6
    DRAW_CHAR 'B',BROWN 
    DRAW_CHAR 'X',BROWN 
    CursorPosition 49,6
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE 
;CX
    CursorPosition 44,8
    DRAW_CHAR 'C',BROWN 
    DRAW_CHAR 'X',BROWN 
    CursorPosition 49,8
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE 
;DX
    CursorPosition 44,10
    DRAW_CHAR 'D',BROWN 
    DRAW_CHAR 'X',BROWN 
    CursorPosition 49,10
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
;SI
    CursorPosition 68,4
    DRAW_CHAR 'S',BROWN 
    DRAW_CHAR 'I',BROWN
    CursorPosition 61,4
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
;DI
    CursorPosition 68,6
    DRAW_CHAR 'D',BROWN 
    DRAW_CHAR 'I',BROWN 
    CursorPosition 61,6
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
;SP
    CursorPosition 68,8
    DRAW_CHAR 'S',BROWN 
    DRAW_CHAR 'P',BROWN 
    CursorPosition 61,8
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
;DP
    CursorPosition 68,10
    DRAW_CHAR 'D',BROWN 
    DRAW_CHAR 'P',BROWN 
    CursorPosition 61,10
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
 ;;;;;;;;;;;;;;;;;;;;;
 ;PLAYER 1 MEMORY
        CursorPosition 33,0
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
            CursorPosition 38,0
    DRAW_CHAR '0',WHITE 

        CursorPosition 33,1
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,1
    DRAW_CHAR '1',WHITE 

        CursorPosition 33,2
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE 
                CursorPosition 38,2
    DRAW_CHAR '2',WHITE  

        CursorPosition 33,3
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,3
    DRAW_CHAR '3',WHITE 

        CursorPosition 33,4
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,4
    DRAW_CHAR '4',WHITE 

        CursorPosition 33,5
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,5
    DRAW_CHAR '5',WHITE 

        CursorPosition 33,6
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,6
    DRAW_CHAR '6',WHITE 

        CursorPosition 33,7
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,7
    DRAW_CHAR '7',WHITE 

        CursorPosition 33,8
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,8
    DRAW_CHAR '8',WHITE 

        CursorPosition 33,9
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,9
    DRAW_CHAR '9',WHITE 

        CursorPosition 33,10
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,10
    DRAW_CHAR 'A',WHITE 
        CursorPosition 33,11
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,11
    DRAW_CHAR 'B',WHITE 
        CursorPosition 33,12
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,12
    DRAW_CHAR 'C',WHITE 
        CursorPosition 33,13
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,13
    DRAW_CHAR 'D',WHITE 
        CursorPosition 33,14
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,14
    DRAW_CHAR 'E',WHITE 
        CursorPosition 33,15
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 38,15
    DRAW_CHAR 'F',WHITE 
 ;;;;;;;;;;;;;;;;;;;;;;;
 ;;PLAYER 2 MEMORY

         CursorPosition 73,0
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
            CursorPosition 78,0
    DRAW_CHAR '0',WHITE 

        CursorPosition 73,1
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,1
    DRAW_CHAR '1',WHITE 

        CursorPosition 73,2
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE 
                CursorPosition 78,2
    DRAW_CHAR '2',WHITE  

        CursorPosition 73,3
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,3
    DRAW_CHAR '3',WHITE 

        CursorPosition 73,4
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,4
    DRAW_CHAR '4',WHITE 

        CursorPosition 73,5
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,5
    DRAW_CHAR '5',WHITE 

        CursorPosition 73,6
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,6
    DRAW_CHAR '6',WHITE 

        CursorPosition 73,7
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,7
    DRAW_CHAR '7',WHITE 

        CursorPosition 73,8
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,8
    DRAW_CHAR '8',WHITE 

        CursorPosition 73,9
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,9
    DRAW_CHAR '9',WHITE 

        CursorPosition 73,10
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,10
    DRAW_CHAR 'A',WHITE 
        CursorPosition 73,11
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,11
    DRAW_CHAR 'B',WHITE 
        CursorPosition 73,12
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,12
    DRAW_CHAR 'C',WHITE 
        CursorPosition 73,13
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,13
    DRAW_CHAR 'D',WHITE 
        CursorPosition 73,14
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,14
    DRAW_CHAR 'E',WHITE 
        CursorPosition 73,15
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE
    DRAW_CHAR '0',WHITE 
    DRAW_CHAR '0',WHITE  
                CursorPosition 78,15
    DRAW_CHAR 'F',WHITE   
    CursorPosition 1,22
    DRAW_CHAR 'C',WHITE       
    DRAW_CHAR 'H',WHITE
    DRAW_CHAR 'A',WHITE
    DRAW_CHAR 'T',WHITE
    DRAW_CHAR ' ',WHITE
    DRAW_CHAR 'A',WHITE
    DRAW_CHAR 'R',WHITE
    DRAW_CHAR 'E',WHITE
    DRAW_CHAR 'A',WHITE

    CursorPosition 1,23
    DRAW_CHAR 'C',WHITE       
    DRAW_CHAR 'H',WHITE
    DRAW_CHAR 'A',WHITE
    DRAW_CHAR 'T',WHITE
    DRAW_CHAR ' ',WHITE
    DRAW_CHAR 'A',WHITE
    DRAW_CHAR 'R',WHITE
    DRAW_CHAR 'E',WHITE
    DRAW_CHAR 'A',WHITE

    CursorPosition 1,24
    DRAW_CHAR 'C',WHITE       
    DRAW_CHAR 'H',WHITE
    DRAW_CHAR 'A',WHITE
    DRAW_CHAR 'T',WHITE
    DRAW_CHAR ' ',WHITE
    DRAW_CHAR 'A',WHITE
    DRAW_CHAR 'R',WHITE
    DRAW_CHAR 'E',WHITE
    DRAW_CHAR 'A',WHITE

    
;;;;;;;;;;;;;;;;;;;;;;;;;;
  MOV ROW_REDEFINE,20
  ;PLAYER1
    VERTICALLINES HALF,0,ROWCHAT       ;PASS COLUMN  
    ;;;;;;;;;;;;;;;;;;;;;;
    VERTICALLINES C5,0,225
    VERTICALLINES 298,0,225 ;Numbering Memory Lines Player 1
 
    ;;;;;;;;;;;;;;;;;;;;; 
    MOV ROW_REDEFINE,20
    VERTICALLINES C6,0,225
    VERTICALLINES 618,0,225 ;Numbering Memory Lines Player 2
    

    
    ;CHAT AREA

    HORIZONTALLINES ROWCHAT,STARTCHAT,ENDCHAT

    ;PLAYER 1
    HORIZONTALLINES ROW1,STARTC1,ENDC1 
    HORIZONTALLINES ROW11,STARTC11,ENDC11
    ;PLAYER 2
    HORIZONTALLINES ROW2,STARTC2,ENDC2
    HORIZONTALLINES ROW22,STARTC22,ENDC22   
    MOV C1,50
    MOV C2,130
    MOV C3,370
    MOV C4,450
    
    REGISTERSDRAWINGS C1,C2,R1,R2  

    REGISTERSDRAWINGS C3,C4,R3,R4 

    MOV X_CENTER,35
    MOV Y_CENTER,245
    MOV RADIUS,12
    MOV COLOR,L_MAGENTA
    CALL DRAW_CIRCLE 


    MOV X_CENTER,100
    MOV Y_CENTER,245
    MOV RADIUS,12
    MOV COLOR,YELLOW
    CALL DRAW_CIRCLE 

    MOV X_CENTER,171
    MOV Y_CENTER,245
    MOV RADIUS,12
    MOV COLOR,L_GRAY
    CALL DRAW_CIRCLE 

    MOV X_CENTER,235
    MOV Y_CENTER,245
    MOV RADIUS,12
    MOV COLOR,BLUE
    CALL DRAW_CIRCLE 

    ADD HITTER_BLUE2,48
    CursorPosition 29,17
    DRAW_CHAR HITTER_BLUE2,Green
    sub HITTER_BLUE2,48

    ADD HITTER_GRAY2,48
    CursorPosition 21,17
    DRAW_CHAR HITTER_GRAY2,Green
    sub HITTER_GRAY2,48

    ADD HITTER_YELLOW2,48
    CursorPosition 12,17
    DRAW_CHAR HITTER_YELLOW2,Green
    sub HITTER_YELLOW2,48

    ADD HITTER_PINK2,48
    CursorPosition 4,17
    DRAW_CHAR HITTER_PINK2,Green
    sub HITTER_PINK2,48
    DRAW_MEMORY C7,C8
    RET 

MAINDESIGN2 ENDP


DRAW_ROCKET PROC
    
	EXIT_ROCKET:
    
    dec Y_ROCKET
    MOV DX,Y_ROCKET
	MOV AH, 0CH   ;WRITE DOT WITH INTERRUPTS 
	MOV COLOR,YELLOW
	MOV AL, COLOR     ;COLOUR
	int 10H
    
    MOV DX,Y_ROCKET
	MOV AH, 0CH   ;WRITE DOT WITH INTERRUPTS 
	MOV COLOR,BLACK
	MOV AL, COLOR     ;COLOUR
	int 10H
    
	SUB Y_ROCKET,1
	CMP Y_ROCKET,1
    JA EXIT_ROCKET
    RET
    DRAW_ROCKET ENDP
    


ROCKET_GAME PROC
    BUBBLES:
    P1_TURN:
    MOV HALT,20
    SKIP_BLUE:
    MOV RADIUS_FLYING,10
    MOV COLOR,BLACK
    CALL DRAW_CIRCLE_FLYING
    MOV X_CENTER_FLYING,12
    MOV Y_CENTER_FLYING,25
    MOV BLUE_X_CENTER_FLYING,12
    MOV BLUE_Y_CENTER_FLYING,25
    JMP PROCESSING
    MOV SI,0
    PROCESSING:
	IN AX, 60H  
    CMP AL, 48H     
	JE PRESS_UP
    CMP AL, 50H     
	JE PRESS_DOWN
    CMP AL, 4BH     
	JE PRESS_LEFT
    CMP AL, 4DH     
	JE PRESS_RIGHT	
    CMP AL,39H
    JE PRESS_SPACE
    CMP AL,2EH  ;SCAN CODE C
    JE COMMAND_LINES
    CMP AL,3EH
    JE RESULTS

    HLT
    dec HALT
    CMP HALT,0
    JNE PROCESSING
    CMP X_CENTER_FLYING,230
    JG WAITING_GRAY
    CALL QUEUE_BLUE
    
    
    MOV HALT,20
    JMP PROCESSING   
    COMMAND_LINES:
    CursorPosition 0,20
    CALL INPUT
    lea bx, TEXT
mov ch, 0
mov cl, [bx+1] ; get string size.
Check:
MOV AL,[BX]
CMP AL,FCHAR2
JE Eroor
INC BX
LOOP CHECK 
    CALL error2                   
    CALL Excution_Unite1
    CALL UPDATE_INTERF1
    ;;CALL UPDATE_INTERF2
    
    IN AX,60H 
    CMP AL,41H
    JE P2_TURN
    JMP PROCESSING


    PRESS_SPACE:
    MOV AL,YELLOW 
    MOV COLOR,AL                                
    MOV CX,X_REC
    ADD CX,10
    MOV DX,Y_REC
    MOV Y_ROCKET,DX
    CALL DRAW_ROCKET 

    PUSH BX
    MOV BX,BLUE_X_CENTER_FLYING
    ADD BX,BLUE_RADIUS_FLYING
    CMP CX,BX
    POP BX
    JA PROCESSING

    PUSH BX
    MOV BX,BLUE_X_CENTER_FLYING
    SUB BX,BLUE_RADIUS_FLYING
    CMP CX,BX
    POP BX
    JL PROCESSING
    
    HITTING:
    inc HITTER_BLUE
    ADD HITTER_BLUE,48
    CursorPosition 29,17
    DRAW_CHAR HITTER_BLUE,Green
    sub HITTER_BLUE,48
    
    CMP [intialPTS+1],57
    JE TENS
    SUB [intialPTS+1],48
    ADD [intialPTS+1],1
    ADD [intialPTS+1],48
    CALL MAINDESIGN
    JMP WAITING_GRAY
    TENS:
    ;RESET UNITS to zero
    MOV [intialPTS+1],48
    ;ADD ON TO TENS
    SUB [intialPTS],48
    ADD [intialPTS],1
    ADD [intialPTS],48
    CALL MAINDESIGN
    JMP WAITING_GRAY
	
    PRESS_UP:
    CMP Y_REC,165 
    JBE EXIT1
	SUB Y_REC,12
	MOV REC_SIZE,20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN
    MOV COLOR,RED
	CALL DRAW_REC2
    EXIT1:
	JMP PROCESSING
    
    PRESS_DOWN:
    CMP Y_REC,208
    JAE EXIT2
	ADD Y_REC,12
	MOV REC_SIZE, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN
	MOV COLOR,RED
    CALL DRAW_REC2
	EXIT2:
    JMP PROCESSING
    
	PRESS_LEFT:
    CMP X_REC,0
    JBE EXIT3
    SUB X_REC,30
	MOV REC_SIZE, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN
	MOV COLOR,RED
    CALL DRAW_REC2
    EXIT3:
    JMP PROCESSING

	PRESS_RIGHT:
    CMP X_REC,225
    JAE EXIT4
	ADD X_REC, 30
	MOV REC_SIZE, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN
	MOV COLOR,RED
    CALL DRAW_REC2
	EXIT4:
    JMP PROCESSING

    RESULTS:
    CALL CLR_SCR
    MOV CX,90
    MOV TEXT_ROW,0
    SPLIT_SCREEN_INTERFACE10:
    CursorPosition 28H,TEXT_ROW 
    displaystring msg15
    INC TEXT_ROW       
    CMP TEXT_ROW,25
    JNE SPLIT_SCREEN_INTERFACE10
    CursorPosition 0,0
    displaystring Name1
    displaystring msg15
    displaystring intialPTS
    CursorPosition 41,0
    displaystring Name2
    displaystring msg15
    displaystring intialPTS2
    SHOW_RESULT:
    HLT
    LOOP SHOW_RESULT
    RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    WAITING_GRAY:
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT

    SKIP_GRAY:
    MOV HALT,20
    MOV RADIUS_FLYING,10
    MOV COLOR,BLACK
    CALL DRAW_CIRCLE_FLYING
    MOV X_CENTER_FLYING,12
    MOV Y_CENTER_FLYING,25
    MOV GRAY_X_CENTER_FLYING,12
    MOV GRAY_Y_CENTER_FLYING,25
    JMP PROCESSING1
    TEST11:
    JMP WAITING_YELLOW
    PROCESSING1:
	IN AX, 60H    
    CMP AL, 48H     
	JE PRESS_UP1
    CMP AL, 50H     
	JE PRESS_DOWN1
    CMP AL, 4BH     
	JE PRESS_LEFT1
    CMP AL, 4DH     
	JE PRESS_RIGHT1	
    CMP AL,39H
    JE PRESS_SPACE1
    CMP AL,2EH  ;SCAN CODE C
    JE COMMAND_LINES1
    CMP AL,3EH
    JE RESULTS1
    HLT
    dec HALT
    CMP HALT,0
    JNE PROCESSING1
    CMP X_CENTER_FLYING,230
    JG WAITING_YELLOW
    CALL QUEUE_GRAY

    MOV HALT,20
    JMP PROCESSING1  
    
    COMMAND_LINES1:
    CursorPosition 0,20
     CALL INPUT
    lea bx, TEXT
mov ch, 0
mov cl, [bx+1] ; get string size.
Checker:
MOV AL,[BX]
CMP AL,FCHAR2
JE Eroor
INC BX
LOOP CHECKer 
    CALL ERROR2                    
    CALL Excution_Unite1
    CALL UPDATE_INTERF1
    ;;CALL UPDATE_INTERF2 
    


    IN AX,60H 
    CMP AL,41H
    JE P2_TURN
    
    JMP PROCESSING1

    PRESS_SPACE1:
    MOV AL,YELLOW 
    MOV COLOR,AL                                
    MOV CX,X_REC
    ADD CX,10
    MOV DX,Y_REC
    MOV Y_ROCKET,DX
    CALL DRAW_ROCKET 

    PUSH BX
    MOV BX,GRAY_X_CENTER_FLYING
    ADD BX,GRAY_RADIUS_FLYING
    CMP CX,BX
    POP BX
    JA PROCESSING1

    PUSH BX
    MOV BX,GRAY_X_CENTER_FLYING
    SUB BX,GRAY_RADIUS_FLYING
    CMP CX,BX
    POP BX
    JL PROCESSING1
    
    HITTING1:
    inc HITTER_GRAY
    ADD HITTER_GRAY,48
    sub HITTER_GRAY,48


    SUB [intialPTS+1],48
    ADD [intialPTS+1],1
    ADD [intialPTS+1],48
    CALL MAINDESIGN
    JMP WAITING_YELLOW
	
    PRESS_UP1:
    CMP Y_REC,165
    JBE EXIT11
	SUB Y_REC,12
	MOV REC_SIZE, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN
    MOV COLOR,RED
	CALL DRAW_REC2
    EXIT11:
	JMP PROCESSING1
    
    PRESS_DOWN1:
    CMP Y_REC,208
    JAE EXIT22
	ADD Y_REC,12
	MOV REC_SIZE, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN
	MOV COLOR,RED
    CALL DRAW_REC2
	EXIT22:
    JMP PROCESSING1
    
	PRESS_LEFT1:
    CMP X_REC,0
    JBE EXIT33
    SUB X_REC,30
	MOV REC_SIZE, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN
	MOV COLOR,RED
    CALL DRAW_REC2
    EXIT33:
    JMP PROCESSING1

	PRESS_RIGHT1:
    CMP X_REC,225
    JAE EXIT44
	ADD X_REC, 30
	MOV REC_SIZE, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN
	MOV COLOR,RED
    CALL DRAW_REC2
	EXIT44:
    JMP PROCESSING1

    RESULTS1:
    CALL CLR_SCR
    MOV CX,90
    
    MOV TEXT_ROW,0
    SPLIT_SCREEN_INTERFACE11:
    CursorPosition 28H,TEXT_ROW 
    displaystring msg15
    INC TEXT_ROW       
    CMP TEXT_ROW,25
    JNE SPLIT_SCREEN_INTERFACE11
    CursorPosition 0,0
    displaystring Name1
    displaystring msg15
    displaystring intialPTS
    CursorPosition 41,0
    displaystring Name2
    displaystring msg15
    displaystring intialPTS2
    SHOW_RESULT1:
    HLT
    LOOP SHOW_RESULT1
    RET

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    WAITING_YELLOW:
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT

    SKIP_YELLOW:
    MOV HALT,20
    MOV RADIUS_FLYING,10
    MOV COLOR,BLACK
    CALL DRAW_CIRCLE_FLYING
    MOV X_CENTER_FLYING,12
    MOV Y_CENTER_FLYING,25
    MOV YELLOW_X_CENTER_FLYING,12
    MOV YELLOW_Y_CENTER_FLYING,25
    JMP PROCESSING2
    TEST2:
    JMP WAITING_PINK
    PROCESSING2:
	IN AX, 60H    

    CMP AL, 48H     
	JE PRESS_UP2
    CMP AL, 50H     
	JE PRESS_DOWN2
    CMP AL, 4BH     
	JE PRESS_LEFT2
    CMP AL, 4DH     
	JE PRESS_RIGHT2	
    CMP AL,39H
    JE PRESS_SPACE2
    CMP AL,2EH  ;SCAN CODE C
    JE COMMAND_LINES2
    CMP AL,3EH
    JE RESULTS2
    HLT
    dec HALT
    CMP HALT,0
    JNE PROCESSING2
    CMP X_CENTER_FLYING,230
    JG WAITING_PINK
    CALL QUEUE_YELLOW

    MOV HALT,20
    JMP PROCESSING2  

    COMMAND_LINES2:
    CursorPosition 0,20
    CALL INPUT
    lea bx, TEXT
mov ch, 0
mov cl, [bx+1] ; get string size.
Check01:
MOV AL,[BX]
CMP AL,FCHAR2
JE Eroor
INC BX
LOOP CHECK01 
    CALL ERROR2                   
    CALL Excution_Unite1
    CALL UPDATE_INTERF1
   ;; CALL UPDATE_INTERF2
    


    IN AX,60H 
    CMP AL,41H
    JE P2_TURN
    JMP PROCESSING2

    PRESS_SPACE2:
    MOV AL,YELLOW 
    MOV COLOR,AL                                
    MOV CX,X_REC
    ADD CX,10
    MOV DX,Y_REC
    MOV Y_ROCKET,DX
    CALL DRAW_ROCKET 

    PUSH BX
    MOV BX,YELLOW_X_CENTER_FLYING
    ADD BX,YELLOW_RADIUS_FLYING
    CMP CX,BX
    POP BX
    JA PROCESSING2

    PUSH BX
    MOV BX,YELLOW_X_CENTER_FLYING
    SUB BX,YELLOW_RADIUS_FLYING
    CMP CX,BX
    POP BX
    JL PROCESSING2
    
    HITTING2:
    inc HITTER_YELLOW
    ADD HITTER_YELLOW,48
    CursorPosition 12,17
    DRAW_CHAR HITTER_YELLOW,Green
    sub HITTER_YELLOW,48

    SUB [intialPTS+1],48
    ADD [intialPTS+1],1
    ADD [intialPTS+1],48
    CALL MAINDESIGN

    

    JMP WAITING_PINK
	
    PRESS_UP2:
    CMP Y_REC,165
    JBE EXIT111
	SUB Y_REC,12
	MOV REC_SIZE, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN
    MOV COLOR,RED
	CALL DRAW_REC2
    EXIT111:
	JMP PROCESSING2
    
    PRESS_DOWN2:
    CMP Y_REC,208
    JAE EXIT222
	ADD Y_REC,12
	MOV REC_SIZE, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN
	MOV COLOR,RED
    CALL DRAW_REC2
	EXIT222:
    JMP PROCESSING2
    
	PRESS_LEFT2:
    CMP X_REC,0
    JBE EXIT333
    SUB X_REC,30
	MOV REC_SIZE, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN
	MOV COLOR,RED
    CALL DRAW_REC2
    EXIT333:
    JMP PROCESSING2

	PRESS_RIGHT2:
    CMP X_REC,225
    JAE EXIT444
	ADD X_REC, 30
	MOV REC_SIZE, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN
	MOV COLOR,RED
    CALL DRAW_REC2
	EXIT444:
    JMP PROCESSING2
    
    RESULTS2:
    CALL CLR_SCR
    MOV CX,90
    MOV TEXT_ROW,0
    SPLIT_SCREEN_INTERFACE12:
    CursorPosition 28H,TEXT_ROW 
    displaystring msg15
    INC TEXT_ROW       
    CMP TEXT_ROW,25
    JNE SPLIT_SCREEN_INTERFACE12
    CursorPosition 0,0
    displaystring Name1
    displaystring msg15
    displaystring intialPTS
    CursorPosition 41,0
    displaystring Name2
    displaystring msg15
    displaystring intialPTS2
    SHOW_RESULT2:
    HLT
    LOOP SHOW_RESULT2
    RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    WAITING_PINK:
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT

    SKIP_PINK:
    MOV HALT,20
    MOV RADIUS_FLYING,10
    MOV COLOR,BLACK
    CALL DRAW_CIRCLE_FLYING
    MOV X_CENTER_FLYING,12
    MOV Y_CENTER_FLYING,25
    MOV PINK_X_CENTER_FLYING,12
    MOV PINK_Y_CENTER_FLYING,25
    JMP PROCESSING3
    TEST3:
    JMP TERMINATION
    PROCESSING3:
	IN AX, 60H    
    CMP AL, 48H     
	JE PRESS_UP3
    CMP AL, 50H     
	JE PRESS_DOWN3
    CMP AL, 4BH     
	JE PRESS_LEFT3
    CMP AL, 4DH     
	JE PRESS_RIGHT3	
    CMP AL,39H
    JE PRESS_SPACE3
    CMP AL,2EH  ;SCAN CODE C
    JE COMMAND_LINES3
    CMP AL,3EH
    JE RESULTS3
    HLT
    dec HALT
    CMP HALT,0
    JNE PROCESSING3
    CMP X_CENTER_FLYING,230
    JG TERMINATION
    CALL QUEUE_PINK

    MOV HALT,20
    JMP PROCESSING3  
    COMMAND_LINES3:
    CursorPosition 0,20
      CALL INPUT
    lea bx, TEXT
mov ch, 0
mov cl, [bx+1] ; get string size.
Checker2:
MOV AL,[BX]
CMP AL,FCHAR2
JE Eroor
INC BX
LOOP CHECKer2 
    CALL ERROR2                    
    CALL Excution_Unite1
    CALL UPDATE_INTERF1
    ;;CALL UPDATE_INTERF2 
    

    IN AX,60H 
    CMP AL,41H
    JE P2_TURN
    JMP PROCESSING3

    PRESS_SPACE3:
    MOV AL,YELLOW 
    MOV COLOR,AL                                
    MOV CX,X_REC
    ADD CX,10
    MOV DX,Y_REC
    MOV Y_ROCKET,DX
    CALL DRAW_ROCKET 

    PUSH BX
    MOV BX,PINK_X_CENTER_FLYING
    ADD BX,PINK_RADIUS_FLYING
    CMP CX,BX
    POP BX
    JA PROCESSING3

    PUSH BX
    MOV BX,PINK_X_CENTER_FLYING
    SUB BX,PINK_RADIUS_FLYING
    CMP CX,BX
    POP BX
    JL PROCESSING3
    
    HITTING3:
    inc HITTER_PINK
    ADD HITTER_PINK,48
    CursorPosition 4,17
    DRAW_CHAR HITTER_PINK,Green
    sub HITTER_PINK,48

    SUB [intialPTS+1],48
    ADD [intialPTS+1],1
    ADD [intialPTS+1],48
    CALL MAINDESIGN

    DEC AVAILIBLE_BUBBLES
    CMP AVAILIBLE_BUBBLES,0
    JA SKIP_BLUE
    CMP AVAILIBLE_BUBBLES,0
    JBE TERMINATION
	
    PRESS_UP3:
    CMP Y_REC,165
    JBE EXIT1111
	SUB Y_REC,12
	MOV REC_SIZE, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN
    MOV COLOR,RED
	CALL DRAW_REC2
    EXIT1111:
	JMP PROCESSING3
    
    PRESS_DOWN3:
    CMP Y_REC,208
    JAE EXIT2222
	ADD Y_REC,12
	MOV REC_SIZE, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN
	MOV COLOR,RED
    CALL DRAW_REC2
	EXIT2222:
    JMP PROCESSING3
    
	PRESS_LEFT3:
    CMP X_REC,0
    JBE EXIT3333
    SUB X_REC,30
	MOV REC_SIZE, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN
	MOV COLOR,RED
    CALL DRAW_REC2
    EXIT3333:
    JMP PROCESSING3

	PRESS_RIGHT3:
    CMP X_REC,225
    JAE EXIT4444
	ADD X_REC, 30
	MOV REC_SIZE, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN
	MOV COLOR,RED
    CALL DRAW_REC2
	EXIT4444:
    JMP PROCESSING3
    RESULTS3:
    CALL CLR_SCR
    MOV CX,90
    MOV TEXT_ROW,0
    SPLIT_SCREEN_INTERFACE13:
    CursorPosition 28H,TEXT_ROW 
    displaystring msg15
    INC TEXT_ROW       
    CMP TEXT_ROW,25
    JNE SPLIT_SCREEN_INTERFACE13
    CursorPosition 0,0
    displaystring Name1
    displaystring msg15
    displaystring intialPTS
    CursorPosition 41,0
    displaystring Name2
    displaystring msg15
    displaystring intialPTS2
    SHOW_RESULT3:
    HLT
    LOOP SHOW_RESULT3
    RET
    
    DEC AVAILIBLE_BUBBLES
    CMP AVAILIBLE_BUBBLES,0
    JNE BUBBLES
    TERMINATION:
;TERMINATE NO MORE COLOURED BUBBLES AVAILIBLE 
    MOV RADIUS_FLYING,10
    MOV COLOR,BLACK
    CALL DRAW_CIRCLE_FLYING
    MOV X_CENTER_FLYING,12
    MOV Y_CENTER_FLYING,25

    PROCESSING4:
	IN AX, 60H    

    CMP AL, 48H     
	JE PRESS_UP4
    CMP AL, 50H     
	JE PRESS_DOWN4
    CMP AL, 4BH     
	JE PRESS_LEFT4
    CMP AL, 4DH     
	JE PRESS_RIGHT4	
    CMP AL,39H
    JE PRESS_SPACE4
    CMP AL,2EH  ;SCAN CODE C
    JE COMMAND_LINES4
    CMP AL,3EH
    JE RESULTS4
    HLT
    dec HALT
    CMP HALT,0
    JNE PROCESSING4
    CMP X_CENTER_FLYING,230
    JG PROCESSING4
    CALL QUEUE_BLACK

    MOV HALT,20
    JMP PROCESSING4
    COMMAND_LINES4:
    CursorPosition 0,20
    CALL INPUT
   lea bx, TEXT
mov ch, 0
mov cl, [bx+1] ; get string size.
Checker3:
MOV AL,[BX]
CMP AL,FCHAR2
JE Eroor
INC BX
LOOP CHECKer3 
    CALL ERROR2                    
    CALL Excution_Unite1
    CALL UPDATE_INTERF1
   ;; CALL UPDATE_INTERF2 
    

    IN AX,60H 
    CMP AL,41H
    JE P2_TURN  
    JMP PROCESSING4

    PRESS_SPACE4:
    MOV AL,YELLOW 
    MOV COLOR,AL                                
    MOV CX,X_REC
    ADD CX,10
    MOV DX,Y_REC
    MOV Y_ROCKET,DX
    CALL DRAW_ROCKET 

    PUSH BX
    MOV BX,X_CENTER_FLYING
    ADD BX,RADIUS_FLYING
    CMP CX,BX
    POP BX
    JA PROCESSING4

    PUSH BX
    MOV BX,X_CENTER_FLYING
    SUB BX,RADIUS_FLYING
    CMP CX,BX
    POP BX
    JL PROCESSING4
    
    PRESS_UP4:
    CMP Y_REC,140
    JBE NULL_1
	SUB Y_REC,12
	MOV REC_SIZE, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN
    MOV COLOR,RED
	CALL DRAW_REC2
    NULL_1:
	JMP PROCESSING4
    
    PRESS_DOWN4:
    CMP Y_REC,208
    JAE NULL_2
	ADD Y_REC,12
	MOV REC_SIZE, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN
	MOV COLOR,RED
    CALL DRAW_REC2
	NULL_2:
    JMP PROCESSING4
    
	PRESS_LEFT4:
    CMP X_REC,0
    JBE NULL_3
    SUB X_REC,30
	MOV REC_SIZE, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN
	MOV COLOR,RED
    CALL DRAW_REC2
    NULL_3:
    JMP PROCESSING4

	PRESS_RIGHT4:
    CMP X_REC,225
    JAE NULL_4
	ADD X_REC, 30
	MOV REC_SIZE, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN
	MOV COLOR,RED
    CALL DRAW_REC2
	NULL_4:
    JMP PROCESSING4
    RESULTS4:
    CALL CLR_SCR
    MOV CX,90
    MOV TEXT_ROW,0
    SPLIT_SCREEN_INTERFACE14:
    CursorPosition 28H,TEXT_ROW 
    displaystring msg15
    INC TEXT_ROW       
    CMP TEXT_ROW,25
    JNE SPLIT_SCREEN_INTERFACE14
    CursorPosition 0,0
    displaystring Name1
    displaystring msg15
    displaystring intialPTS
    CursorPosition 41,0
    displaystring Name2
    displaystring msg15
    displaystring intialPTS2
    SHOW_RESULT4:
    HLT
    LOOP SHOW_RESULT4
    RET
    ROCKET_GAME ENDP

ROCKET_GAME2 PROC
    P2_TURN:
    BUBBLES2:
    
    MOV HALT,20
    SKIP_BLUE2:
    MOV RADIUS_FLYING2,10
    MOV COLOR,BLACK
    CALL DRAW_CIRCLE_FLYING2
    MOV X_CENTER_FLYING2,332
    MOV Y_CENTER_FLYING2,25
    MOV BLUE_X_CENTER_FLYING2,332
    MOV BLUE_Y_CENTER_FLYING2,25
    JMP PROCESSING0
    MOV SI,0
    PROCESSING0:
	IN AX, 60H  
    CMP AL, 48H     
	JE PRESS_UP0
    CMP AL, 50H     
	JE PRESS_DOWN0
    CMP AL, 4BH     
	JE PRESS_LEFT0
    CMP AL, 4DH     
	JE PRESS_RIGHT0	
    CMP AL,39H
    JE PRESS_SPACE0
    CMP AL,2EH  ;SCAN CODE C
    JE COMMAND_LINES0
    CMP AL,3EH
    JE RESULTS0

    HLT
    dec HALT
    CMP HALT,0
    JNE PROCESSING0
    CMP X_CENTER_FLYING2,560
    JG WAITING_GRAY0
    CALL QUEUE_BLUE2
    
    
    MOV HALT,20
    JMP PROCESSING0
    COMMAND_LINES0:
    CursorPosition 41,20
    CALL INPUT
    
    lea bx, TEXT
mov ch, 0
mov cl, [bx+1] ; get string size.
Checker4:
MOV AL,[BX]
CMP AL,FCHAR2
JE Eroor
INC BX
LOOP CHECKer4
CALL ERROR2                    
    CALL Excution_Unite1
    CALL UPDATE_INTERF1
   ;; CALL UPDATE_INTERF2
    
 
    IN AX,60H 
    CMP AL,41H
    JE P1_TURN
    JMP PROCESSING0
    

    PRESS_SPACE0:
    MOV AL,YELLOW 
    MOV COLOR,AL                                
    MOV CX,X_REC2
    ADD CX,10
    MOV DX,Y_REC2
    MOV Y_ROCKET,DX
    CALL DRAW_ROCKET 

    PUSH BX
    MOV BX,BLUE_X_CENTER_FLYING2
    ADD BX,BLUE_RADIUS_FLYING2
    CMP CX,BX
    POP BX
    JA PROCESSING0

    PUSH BX
    MOV BX,BLUE_X_CENTER_FLYING2
    SUB BX,BLUE_RADIUS_FLYING2
    CMP CX,BX
    POP BX
    JL PROCESSING0
   
    HITTING0:
    inc HITTER_BLUE2
    ADD HITTER_BLUE2,48
    CursorPosition 29,17
    DRAW_CHAR HITTER_BLUE2,Green
    sub HITTER_BLUE2,48
    
    CMP [intialPTS2+1],57
    JE TENS0
    SUB [intialPTS2+1],48
    ADD [intialPTS2+1],1
    ADD [intialPTS2+1],48
    CALL MAINDESIGN2
    JMP WAITING_GRAY0
    TENS0:
    ;RESET UNITS to zero
    MOV [intialPTS2+1],48
    ;ADD ON TO TENS
    SUB [intialPTS2],48
    ADD [intialPTS2],1
    ADD [intialPTS2],48
    CALL MAINDESIGN2
    JMP WAITING_GRAY0
	
    PRESS_UP0:
    CMP Y_REC2,165 
    JBE EXIT10
	SUB Y_REC2,12
	MOV REC_SIZE2,20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN2
    MOV COLOR,RED
	CALL DRAW_REC3
    EXIT10:
	JMP PROCESSING0
    
    PRESS_DOWN0:
    CMP Y_REC2,208
    JAE EXIT20
	ADD Y_REC2,12
	MOV REC_SIZE2, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN2
	MOV COLOR,RED
    CALL DRAW_REC3
	EXIT20:
    JMP PROCESSING0
    
	PRESS_LEFT0:
    CMP X_REC2,335
    JBE EXIT30
    SUB X_REC2,30
	MOV REC_SIZE2, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN2
	MOV COLOR,RED
    CALL DRAW_REC3
    EXIT30:
    JMP PROCESSING0

	PRESS_RIGHT0:
    CMP X_REC2,545
    JAE EXIT40
	ADD X_REC2, 30
	MOV REC_SIZE2, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN2
	MOV COLOR,RED
    CALL DRAW_REC3
	EXIT40:
    JMP PROCESSING0

    RESULTS0:
    CALL CLR_SCR
    MOV CX,90
    MOV TEXT_ROW,0
    SPLIT_SCREEN_INTERFACE15:
    CursorPosition 28H,TEXT_ROW 
    displaystring msg15
    INC TEXT_ROW       
    CMP TEXT_ROW,25
    JNE SPLIT_SCREEN_INTERFACE15
    CursorPosition 0,0
    displaystring Name1
    displaystring msg15
    displaystring intialPTS
    CursorPosition 41,0
    displaystring Name2
    displaystring msg15
    displaystring intialPTS2
    SHOW_RESULT0:
    HLT
    LOOP SHOW_RESULT0
    RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    WAITING_GRAY0:
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT

    SKIP_GRAY0:
    MOV HALT,20
    MOV RADIUS_FLYING2,10
    MOV COLOR,BLACK
    CALL DRAW_CIRCLE_FLYING2
    MOV X_CENTER_FLYING2,332
    MOV Y_CENTER_FLYING2,25
    MOV GRAY_X_CENTER_FLYING2,332
    MOV GRAY_Y_CENTER_FLYING2,25
    JMP PROCESSING10
    TEST110:
    JMP WAITING_YELLOW0
    PROCESSING10:
	IN AX, 60H    
    CMP AL, 48H     
	JE PRESS_UP10
    CMP AL, 50H     
	JE PRESS_DOWN10
    CMP AL, 4BH     
	JE PRESS_LEFT10
    CMP AL, 4DH     
	JE PRESS_RIGHT10	
    CMP AL,39H
    JE PRESS_SPACE10
    CMP AL,2EH  ;SCAN CODE C
    JE COMMAND_LINES10
    CMP AL,3EH
    JE RESULTS10
    HLT
    dec HALT
    CMP HALT,0
    JNE PROCESSING10
    CMP X_CENTER_FLYING2,560
    JG WAITING_YELLOW0
    CALL QUEUE_GRAY2

    MOV HALT,20
    JMP PROCESSING10
    
    COMMAND_LINES10:
    CursorPosition 41,20
      CALL INPUT
    lea bx, TEXT
mov ch, 0
mov cl, [bx+1] ; get string size.
Checker5:
MOV AL,[BX]
CMP AL,FCHAR2
JE Eroor
INC BX
LOOP CHECKer5 
    CALL ERROR2                   
    CALL Excution_Unite1
    CALL UPDATE_INTERF1
    ;;CALL UPDATE_INTERF2 
    

    IN AX,60H 
    CMP AL,41H
    JE P1_TURN
    JMP PROCESSING10

    PRESS_SPACE10:
    MOV AL,YELLOW 
    MOV COLOR,AL                                
    MOV CX,X_REC2
    ADD CX,10
    MOV DX,Y_REC2
    MOV Y_ROCKET,DX
    CALL DRAW_ROCKET 

    PUSH BX
    MOV BX,GRAY_X_CENTER_FLYING2
    ADD BX,GRAY_RADIUS_FLYING2
    CMP CX,BX
    POP BX
    JA PROCESSING10

    PUSH BX
    MOV BX,GRAY_X_CENTER_FLYING2
    SUB BX,GRAY_RADIUS_FLYING2
    CMP CX,BX
    POP BX
    JL PROCESSING10
    
    HITTING10:
    inc HITTER_GRAY2
    ADD HITTER_GRAY2,48
    CursorPosition 21,17
    DRAW_CHAR HITTER_GRAY2,Green
    sub HITTER_GRAY2,48


    CMP [intialPTS2+1],57
    JE TENS10
    SUB [intialPTS2+1],48
    ADD [intialPTS2+1],1
    ADD [intialPTS2+1],48
    CALL MAINDESIGN2
    JMP WAITING_YELLOW0
    TENS10:
    ;RESET UNITS to zero
    MOV [intialPTS2+1],48
    ;ADD ON TO TENS
    SUB [intialPTS2],48
    ADD [intialPTS2],1
    ADD [intialPTS2],48
    CALL MAINDESIGN2
    JMP WAITING_YELLOW0
	
    PRESS_UP10:
    CMP Y_REC2,165
    JBE EXIT110
	SUB Y_REC2,12
	MOV REC_SIZE2, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN2
    MOV COLOR,RED
	CALL DRAW_REC3
    EXIT110:
	JMP PROCESSING10
    
    PRESS_DOWN10:
    CMP Y_REC2,208
    JAE EXIT220
	ADD Y_REC2,12
	MOV REC_SIZE2, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN2
	MOV COLOR,RED
    CALL DRAW_REC3
	EXIT220:
    JMP PROCESSING10
    
	PRESS_LEFT10:
    CMP X_REC2,335
    JBE EXIT330
    SUB X_REC2,30
	MOV REC_SIZE2, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN2
	MOV COLOR,RED
    CALL DRAW_REC3
    EXIT330:
    JMP PROCESSING10

	PRESS_RIGHT10:
    CMP X_REC2,545
    JAE EXIT440
	ADD X_REC2, 30
	MOV REC_SIZE2, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN2
	MOV COLOR,RED
    CALL DRAW_REC3
	EXIT440:
    JMP PROCESSING10

    RESULTS10:
    CALL CLR_SCR
    MOV CX,90
    
    MOV TEXT_ROW,0
    SPLIT_SCREEN_INTERFACE16:
    CursorPosition 28H,TEXT_ROW 
    displaystring msg15
    INC TEXT_ROW       
    CMP TEXT_ROW,25
    JNE SPLIT_SCREEN_INTERFACE16
    CursorPosition 0,0
    displaystring Name1
    displaystring msg15
    displaystring intialPTS
    CursorPosition 41,0
    displaystring Name2
    displaystring msg15
    displaystring intialPTS2
    SHOW_RESULT10:
    HLT
    LOOP SHOW_RESULT10
    RET
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    WAITING_YELLOW0:
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT

    SKIP_YELLOW0:
    MOV HALT,20
    MOV RADIUS_FLYING2,10
    MOV COLOR,BLACK
    CALL DRAW_CIRCLE_FLYING2
    MOV X_CENTER_FLYING2,332
    MOV Y_CENTER_FLYING2,25
    MOV YELLOW_X_CENTER_FLYING2,332
    MOV YELLOW_Y_CENTER_FLYING2,25
    JMP PROCESSING20
    TEST20:
    JMP WAITING_PINK0
    PROCESSING20:
	IN AX, 60H    

    CMP AL, 48H     
	JE PRESS_UP20
    CMP AL, 50H     
	JE PRESS_DOWN20
    CMP AL, 4BH     
	JE PRESS_LEFT20
    CMP AL, 4DH     
	JE PRESS_RIGHT20	
    CMP AL,39H
    JE PRESS_SPACE20
    CMP AL,2EH  ;SCAN CODE C
    JE COMMAND_LINES20
    CMP AL,3EH
    JE RESULTS20
    HLT
    dec HALT
    CMP HALT,0
    JNE PROCESSING20
    CMP X_CENTER_FLYING2,560
    JG WAITING_PINK0
    CALL QUEUE_YELLOW2

    MOV HALT,20
    JMP PROCESSING20

    COMMAND_LINES20:
    CursorPosition 41,20
    CALL INPUT
   lea bx, TEXT
mov ch, 0
mov cl, [bx+1] ; get string size.
Checker6:
MOV AL,[BX]
CMP AL,FCHAR2
JE Eroor
INC BX
LOOP CHECKer6 
    CALL ERROR2                    
    CALL Excution_Unite1
    CALL UPDATE_INTERF1
    ;;CALL UPDATE_INTERF2 
    

    IN AX,60H 
    CMP AL,41H
    JE P1_TURN
    JMP PROCESSING20

    PRESS_SPACE20:
    MOV AL,YELLOW 
    MOV COLOR,AL                                
    MOV CX,X_REC2
    ADD CX,10
    MOV DX,Y_REC2
    MOV Y_ROCKET,DX
    CALL DRAW_ROCKET 

    PUSH BX
    MOV BX,YELLOW_X_CENTER_FLYING2
    ADD BX,YELLOW_RADIUS_FLYING2
    CMP CX,BX
    POP BX
    JA PROCESSING20

    PUSH BX
    MOV BX,YELLOW_X_CENTER_FLYING2
    SUB BX,YELLOW_RADIUS_FLYING2
    CMP CX,BX
    POP BX
    JL PROCESSING20
    
    HITTING20:
    inc HITTER_YELLOW2
    ADD HITTER_YELLOW2,48
    CursorPosition 12,17
    DRAW_CHAR HITTER_YELLOW2,Green
    sub HITTER_YELLOW2,48

    CMP [intialPTS2+1],57
    JE TENS20
    SUB [intialPTS2+1],48
    ADD [intialPTS2+1],1
    ADD [intialPTS2+1],48
    CALL MAINDESIGN2
    JMP WAITING_PINK0
    TENS20:
    ;RESET UNITS to zero
    MOV [intialPTS2+1],48
    ;ADD ON TO TENS
    SUB [intialPTS2],48
    ADD [intialPTS2],1
    ADD [intialPTS2],48
    CALL MAINDESIGN2
    JMP WAITING_PINK0
	
    PRESS_UP20:
    CMP Y_REC2,165
    JBE EXIT1110
	SUB Y_REC2,12
	MOV REC_SIZE2, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN2
    MOV COLOR,RED
	CALL DRAW_REC3
    EXIT1110:
	JMP PROCESSING20
    
    PRESS_DOWN20:
    CMP Y_REC2,208
    JAE EXIT2220
	ADD Y_REC2,12
	MOV REC_SIZE2, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN2
	MOV COLOR,RED
    CALL DRAW_REC3
	EXIT2220:
    JMP PROCESSING20
    
	PRESS_LEFT20:
    CMP X_REC2,335
    JBE EXIT3330
    SUB X_REC2,30
	MOV REC_SIZE2, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN2
	MOV COLOR,RED
    CALL DRAW_REC3
    EXIT3330:
    JMP PROCESSING20

	PRESS_RIGHT20:
    CMP X_REC2,545
    JAE EXIT4440
	ADD X_REC2, 30
	MOV REC_SIZE2, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN2
	MOV COLOR,RED
    CALL DRAW_REC3
	EXIT4440:
    JMP PROCESSING20

    RESULTS20:
    CALL CLR_SCR
    MOV CX,90
    MOV TEXT_ROW,0
    SPLIT_SCREEN_INTERFACE17:
    CursorPosition 28H,TEXT_ROW 
    displaystring msg15
    INC TEXT_ROW       
    CMP TEXT_ROW,25
    JNE SPLIT_SCREEN_INTERFACE17
    CursorPosition 0,0
    displaystring Name1
    displaystring msg15
    displaystring intialPTS
    CursorPosition 41,0
    displaystring Name2
    displaystring msg15
    displaystring intialPTS2
    SHOW_RESULT20:
    HLT
    LOOP SHOW_RESULT20
    RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    WAITING_PINK0:
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT
    HLT

    SKIP_PINK0:
    MOV HALT,20
    MOV RADIUS_FLYING2,10
    MOV COLOR,BLACK
    CALL DRAW_CIRCLE_FLYING2
    MOV X_CENTER_FLYING2,332
    MOV Y_CENTER_FLYING2,25
    MOV PINK_X_CENTER_FLYING2,332
    MOV PINK_Y_CENTER_FLYING2,25
    JMP PROCESSING30
    TEST30:
    JMP TERMINATION0
    PROCESSING30:
	IN AX, 60H    
    CMP AL, 48H     
	JE PRESS_UP30
    CMP AL, 50H     
	JE PRESS_DOWN30
    CMP AL, 4BH     
	JE PRESS_LEFT30
    CMP AL, 4DH     
	JE PRESS_RIGHT30	
    CMP AL,39H
    JE PRESS_SPACE30
    CMP AL,2EH  ;SCAN CODE C
    JE COMMAND_LINES30
    CMP AL,3EH
    JE RESULTS30
    HLT
    dec HALT
    CMP HALT,0
    JNE PROCESSING30
    CMP X_CENTER_FLYING2,560
    JG TERMINATION0
    CALL QUEUE_PINK2

    MOV HALT,20
    JMP PROCESSING30 
    COMMAND_LINES30:
    CursorPosition 41,20
    CALL INPUT
    lea bx, TEXT
mov ch, 0
mov cl, [bx+1] ; get string size.
Checker7:
MOV AL,[BX]
CMP AL,FCHAR2
JE Eroor
INC BX
LOOP CHECKer7 
    CALL ERROR2                   
    CALL Excution_Unite1
    CALL UPDATE_INTERF1
  ;;  CALL UPDATE_INTERF2 



    IN AX,60H 
    CMP AL,41H
    JMP P1_TURN
    JMP PROCESSING0

    PRESS_SPACE30:
    MOV AL,YELLOW 
    MOV COLOR,AL                                
    MOV CX,X_REC2
    ADD CX,10
    MOV DX,Y_REC2
    MOV Y_ROCKET,DX
    CALL DRAW_ROCKET 

    PUSH BX
    MOV BX,PINK_X_CENTER_FLYING2
    ADD BX,PINK_RADIUS_FLYING2
    CMP CX,BX
    POP BX
    JA PROCESSING30

    PUSH BX
    MOV BX,PINK_X_CENTER_FLYING2
    SUB BX,PINK_RADIUS_FLYING2
    CMP CX,BX
    POP BX
    JL PROCESSING30
    
    HITTING30:
    inc HITTER_PINK2
    ADD HITTER_PINK2,48
    CursorPosition 4,17
    DRAW_CHAR HITTER_PINK2,Green
    sub HITTER_PINK2,48

    CMP [intialPTS2+1],57
    JE TENS30
    SUB [intialPTS2+1],48
    ADD [intialPTS2+1],1
    ADD [intialPTS2+1],48
    CALL MAINDESIGN2
    DEC AVAILIBLE_BUBBLES2
    CMP AVAILIBLE_BUBBLES2,0
    JA SKIP_BLUE2
    CMP AVAILIBLE_BUBBLES2,0
    JBE TERMINATION0
    TENS30:
    ;RESET UNITS to zero
    MOV [intialPTS2+1],48
    ;ADD ON TO TENS
    SUB [intialPTS2],48
    ADD [intialPTS2],1
    ADD [intialPTS2],48
    CALL MAINDESIGN2
    DEC AVAILIBLE_BUBBLES
    CMP AVAILIBLE_BUBBLES,0
    JA SKIP_BLUE2
    CMP AVAILIBLE_BUBBLES,0
    JBE TERMINATION0
	
    PRESS_UP30:
    CMP Y_REC2,165
    JBE EXIT11110
	SUB Y_REC2,12
	MOV REC_SIZE2, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN2
    MOV COLOR,RED
	CALL DRAW_REC3
    EXIT11110:
	JMP PROCESSING30
    
    PRESS_DOWN30:
    CMP Y_REC2,208
    JAE EXIT22220
	ADD Y_REC2,12
	MOV REC_SIZE2, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN2
	MOV COLOR,RED
    CALL DRAW_REC3
	EXIT22220:
    JMP PROCESSING30
    
	PRESS_LEFT30:
    CMP X_REC2,335
    JBE EXIT33330
    SUB X_REC2,30
	MOV REC_SIZE2, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN2
	MOV COLOR,RED
    CALL DRAW_REC3
    EXIT33330:
    JMP PROCESSING30

	PRESS_RIGHT30:
    CMP X_REC2,545
    JAE EXIT44440
	ADD X_REC2, 30
	MOV REC_SIZE2, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN2
	MOV COLOR,RED
    CALL DRAW_REC3
	EXIT44440:
    JMP PROCESSING30
    
    RESULTS30:
    CALL CLR_SCR
    MOV CX,90
    MOV TEXT_ROW,0
    SPLIT_SCREEN_INTERFACE18:
    CursorPosition 28H,TEXT_ROW 
    displaystring msg15
    INC TEXT_ROW       
    CMP TEXT_ROW,25
    JNE SPLIT_SCREEN_INTERFACE18
    CursorPosition 0,0
    displaystring Name1
    displaystring msg15
    displaystring intialPTS
    CursorPosition 41,0
    displaystring Name2
    displaystring msg15
    displaystring intialPTS2
    SHOW_RESULT30:
    HLT
    LOOP SHOW_RESULT30
    RET
    
    DEC AVAILIBLE_BUBBLES2
    CMP AVAILIBLE_BUBBLES2,0
    JNE BUBBLES2
    TERMINATION0:
;TERMINATE NO MORE COLOURED BUBBLES AVAILIBLE 
    MOV RADIUS_FLYING2,10
    MOV COLOR,BLACK
    CALL DRAW_CIRCLE_FLYING2
    MOV X_CENTER_FLYING2,332
    MOV Y_CENTER_FLYING2,25

    PROCESSING40:
	IN AX, 60H    

    CMP AL, 48H     
	JE PRESS_UP40
    CMP AL, 50H     
	JE PRESS_DOWN40
    CMP AL, 4BH     
	JE PRESS_LEFT40
    CMP AL, 4DH     
	JE PRESS_RIGHT40	
    CMP AL,39H
    JE PRESS_SPACE40
    CMP AL,2EH  ;SCAN CODE C
    JE COMMAND_LINES40
    CMP AL,3EH
    JE RESULTS40

    HLT
    dec HALT
    CMP HALT,0
    JNE PROCESSING40
    CMP X_CENTER_FLYING,560
    JG PROCESSING40
    CALL QUEUE_BLACK2

    MOV HALT,20
    JMP PROCESSING40  
    COMMAND_LINES40:
    CursorPosition 41,20
    CALL INPUT       
lea bx, TEXT
mov ch, 0
mov cl, [bx+1] ; get string size.
Checker8:
MOV AL,[BX]
CMP AL,FCHAR2
JE Eroor
INC BX
LOOP CHECKer8
    CALL ERROR2                   
    CALL Excution_Unite1
    CALL UPDATE_INTERF1
    ;;CALL UPDATE_INTERF2 


    IN AX,60H 
    CMP AL,41H
    JE P1_TURN
    JMP PROCESSING40

    PRESS_SPACE40:
    MOV AL,YELLOW 
    MOV COLOR,AL                                
    MOV CX,X_REC2
    ADD CX,10
    MOV DX,Y_REC2
    MOV Y_ROCKET,DX
    CALL DRAW_ROCKET 

    PUSH BX
    MOV BX,X_CENTER_FLYING2
    ADD BX,RADIUS_FLYING2
    CMP CX,BX
    POP BX
    JA PROCESSING40

    PUSH BX
    MOV BX,X_CENTER_FLYING2
    SUB BX,RADIUS_FLYING2
    CMP CX,BX
    POP BX
    JL PROCESSING40
    
    PRESS_UP40:
    CMP Y_REC2,165
    JBE NULL_10
	SUB Y_REC2,12
	MOV REC_SIZE2, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN2
    MOV COLOR,RED
	CALL DRAW_REC3
    NULL_10:
	JMP PROCESSING40
    
    PRESS_DOWN40:
    CMP Y_REC2,208
    JAE NULL_20
	ADD Y_REC2,12
	MOV REC_SIZE2, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN2
	MOV COLOR,RED
    CALL DRAW_REC3
	NULL_20:
    JMP PROCESSING40
    
	PRESS_LEFT40:
    CMP X_REC2,335
    JBE NULL_30
    SUB X_REC2,30
	MOV REC_SIZE2, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN2
	MOV COLOR,RED
    CALL DRAW_REC3
    NULL_30:
    JMP PROCESSING40

	PRESS_RIGHT40:
    CMP X_REC2,545
    JAE NULL_40
	ADD X_REC2, 30
	MOV REC_SIZE2, 20
	MOV AL, RED
	MOV COLOR, AL
	CALL CLR_SCR
    CALL MAINDESIGN2
	MOV COLOR,RED
    CALL DRAW_REC3
	NULL_40:
    JMP PROCESSING40
    RESULTS40:
    CALL CLR_SCR
    MOV CX,90
    MOV TEXT_ROW,0
    SPLIT_SCREEN_INTERFACE19:
    CursorPosition 28H,TEXT_ROW 
    displaystring msg15
    INC TEXT_ROW       
    CMP TEXT_ROW,25
    JNE SPLIT_SCREEN_INTERFACE19
    CursorPosition 0,0
    displaystring Name1
    displaystring msg15
    displaystring intialPTS
    CursorPosition 41,0
    displaystring Name2
    displaystring msg15
    displaystring intialPTS2
    SHOW_RESULT40:
    HLT
    LOOP SHOW_RESULT40
    RET
ROCKET_GAME2 ENDP





QUEUE_BLACK PROC
    MANUALPUSH

    MOV RADIUS_FLYING,10
    MOV COLOR,BLACK
    CALL DRAW_CIRCLE_FLYING 

    MANUALPOP
    RET
QUEUE_BLACK ENDP

QUEUE_BLUE PROC
    MANUALPUSH

    MOV RADIUS_FLYING,10
    MOV COLOR,BLACK
    CALL DRAW_CIRCLE_FLYING 
    ADD X_CENTER_FLYING,12
    MOV BX,X_CENTER_FLYING
    MOV BLUE_X_CENTER_FLYING,BX
    MOV RADIUS_FLYING,10
    MOV BX,RADIUS_FLYING
    MOV BLUE_RADIUS_FLYING,BX
    MOV COLOR,BLUE
    CALL DRAW_CIRCLE_FLYING

    MANUALPOP
    RET
QUEUE_BLUE ENDP



QUEUE_GRAY PROC
    MANUALPUSH

    MOV RADIUS_FLYING,10
    MOV COLOR,BLACK
    CALL DRAW_CIRCLE_FLYING 
    ADD X_CENTER_FLYING,12
    MOV BX,X_CENTER_FLYING
    MOV GRAY_X_CENTER_FLYING,BX
    MOV RADIUS_FLYING,10
    MOV BX,RADIUS_FLYING
    MOV GRAY_RADIUS_FLYING,BX
    MOV COLOR,L_GRAY
    CALL DRAW_CIRCLE_FLYING

    MANUALPOP
    RET
QUEUE_GRAY ENDP


QUEUE_YELLOW PROC
    MANUALPUSH

    MOV RADIUS_FLYING,10
    MOV COLOR,BLACK
    CALL DRAW_CIRCLE_FLYING 
    ADD X_CENTER_FLYING,12
    MOV BX,X_CENTER_FLYING
    MOV YELLOW_X_CENTER_FLYING,BX
    MOV RADIUS_FLYING,10
    MOV BX,RADIUS_FLYING
    MOV YELLOW_RADIUS_FLYING,BX
    MOV COLOR,YELLOW
    CALL DRAW_CIRCLE_FLYING

    MANUALPOP
    RET
QUEUE_YELLOW ENDP


QUEUE_PINK PROC
    MANUALPUSH

    MOV RADIUS_FLYING,10
    MOV COLOR,BLACK
    CALL DRAW_CIRCLE_FLYING 
    ADD X_CENTER_FLYING,12
    MOV BX,X_CENTER_FLYING
    MOV PINK_X_CENTER_FLYING,BX
    MOV RADIUS_FLYING,10
    MOV BX,RADIUS_FLYING
    MOV PINK_RADIUS_FLYING,BX
    MOV COLOR,L_MAGENTA
    CALL DRAW_CIRCLE_FLYING

    MANUALPOP
    RET
QUEUE_PINK ENDP


QUEUE_BLACK2 PROC
    MANUALPUSH

    MOV RADIUS_FLYING2,10
    MOV COLOR,BLACK
    CALL DRAW_CIRCLE_FLYING2

    MANUALPOP
    RET
QUEUE_BLACK2 ENDP

QUEUE_BLUE2 PROC
    MANUALPUSH

    MOV RADIUS_FLYING2,10
    MOV COLOR,BLACK
    CALL DRAW_CIRCLE_FLYING2
    ADD X_CENTER_FLYING2,12
    MOV BX,X_CENTER_FLYING2
    MOV BLUE_X_CENTER_FLYING2,BX
    MOV RADIUS_FLYING2,10
    MOV BX,RADIUS_FLYING2
    MOV BLUE_RADIUS_FLYING2,BX
    MOV COLOR,BLUE
    CALL DRAW_CIRCLE_FLYING2

    MANUALPOP
    RET
QUEUE_BLUE2 ENDP



QUEUE_GRAY2 PROC
    MANUALPUSH

    MOV RADIUS_FLYING2,10
    MOV COLOR,BLACK
    CALL DRAW_CIRCLE_FLYING2
    ADD X_CENTER_FLYING2,12
    MOV BX,X_CENTER_FLYING2
    MOV GRAY_X_CENTER_FLYING2,BX
    MOV RADIUS_FLYING2,10
    MOV BX,RADIUS_FLYING2
    MOV GRAY_RADIUS_FLYING2,BX
    MOV COLOR,L_GRAY
    CALL DRAW_CIRCLE_FLYING2

    MANUALPOP
    RET
QUEUE_GRAY2 ENDP


QUEUE_YELLOW2 PROC
    MANUALPUSH

    MOV RADIUS_FLYING2,10
    MOV COLOR,BLACK
    CALL DRAW_CIRCLE_FLYING2
    ADD X_CENTER_FLYING2,12
    MOV BX,X_CENTER_FLYING2
    MOV YELLOW_X_CENTER_FLYING2,BX
    MOV RADIUS_FLYING2,10
    MOV BX,RADIUS_FLYING2
    MOV YELLOW_RADIUS_FLYING2,BX
    MOV COLOR,YELLOW
    CALL DRAW_CIRCLE_FLYING2

    MANUALPOP
    RET
QUEUE_YELLOW2 ENDP


QUEUE_PINK2 PROC
    MANUALPUSH

    MOV RADIUS_FLYING2,10
    MOV COLOR,BLACK
    CALL DRAW_CIRCLE_FLYING2
    ADD X_CENTER_FLYING2,12
    MOV BX,X_CENTER_FLYING2
    MOV PINK_X_CENTER_FLYING2,BX
    MOV RADIUS_FLYING2,10
    MOV BX,RADIUS_FLYING2
    MOV PINK_RADIUS_FLYING2,BX
    MOV COLOR,L_MAGENTA
    CALL DRAW_CIRCLE_FLYING2

    MANUALPOP
    RET
QUEUE_PINK2 ENDP




UPDATE_INTERF2 PROC NEAR

SetCursorPos 5 10 0
MOV AX,P2VALUE_AX2
MOV SI,OFFSET BUFFER
CALL number2string
MOV AH,9
MOV DX,OFFSET BUFFER
INT 21H

SetCursorPos 10 10 0
MOV AX,VALUE_BX2
MOV SI,OFFSET BUFFER
CALL number2string
MOV AH,9
MOV DX,OFFSET BUFFER
INT 21H

SetCursorPos 15 10 0
MOV AX,VALUE_CX2
MOV SI,OFFSET BUFFER
CALL number2string
MOV AH,9
MOV DX,OFFSET BUFFER
INT 21H


SetCursorPos 20 10 0
MOV AX,VALUE_DX2
MOV SI,OFFSET BUFFER
CALL number2string
MOV AH,9
MOV DX,OFFSET BUFFER
INT 21H
SetCursorPos 10 0 0
RET
UPDATE_INTERF2 ENDP

UPDATE_INTERF1 Proc NEAR
   CursorPosition 9,4
    MOV AX,VALUE_AX1
    MOV SI,OFFSET BUFFER
    CALL number2string
    MOV AH,9
    MOV DX,OFFSET BUFFER
    INT 21H

   CursorPosition 9,6
    MOV AX,VALUE_BX1
    MOV SI,OFFSET BUFFER
    CALL number2string
    MOV AH,9
    MOV DX,OFFSET BUFFER
    INT 21H

    CursorPosition 9,8
    MOV AX,VALUE_CX1
    MOV SI,OFFSET BUFFER
    CALL number2string
    MOV AH,9
    MOV DX,OFFSET BUFFER
    INT 21H


    CursorPosition 9,10
    MOV AX,VALUE_DX1
    MOV SI,OFFSET BUFFER
    CALL number2string
    MOV AH,9
    MOV DX,OFFSET BUFFER
    INT 21H

    CursorPosition 21,4
 MOV AX,VALUE_SI1
    MOV SI,OFFSET BUFFER
    CALL number2string
    MOV AH,9
    MOV DX,OFFSET BUFFER
    INT 21H

 CursorPosition 21,6
     MOV AX,VALUE_DI1
    MOV SI,OFFSET BUFFER
    CALL number2string
    MOV AH,9
    MOV DX,OFFSET BUFFER
    INT 21H

 CursorPosition 21,8
     MOV AX,VALUE_BP1
    MOV SI,OFFSET BUFFER
    CALL number2string
    MOV AH,9
    MOV DX,OFFSET BUFFER
    INT 21H

 CursorPosition 21,10
     MOV AX,VALUE_SP1
    MOV SI,OFFSET BUFFER
    CALL number2string
    MOV AH,9
    MOV DX,OFFSET BUFFER
    INT 21H
    RET 
    UPDATE_INTERF1 ENDP       
input_ui proc near      
        	
                    mov ah, 0Ah ;GET TEXT FROM KEYBOARD.
                    mov dx, offset TEXT
                    int 21h

                                                                ;CHANGE(13) BY '$'.
                    mov si, offset TEXT + 1 
                    mov cl, [si] 
                    mov ch, 0    
                    inc cx 
                    add si, cx   ;Size ? 
                    mov al, '$'
                    mov [ si ], al

        mov si,offset TEXT  ;position si to start of the string
        mov dh,00             ;counter to store number of spaces  
cmpagain1:  mov al,[si]      ;copy content at memory location "si" in "al"
		   cmp al,' '        ;compare "al" with space
           jne below         ;if not equal jump to label "below"
		   inc dh
        
below:  inc si               ;move to next character
        dec cl               ;decrement string length counter
        jnz cmpagain1        ;if not zero check again
        
		mov scount,dh       ;save the count in memory location "scount"

        	RET
INPUT_UI ENDP
        	
INPUT PROC NEAR  
call input_ui             	
lea bx, TEXT

mov ch, 0
mov cl, [bx+1] ; get string size.


        		
        call ConvToUpp


        call Separate_Input
        
        call Type_OF_INST
        CMP INST_INDEX,0
        JE Eroor
        
        call Type_OF_DEST
        CMP Dest_Index,0
        JE Eroor
        
        call Type_OF_Source
        
        call Type_OF_INST
        RET
    INPUT ENDP
ERROR2 PROC NEAR
        	    
        CMP scount,1
        JNE Eroor
        	CMP INST_INDEX,4
	JA E2
	
	
	E1:
	
	    
	     
	    CMP Dest_Index,5
	    JE E11
	    
	    CMP Dest_Index,6
	    JE E11
	                    
	    CMP Dest_Index,7
	    JE E11
	    
	    CMP Dest_Index,8
	    JE E11
	    
	    CMP Dest_Index,9
	    JE E11    
	          
	    CMP Dest_Index,10
	    JE E11     
	          
	    CMP Dest_Index,11
	    JE E11     
	          
	    CMP Dest_Index,12
	    JE E11
	    
	    
	    CMP Source_Index,5
	    JE Eroor
	    
	    CMP Source_Index,6
	    JE Eroor
	     
	    CMP Source_Index,7
	    JE Eroor
	    
	    CMP Source_Index,8
	    JE Eroor
	     
	    CMP Source_Index,9
	    JE Eroor
	    
	    CMP Source_Index,10
	    JE Eroor
	    
	    CMP Source_Index,11
	    JE Eroor
	    
	    CMP Source_Index,12
	    JE Eroor 
	    
	    
	    JMP val1
	    
	     
	    E11:
	        
	        
	    CMP Source_Index,4
	    JBE Eroor
	    
	    CMP Source_Index,13
	    JAE CHE
	    
	    JMP VAL1
	    
	    CHE:
	    CMP SOURCE_INDEX,16
	    JBE EROOR
	    
	    CMP SOURCE_INDEX,21
	    JA  EROOR 
	    CMP SOURCE_INDEX,21
	    JE CHE4
	    JMP VAL1
	    
	    CHE4:
	    MOV BX, VALUE1 
        CMP BX,00FFh ; If it is greater then sets the destentaion to zeros 
        JAE EROOR
	    
	       
	    
	    
	    
	    JMP val1
	    
	 
	E2:     
	          
	   
	   
	          
	   CMP INST_INDEX,9
       JAE E3
       
       CMP DEST_INDEX,1
       JB EROOR
       
       CMP DEST_INDEX,16
       JA EROOR
        
                  
	    CMP SOURCE_Index,7
	    JE VAL1
	   
	    CMP SOURCE_Index,21
	    JB  EROOR
	    CMP SOURCE_Index,21
	    JA  EROOR
	    MOV BX, VALUE1 
        CMP BX,16 ; If it is greater then sets the destentaion to zeros 
        JAE EROOR
        
	  
	    JMP VAL1     
	         
	          
	E3:          
	CMP INST_INDEX,12
	JA E4
	
	
	
	
	    
	     
	    CMP Dest_Index,5
	    JE E31
	    
	    CMP Dest_Index,6
	    JE E31
	                    
	    CMP Dest_Index,7
	    JE E31
	    
	    CMP Dest_Index,8
	    JE E31
	    
	    CMP Dest_Index,9
	    JE E31    
	          
	    CMP Dest_Index,10
	    JE E31     
	          
	    CMP Dest_Index,11
	    JE E31     
	          
	    CMP Dest_Index,12
	    JE E31
	    
	    
	    CMP SOURCE_INDEX,1
	    JB EROOR
	    
	    CMP SOURCE_INDEX,21
	    JA EROOR
	    
	    CMP Source_Index,5
	    JE Eroor
	    
	    CMP Source_Index,6
	    JE Eroor
	     
	    CMP Source_Index,7
	    JE Eroor
	    
	    CMP Source_Index,8
	    JE Eroor
	     
	    CMP Source_Index,9
	    JE Eroor
	    
	    CMP Source_Index,10
	    JE Eroor
	    
	    CMP Source_Index,11
	    JE Eroor
	    
	    CMP Source_Index,12
	    JE Eroor
	    
	    
	    
	    JMP VAL1
	    
	    
	    
	     
	    E31:
	        
	        
	    CMP Source_Index,4
	    JBE Eroor
	    
	    CMP Source_Index,13
	    JAE CHE2
	    
	    JMP VAL1
	    
	    CHE2:
	    CMP SOURCE_INDEX,16
	    JBE EROOR
	    
	    CMP SOURCE_INDEX,21
	    JA EROOR 
	    CMP SOURCE_INDEX,21
	    JE CHE5
	    JMP VAL1
	    
	    CHE5:
	    MOV BX, VALUE1 
        CMP BX,00FFh ; If it is greater then sets the destentaion to zeros 
        JAE EROOR     
	    
	    
	    
	    JMP val1
	    
	  
	  E4:       
	      VAL1:  
            
        	    
        	RET
        	ERROR2 ENDP  
 
ConvToUpp PROC NEAR
        	upper_case:
        cmp byte ptr [bx], 'a'
        jb ok
        cmp byte ptr [bx], 'z'
        ja ok
        and byte ptr [bx], 11011111b
        ok:
        inc bx
        loop upper_case
        RET
        ConvToUpp endp       
Separate_Input PROC near

        
        
        LEA BX,TEXT+2
        LEA SI,INST 
        MOV CX,0
        INST1:    ;this to copy the input untill space _ instruction
        CMP byte ptr[BX],24h
        JE EXIT
        CMP byte ptr[BX],20h
        JE O1
        MOV AL,[BX]
        mov [SI],AL 
        INC SI
        INC BX
        INC CX
        JMP INST1
        
        O1:
        MOV Size_INST,Cl
        INC BX
        MOV CX,0
        LEA SI,OP1
        OP11:      ; THIS TO COPY THE OPERAND 1
        CMP byte ptr[BX],24H
        JE OVER
        CMP byte ptr[BX],2ch
        JE O2
        MOV AL,[BX]
        MOV [SI],AL
        INC SI
        INC BX
        INC CX
        JMP OP11
        
        O2:
        MOV Size_OP1,Cl   
        INC BX 
        MOV CX,0
        LEA DI,OP2
        OP22:     ; this to copy the seconed Operand
        CMP byte ptr[BX],24H
        JE EXIT
        MOV AL,[BX]
        MOV [DI],AL
        INC DI
        INC BX
        INC Cx
        MOV Size_OP2,Cl
        JMP OP22
        JMP EXIT
        OVER:
        MOV Size_OP1,Cl
        EXIT: 
        RET 
        Separate_Input ENDP
         
        
        
        
        
        ;; here we are going to determine the type of addressing 
        
        
        
        
Type_OF_DEST PROC   ;this code to give an index for my destinations 
        
        Dest:  ;here to determine the name of destination register (AX,BX,CX,DX,DI,SI,BP,SP) 
        
        AXX:   ; this is the destination
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP1
        LEA SI,Reg1
        MOV CL,Size_OP1
        REPE CMPSB
        JNE BXX
        MOV CL,1
        MOV Dest_Index,CL       ; now let's check the source
        JMP Ex
        	   
        BXX:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP1
        LEA SI,Reg2
        MOV CL,Size_OP1
        REPE CMPSB
        JNE CXX
        MOV CL,2
        MOV Dest_Index,CL       ; now let's check the source
        JMP Ex
        
        CXX:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP1
        LEA SI,Reg3
        MOV CL,Size_OP1
        REPE CMPSB
        JNE DXX
        MOV CL,3
        MOV Dest_Index,CL       ; now let's check the source
        JMP Ex
        
        DXX:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP1
        LEA SI,Reg4
        MOV CL,Size_OP1
        REPE CMPSB
        JNE ALL
        MOV CL,4
        MOV Dest_Index,CL       ; now let's check the source
        JMP Ex
        
        ALL:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP1
        LEA SI,Reg5
        MOV CL,Size_OP1
        REPE CMPSB
        JNE BLL
        MOV CL,5
        MOV Dest_Index,CL       ; now let's check the source
        JMP Ex
        
        BLL:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP1
        LEA SI,Reg6
        MOV CL,Size_OP1
        REPE CMPSB
        JNE CLL
        MOV CL,6
        MOV Dest_Index,CL       ; now let's check the source
        JMP Ex
        
        CLL:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP1
        LEA SI,Reg7
        MOV CL,Size_OP1
        REPE CMPSB
        JNE DLL
        MOV CL,7
        MOV Dest_Index,CL       ; now let's check the source
        JMP Ex
        
        DLL:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP1
        LEA SI,Reg8
        MOV CL,Size_OP1
        REPE CMPSB
        JNE AHH
        MOV CL,8
        MOV Dest_Index,CL       ; now let's check the source
        JMP Ex
        
        AHH:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP1
        LEA SI,Reg9
        MOV CL,Size_OP1
        REPE CMPSB
        JNE BHH
        MOV CL,9
        MOV Dest_Index,CL       ; now let's check the source
        JMP Ex
        
        BHH:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP1
        LEA SI,Reg10
        MOV CL,Size_OP1
        REPE CMPSB
        JNE CHH
        MOV CL,10
        MOV Dest_Index,CL       ; now let's check the source
        JMP Ex
        
        CHH:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP1
        LEA SI,Reg11
        MOV CL,Size_OP1
        REPE CMPSB
        JNE DHH
        MOV CL,11
        MOV Dest_Index,CL       ; now let's check the source
        JMP Ex
        
        DHH:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP1
        LEA SI,Reg12
        MOV CL,Size_OP1
        REPE CMPSB
        JNE SII
        MOV CL,12
        MOV Dest_Index,CL       ; now let's check the source
        JMP Ex
        
        SII:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP1
        LEA SI,Reg_1
        MOV CL,Size_OP1
        REPE CMPSB
        JNE DII
        MOV CL,13
        MOV Dest_Index,CL       ; now let's check the source
        JMP Ex
        
        DII:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP1
        LEA SI,Reg_2
        MOV CL,Size_OP1
        REPE CMPSB
        JNE BPP
        MOV CL,14
        MOV Dest_Index,CL       ; now let's check the source
        JMP Ex
        
        BPP:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP1
        LEA SI,Reg_3
        MOV CL,Size_OP1
        REPE CMPSB
        JNE SPP
        MOV CL,15
        MOV Dest_Index,CL       ; now let's check the source
        JMP Ex
        
        SPP:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP1
        LEA SI,Reg_4
        MOV CL,Size_OP1
        REPE CMPSB
        JNE SBXX3
        MOV CL,16
        MOV Dest_Index,CL       ; now let's check the source
        JMP Ex
		
		
		SBXX3:  
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP1
        LEA SI,Reg_5
        MOV CL,Size_OP1
        REPE CMPSB
        JNE SSII3
		MOV BX,VALUE_BX1
		CMP BX,16
		JAE Ex
		MOV MValue,BL    
        MOV CL,17
        MOV Dest_Index,CL
        JMP Ex
        
        SSII3:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP1
        LEA SI,Reg_6
        MOV CL,Size_OP1
        REPE CMPSB
        JNE SDII3
		MOV BX,VALUE_SI1
		CMP BX,16
		MOV MValue,BL
		JAE Ex
        MOV CL,18
        MOV Dest_Index,CL
        JMP Ex
        
        SDII3:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP1
        LEA SI,Reg_7
        MOV CL,Size_OP1
        REPE CMPSB
        JNE INDIRECT_ADDRESSING2     ; Then move to Register to VALUE1
		MOV BX,VALUE_DI1
		CMP BX,16
		JAE Ex
		MOV MValue,BL
        MOV CL,19
        MOV Dest_Index,CL   
        JMP Ex
        
        INDIRECT_ADDRESSING2:
        CMP Size_OP1,3
        JNE Ex
        LEA SI,OP1
		MOV AL,'['
		MOV BL,[SI]
		CMP BL,AL
		JNE Ex
		INC SI
		MOV BL,[SI]
		 
        cmp bl, '0'
            jb  Ex     ;IF BL < '0'
        	cmp bl, '9'
            jb Num3       ;IF BL <= '9'
        	
            cmp bl, 'F'
            ja  Ex     ;IF BL > 'F'
            cmp bl, 'A'
            jb Ex        ;IF BL >= 'A'
        	
        	 CMP  BL, 'A'     ;BL = 'A'..'F' : LETTER.
              JAE  letterAF3    ;BL = '0'..'9' : DIGIT.
           ;CharIsDigit09.
              NUM3: 
        	  SUB  BL, 48      ;CONVERT DIGIT TO NUMBER.
              JMP  continue3   
           letterAF3:               
              SUB  BL, 55      ;CONVERT LETTER TO NUMBER.
			  continue3:
			 
		MOV MValue,BL   ;num of the memory to be accssed
        MOV CL,20
        MOV Dest_Index,CL
        JMP Ex
        Ex:
        RET
        Type_OF_DEST ENDP
        
Type_OF_Source PROC NEAR   ;VALUE1 Strats With 0
        						   ;Register 				   ;Memory Starts With [ and 0 ;Register Strats with [ 2 byts  ]
        
        AXX2:   
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP2
        LEA SI,Reg1
        MOV CL,Size_OP2
        REPE CMPSB
        JNE BXX2
        MOV CL,1
        MOV Source_Index,CL 
        JMP Ex2
        	   
        BXX2:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP2
        LEA SI,Reg2
        MOV CL,Size_OP2
        REPE CMPSB
        JNE CXX2
        MOV CL,2
        MOV Source_Index,CL 
        JMP Ex2
        
        CXX2:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP2
        LEA SI,Reg3
        MOV CL,Size_OP2
        REPE CMPSB
        JNE DXX2
        MOV CL,3
        MOV Source_Index,CL 
        JMP Ex2
        
        DXX2:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP2
        LEA SI,Reg4
        MOV CL,Size_OP2
        REPE CMPSB
        JNE ALL2
        MOV CL,4
        MOV Source_Index,CL 
        JMP Ex2
        
        ALL2:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP2
        LEA SI,Reg5
        MOV CL,Size_OP2
        REPE CMPSB
        JNE BLL2
        MOV CL,5
        MOV Source_Index,CL 
        JMP Ex2
        
        BLL2:
        
        LEA DI,OP2
        LEA SI,Reg6
        MOV CL,Size_OP2
        REPE CMPSB
        JNE CLL2
        MOV CL,6
        MOV Source_Index,CL 
        
        CLL2:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP2
        LEA SI,Reg7
        MOV CL,Size_OP2
        REPE CMPSB
        JNE DLL2
        MOV CL,7
        MOV Source_Index,CL 
        JMP Ex2
        
        DLL2:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP2
        LEA SI,Reg8
        MOV CL,Size_OP2
        REPE CMPSB
        JNE AHH2
        MOV CL,8
        MOV Source_Index,CL 
        JMP Ex2
        
        AHH2:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP2
        LEA SI,Reg9
        MOV CL,Size_OP2
        REPE CMPSB
        JNE BHH2
        MOV CL,9
        MOV Source_Index,CL 
        JMP Ex2
        
        BHH2:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP2
        LEA SI,Reg10
        MOV CL,Size_OP2
        REPE CMPSB
        JNE CHH2
        MOV CL,10
        MOV Source_Index,CL 
        JMP Ex2
        
        CHH2:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP2
        LEA SI,Reg11
        MOV CL,Size_OP2
        REPE CMPSB
        JNE DHH2
        MOV CL,11
        MOV Source_Index,CL 
        JMP Ex2
        
        DHH2:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP2
        LEA SI,Reg12
        MOV CL,Size_OP2
        REPE CMPSB
        JNE SII2
        MOV CL,12
        MOV Source_Index,CL 
        JMP Ex2
        
        SII2:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP2
        LEA SI,Reg_1
        MOV CL,Size_OP2
        REPE CMPSB
        JNE DII2
        MOV CL,13
        MOV Source_Index,CL 
        JMP Ex2
        
        DII2:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP2
        LEA SI,Reg_2
        MOV CL,Size_OP2
        REPE CMPSB
        JNE BPP2
        MOV CL,14
        MOV Source_Index,CL       ; now let's check the source
        JMP Ex2
        
        BPP2:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP2
        LEA SI,Reg_3
        MOV CL,Size_OP2
        REPE CMPSB
        JNE SPP2
        MOV CL,15
        MOV Source_Index,CL       ; now let's check the source
        JMP Ex2
        
        SPP2:
        LEA DI,OP2
        LEA SI,Reg_4
        MOV CL,Size_OP2
        REPE CMPSB
        JNE BXX3    ; we go for another type of source
        MOV CL,16
        MOV Source_Index,CL
        JMP Ex2
        
        BXX3:                           ;;;Indirect_Addressing
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP2
        LEA SI,Reg_5
        MOV CL,Size_OP2
        REPE CMPSB
        JNE SII3
		MOV BX,VALUE_BX1
		CMP BX,16
		JA Ex2
		MOV MValue,BL
        MOV CL,17
        MOV Source_Index,CL
        JMP Ex2
        
        SII3:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP2
        LEA SI,Reg_6
        MOV CL,Size_OP2
        REPE CMPSB
        JNE DII3
		MOV BX,VALUE_SI1
		CMP BX,16
		JA Ex2
		MOV MValue,BL
        MOV CL,18
        MOV Source_Index,CL
        JMP Ex2
        
        DII3:
        MOV AX,DS
        MOV ES,AX
        LEA DI,OP2
        LEA SI,Reg_7
        MOV CL,Size_OP2
        REPE CMPSB
        JNE INDIRECT_ADDRESSING     ; Then move to Register to VALUE1
		MOV BX,VALUE_DI1
		CMP BX,16
		JA Ex2
		MOV MValue,BL		
        MOV CL,19
        MOV Source_Index,CL   
        JMP Ex2
        
        INDIRECT_ADDRESSING:
          CMP Size_OP2,3
        JNE VALV
        LEA SI,OP2
		MOV AL,'['
		MOV BL,[SI]
		CMP BL,AL
		JNE Ex2
		INC SI
		MOV BL,[SI]
		 
        cmp bl, '0'
            jb  Ex2     ;IF BL < '0'
        	cmp bl, '9'
            jb Num2       ;IF BL <= '9'
        	
            cmp bl, 'F'
            ja  Ex2     ;IF BL > 'F'
            cmp bl, 'A'
            jb Ex2        ;IF BL >= 'A'
        	
        	 CMP  BL, 'A'     ;BL = 'A'..'F' : LETTER.
              JAE  letterAF2    ;BL = '0'..'9' : DIGIT.
           ;CharIsDigit09.
              NUM2: 
        	  SUB  BL, 48      ;CONVERT DIGIT TO NUMBER.
              JMP  continue2   
           letterAF2:               
              SUB  BL, 55      ;CONVERT LETTER TO NUMBER.
			  continue2:
			 
		MOV MValue,BL
        MOV CL,20
        MOV Source_Index,CL
        JMP Ex2
		
        VALV:        ; now the third type of addressing is Reg2Value immediate  INST OP1 OP2 
        CMP Size_OP2,4
        JNE Ex2
        LEA SI,OP2
        MOV BH,Size_OP2
        call hex2number
        cmp Source_Index,99
		JE Ex2
		MOV VALUE1,AX
        MOV CL,21
        MOV Source_Index,CL
      
        JMP Ex2
        
        
        ;For Indirect addresing mode 
        
        Ex2:
        RET
        Type_OF_Source ENDP        
Type_OF_INST PROC NEAR
        MOOV:
        MOV AX,DS
        MOV ES,AX
        LEA DI,INST
        LEA SI,TEXT1
        MOV CL,Size_INST
        REPE CMPSB
        JNE AADD
        MOV CL,1
        MOV INST_INDEX,CL       ; now let's check the source
        JMP Ex3
         
        AADD:
        MOV AX,DS
        MOV ES,AX
        LEA DI,INST
        LEA SI,TEXT2
        MOV CL,Size_INST
        REPE CMPSB
        JNE SUUUBB
        MOV CL,2
        MOV INST_INDEX,CL       ; now let's check the source
        JMP Ex3
        
        SUUUBB:
        MOV AX,DS
        MOV ES,AX
        LEA DI,INST
        LEA SI,TEXT3
        MOV CL,Size_INST
        REPE CMPSB
        JNE SHRR
        MOV CL,3
        MOV INST_INDEX,CL       ; now let's check the source
        JMP Ex3
        
        SHRR:
        MOV AX,DS
        MOV ES,AX
        LEA DI,INST
        LEA SI,TEXT4
        MOV CL,Size_INST
        REPE CMPSB
        JNE SHLL
        MOV CL,4
        MOV INST_INDEX,CL       ; now let's check the source
        JMP Ex3
        
        SHLL:
        MOV AX,DS
        MOV ES,AX
        LEA DI,INST
        LEA SI,TEXT5
        MOV CL,Size_INST
        REPE CMPSB
        JNE CLCC
        MOV CL,5
        MOV INST_INDEX,CL       ; now let's check the source
        JMP Ex3
        
        CLCC:
        MOV AX,DS
        MOV ES,AX
        LEA DI,INST
        LEA SI,TEXT6
        MOV CL,Size_INST
        REPE CMPSB
        JNE ROOR
        MOV CL,6
        MOV INST_INDEX,CL       ; now let's check the source
        JMP Ex3
        
        ROOR:
        MOV AX,DS
        MOV ES,AX
        LEA DI,INST
        LEA SI,TEXT7
        MOV CL,Size_INST
        REPE CMPSB
        JNE ROOL
        MOV CL,7
        MOV INST_INDEX,CL       ; now let's check the source
        JMP Ex3
        
        ROOL:
        MOV AX,DS
        MOV ES,AX
        LEA DI,INST
        LEA SI,TEXT8
        MOV CL,Size_INST
        REPE CMPSB
        JNE XXOR
        MOV CL,8
        MOV INST_INDEX,CL       ; now let's check the source
        JMP Ex3
        
        XXOR:
        MOV AX,DS
        MOV ES,AX
        LEA DI,INST
        LEA SI,TEXT9
        MOV CL,Size_INST
        REPE CMPSB
        JNE OOR
        MOV CL,9
        MOV INST_INDEX,CL       ; now let's check the source
        JMP Ex3
        
        OOR:
        MOV AX,DS
        MOV ES,AX
        LEA DI,INST
        LEA SI,TEXT10
        MOV CL,Size_INST
        REPE CMPSB
        JNE ANND
        MOV CL,10
        MOV INST_INDEX,CL       ; now let's check the source
        JMP Ex3
        
        ANND:
        MOV AX,DS
        MOV ES,AX
        LEA DI,INST
        LEA SI,TEXT11
        MOV CL,Size_INST
        REPE CMPSB
        JNE INCC
        MOV CL,11
        MOV INST_INDEX,CL       ; now let's check the source
        JMP Ex3
        
        INCC:
        MOV AX,DS
        MOV ES,AX
        LEA DI,INST
        LEA SI,TEXT12
        MOV CL,Size_INST
        REPE CMPSB
        JNE DECC
        MOV CL,12
        MOV INST_INDEX,CL       ; now let's check the source
        JMP Ex3
        
        DECC:
        MOV AX,DS
        MOV ES,AX
        LEA DI,INST
        LEA SI,TEXT13
        MOV CL,Size_INST
        REPE CMPSB
        JNE DIVV
        MOV CL,13
        MOV INST_INDEX,CL       ; now let's check the source
        JMP Ex3
        
        DIVV:
        MOV AX,DS
        MOV ES,AX
        LEA DI,INST
        LEA SI,TEXT14
        MOV CL,Size_INST
        REPE CMPSB
        JNE MULL
        MOV CL,14
        MOV INST_INDEX,CL       ; now let's check the source
        JMP Ex3
        
        MULL:
        MOV AX,DS
        MOV ES,AX
        LEA DI,INST
        LEA SI,TEXT15
        MOV CL,Size_INST
        REPE CMPSB
        JNE NOPP
        MOV CL,15
        MOV INST_INDEX,CL       ; now let's check the source
        JMP Ex3
        
        NOPP:
        MOV AX,DS
        MOV ES,AX
        LEA DI,INST
        LEA SI,TEXT16
        MOV CL,Size_INST
        REPE CMPSB
        JNE Ex3
        MOV CL,16
        MOV INST_INDEX,CL       ; now let's check the source
        JMP Ex3
        
        Ex3:
        RET 
        Type_OF_INST ENDP
hex2number proc
      MOV  AX, 0       ;THE NUMBER.
   Ciclo:
;¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
;     SHL  AX, 4       ;SHIFT LEFT LOWER 4 BITS.
;SHIFT LEFT AL AND AH MANUALLY 4 TIMES TO SIMULATE SHL AX,4.
      shl  al, 1
      rcl  ah, 1
      shl  al, 1
      rcl  ah, 1
      shl  al, 1
      rcl  ah, 1
      shl  al, 1
      rcl  ah, 1
;¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦

      MOV  BL, [ SI ]  ;GET ONE HEX CHAR FROM STRING.

      call validate

      CMP  BL, 'A'     ;BL = 'A'..'F' : LETTER.
      JAE  letterAF    ;BL = '0'..'9' : DIGIT.
   ;CharIsDigit09.
      SUB  BL, 48      ;CONVERT DIGIT TO NUMBER.
      JMP  continue   
   letterAF:               
      SUB  BL, 55      ;CONVERT LETTER TO NUMBER.
   continue: 
      OR   AL, BL      ;CLEAR UPPER 4 BITS. ???
      INC  SI          ;NEXT HEX CHAR.
      DEC  BH          ;BH == 0 : FINISH.
      JNZ  Ciclo       ;BH != 0 : REPEAT.
   Fin:
      RET
hex2number endp
;---------------------------------------------  
;INPUT : BL = HEX CHAR TO VALIDATE.
FLAGS PROC NEAR 
        pushf
          pop     dx
          mov     di, offset CCF
          mov     cx, 12
          mov     bx, 0FD5h     ; Mask of defined flags
          cld
        More:
          shr     dx, 1
          mov     al, 0
          rcl     al, 1
          shr     bx, 1
          jnc     Skip          ; Bit does not correspond to a defined flag
          stosb
        Skip:
          dec     cx
          jnz     More
          RET 
          FLAGS ENDP 
validate proc

    cmp bl, '0'
    jb  error3     ;IF BL < '0'
    cmp bl, 'F'
    ja  error3     ;IF BL > 'F'
    cmp bl, '9'
    jbe ok2        ;IF BL <= '9'
    cmp bl, 'A'
    jae ok2        ;IF BL >= 'A'
error3:    
    pop  ax       ;REMOVE CALL VALIDATE.
    pop  ax       ;REMOVE CALL HEX2NUMBER.
;DISPLAY 'ILLEGAL CHARACTER- ENTER 0-9 OR A-F$'
mov al,99
mov Source_Index,al
ok2:    
    ret
    validate endp      
number2string proc
 mov  bx, 10 ;DIGITS ARE EXTRACTED DIVIDING BY 10.
  mov  cx, 0 ;COUNTER FOR EXTRACTED DIGITS.
cycle1:


  MOV BX,0
  MOV BL,AH
  AND BL,11110000B
  SHR BL,4 
  
  
  CMP  BL, 10     ;BL = 'A'..'F' : LETTER.
  JAE  PletterAF
         
  add  BL, 48 ;CONVERT DIGIT TO CHARACTER.
  mov  [ si ], BL
  inc  si
  
  JMP P1
  
  PletterAF:
  add  BL, 55 ;CONVERT DIGIT TO CHARACTER.
  mov  [ si ], BL
  inc  si
  
   
  
  ;--------------------------------------------
  P1:
  
  MOV BX,0
  MOV BL,AH
  AND BL,00001111B
  
  CMP  BL, 10     ;BL = 'A'..'F' : LETTER.
  JAE  PletterAF2
         
  add  BL, 48 ;CONVERT DIGIT TO CHARACTER.
  mov  [ si ], BL
  inc  si
  
  JMP P2
  
  PletterAF2:
  add  BL, 55 ;CONVERT DIGIT TO CHARACTER.
  mov  [ si ], BL
  inc  si
  
  ;--------------------------------------------- 
  P2:
  
  MOV BX,0
  MOV BL,AL
  AND BL,11110000B
  SHR BL,4 
  
  CMP  BL, 10     ;BL = 'A'..'F' : LETTER.
  JAE  PletterAF3
         
  add  BL, 48 ;CONVERT DIGIT TO CHARACTER.
  mov  [ si ], BL
  inc  si
  
  JMP P3
  
  PletterAF3:
  add  BL, 55 ;CONVERT DIGIT TO CHARACTER.
  mov  [ si ], BL
  inc  si  
  
  
  
  ;---------------------------------------------
  P3:
  
  MOV BX,0
  MOV BL,AL
  AND BL,00001111B
  
  CMP  BL, 10     ;BL = 'A'..'F' : LETTER.
  JAE  PletterAF4
         
  add  BL, 48 ;CONVERT DIGIT TO CHARACTER.
  mov  [ si ], BL
  inc  si
  
  JMP P4
           
  PletterAF4:
  add  BL, 55 ;CONVERT DIGIT TO CHARACTER.
  mov  [ si ], BL
  inc  si
  
  ;---------------------------------------------
   P4:







       
    

  ret
number2string endp  



Excution_Unite1 proc near
        call MOV_INST
        
        call ADD_INST
        
        call SUB_INST
            
        CALL SHL_INST
            
        CALL SHR_INST
            
        CALL ROR_INST
            
        CALL ROL_INST 
            
        CALL XOR_INST
            
        CALL OR_INST
            
        CALL AND_INST
        
        CALL INC_INST

        CALL MUL_INST

        CALL DEC_INST

        CALL NOP_INST

        CALL DIV_INST

        CALL CLCC_INST
        RET
            
Excution_Unite1 ENDP  
ADD_INST PROC NEAR

            CMP INST_INDEX,2
			JNE OPER2
         
            cmp dest_index,1
            jne ADD2
            
                    ADD11:
            
                        cmp source_index,1
                        jne ADD12
                        
                        mov ax,VALUE_AX1
                        ADD VALUE_AX1,ax
                        
                        
                    ADD12:
                        cmp source_index,2
                        jne ADD13
                        
                        mov ax,VALUE_BX1
                        ADD VALUE_AX1,ax
                        
                    ADD13:
                        cmp source_index,3
                        jne ADD14
                        
                        mov ax,VALUE_CX1
                        ADD VALUE_AX1,ax
                                   
                    ADD14:
                        cmp source_index,4
                        jne ADD15
                        
                        mov ax,VALUE_DX1
                        ADD VALUE_AX1,ax
                        
                    ADD15:
                        cmp source_index,13
                        jne ADD16
                        
                        mov ax,VALUE_SI1
                        ADD VALUE_AX1,ax
                        
                    ADD16:
                        cmp source_index,14
                        jne ADD17
                        
                        mov ax,VALUE_DI1
                        ADD VALUE_AX1,ax   
                        
                    ADD17:
                        cmp source_index,15
                        jne ADD18 
                        
                        mov ax,VALUE_SP1
                        ADD VALUE_AX1,ax
                        
                    ADD18:
                        cmp source_index,16
                        jne ADD19
                        
                        mov ax,VALUE_BP1
                        ADD VALUE_AX1,ax
                        
                    ADD19:
                        cmp source_index,21
                        jne ADD20
                        
                        mov ax,VALUE1
                        ADD VALUE_AX1,ax
                        
                    ADD20:
                       cmp source_index,20
                        jne ADD2
                        mov AX,VALUE1
                        MOV BX,OFFSET MEMORY
                        mov cx,0
                        mov cl,MValue
                        ADD BX,cx
                        MOV [BX],AX
                        
               ADD2: 
                        
               cmp dest_index,2
               jne ADD3
               
               
              
                    ADD21:
            
                        cmp source_index,1
                        jne ADD22
                        
                        mov ax,VALUE_AX1
                        ADD VALUE_BX1,ax
                        
                        
                    ADD22:
                        cmp source_index,2
                        jne ADD23
                        
                        ADD ax,VALUE_BX1
                        ADD VALUE_BX1,ax
                        
                    ADD23:
                        cmp source_index,3
                        jne ADD24
                        
                        mov ax,VALUE_CX1
                        ADD VALUE_BX1,ax
                                   
                    ADD24:
                        cmp source_index,4
                        jne ADD25
                        
                        mov ax,VALUE_DX1
                        ADD Value_BX1,ax
                        
                    ADD25:
                        cmp source_index,13
                        jne ADD26
                        
                        mov ax,VALUE_SI1
                        ADD VALUE_BX1,ax
                        
                    ADD26:
                        cmp source_index,14
                        jne ADD27
                        
                        mov ax,VALUE_DI1
                        ADD VALUE_BX1,ax   
                        
                    ADD27:
                        cmp source_index,15
                        jne ADD28 
                        
                        mov ax,VALUE_SP1
                        ADD VALUE_BX1,ax
                        
                    ADD28:
                        cmp source_index,16
                        jne ADD29
                        
                        mov ax,VALUE_BP1
                        ADD VALUE_BX1,ax
                        
                    ADD29:
                        cmp source_index,21
                        jne ADD3
                        
                        mov ax,VALUE1
                        ADD VALUE_BX1,ax     
               
            ADD3:   
               cmp dest_index,3
               jne ADD4
            
                    ADD31:
            
                        cmp source_index,1
                        jne ADD32
                        
                        mov ax,VALUE_AX1
                        ADD VALUE_CX1,ax
                        
                        
                    ADD32:
                        cmp source_index,2
                        jne ADD33
                        
                        mov ax,VALUE_BX1
                        ADD VALUE_CX1,ax
                        
                    ADD33:
                        cmp source_index,3
                        jne ADD34
                        
                        mov ax,VALUE_CX1
                        ADD VALUE_CX1,ax
                                   
                    ADD34:
                        cmp source_index,4
                        jne ADD35
                        
                        mov ax,VALUE_DX1
                        ADD VALUE_CX1,ax
                        
                    ADD35:
                        cmp source_index,13
                        jne ADD36
                        
                        mov ax,VALUE_SI1
                        ADD VALUE_CX1,ax
                        
                    ADD36:
                        cmp source_index,14
                        jne ADD37
                        
                        mov ax,VALUE_DI1
                        ADD VALUE_CX1,ax   
                        
                    ADD37:
                        cmp source_index,15
                        jne ADD38 
                        
                        mov ax,VALUE_SP1
                        ADD VALUE_CX1,ax
                        
                    ADD38:
                        cmp source_index,16
                        jne ADD39
                        
                        mov ax,VALUE_BP1
                        ADD VALUE_CX1,ax
                        
                    ADD39:
                        cmp source_index,21
                        jne ADD4
                        
                        mov ax,VALUE1
                        ADD VALUE_CX1,ax
                        
             ADD4:   
               cmp dest_index,4
               jne ADD5
            
                    ADD41:
            
                        cmp source_index,1
                        jne ADD42
                        
                        mov ax,VALUE_AX1
                        ADD VALUE_DX1,ax
                        
                        
                    ADD42:
                        cmp source_index,2
                        jne ADD43
                        
                        mov ax,VALUE_BX1
                        ADD VALUE_DX1,ax
                        
                    ADD43:
                        cmp source_index,3
                        jne ADD44
                        
                        mov ax,VALUE_CX1
                        ADD VALUE_DX1,ax
                                   
                    ADD44:
                        cmp source_index,4
                        jne ADD45
                        
                        mov ax,VALUE_DX1
                        ADD VALUE_DX1,ax
                        
                    ADD45:
                        cmp source_index,13
                        jne ADD46
                        
                        mov ax,VALUE_SI1
                        ADD VALUE_DX1,ax
                        
                    ADD46:
                        cmp source_index,14
                        jne ADD47
                        
                        mov ax,VALUE_DI1
                        ADD VALUE_DX1,ax   
                        
                    ADD47:
                        cmp source_index,15
                        jne ADD48 
                        
                        mov ax,VALUE_SP1
                        ADD VALUE_DX1,ax
                        
                    ADD48:
                        cmp source_index,16
                        jne ADD49
                        
                        mov ax,VALUE_BP1
                        ADD VALUE_DX1,ax
                        
                    ADD49:
                        cmp source_index,21
                        jne ADD5
                        
                        mov ax,VALUE1
                        ADD VALUE_DX1,ax
                        
                        
              ADD5:   
               cmp dest_index,5
               jne ADD6
               
                    ADD51:
                        cmp source_index,5
                        jne ADD52
                        
                        
                        mov AX,VALUE_AX1
                        SUB AH,AH
                        ADD VALUE_AX1,AX
                        
                    ADD52:
                        cmp source_index,6
                        jne ADD53
                        
                        mov AX,VALUE_BX1
                        SUB AH,AH
                        ADD VALUE_AX1,AX
                    
                    ADD53:
                        cmp source_index,7
                        jne ADD54
                        
                        mov AX,VALUE_CX1
                        SUB AH,AH
                        ADD VALUE_AX1,AX 
                        
                    ADD54:
                        cmp source_index,8
                        jne ADD55
                        
                        mov AX,VALUE_DX1
                        SUB AH,AH
                        ADD VALUE_AX1,AX
                        
                   ADD55:
                        cmp source_index,9
                        jne ADD56
                        
                        mov AX,VALUE_AX1
                        SUB AL,AL
                        SHR AX,8
                        ADD VALUE_AX1,AX
                        
                    ADD56:
                        cmp source_index,10
                        jne ADD57
                        
                        mov AX,VALUE_BX1
                        SUB AL,AL 
                        SHR AX,8
                        ADD VALUE_AX1,AX
                    
                    ADD57:
                        cmp source_index,11
                        jne ADD58
                        
                        mov AX,VALUE_CX1
                        SUB AL,AL
                        SHR AX,8
                        ADD VALUE_AX1,AX 
                        
                    ADD58:
                        cmp source_index,12
                        jne ADD59
                        
                        mov AX,VALUE_DX1
                        SUB AL,AL
                        SHR AX,8
                        ADD VALUE_AX1,AX
                        
                    ADD59:
                        cmp source_index,21
                        jne ADD6
                        
                        mov AX,VALUE1
                        SHL AX,8
                        ADD VALUE_AX1,AX    
                          
                        
               ADD6:   
               cmp dest_index,6
               jne ADD7
               
                    ADD61:
                        cmp source_index,5
                        jne ADD62
                        
                        
                        mov AX,VALUE_AX1
                        SUB AH,AH
                        ADD VALUE_BX1,AX
                        
                    ADD62:
                        cmp source_index,6
                        jne ADD63
                        
                        mov AX,VALUE_BX1
                        SUB AH,AH
                        ADD VALUE_BX1,AX
                    
                    ADD63:
                        cmp source_index,7
                        jne ADD64
                        
                        mov AX,VALUE_CX1
                        SUB AH,AH
                        ADD VALUE_BX1,AX 
                        
                    ADD64:
                        cmp source_index,8
                        jne ADD65
                        
                        mov AX,VALUE_DX1
                        SUB AH,AH
                        ADD VALUE_BX1,AX
                        
                   ADD65:
                        cmp source_index,9
                        jne ADD66
                        
                        mov AX,VALUE_AX1
                        SUB AL,AL
                        SHR AX,8
                        ADD VALUE_BX1,AX
                        
                    ADD66:
                        cmp source_index,10
                        jne ADD67
                        
                        mov AX,VALUE_BX1
                        SUB AL,AL 
                        SHR AX,8
                        ADD VALUE_BX1,AX
                    
                    ADD67:
                        cmp source_index,11
                        jne ADD68
                        
                        mov AX,VALUE_CX1
                        SUB AL,AL
                        SHR AX,8
                        ADD VALUE_BX1,AX 
                        
                    ADD68:
                        cmp source_index,12
                        jne ADD69
                        
                        mov AX,VALUE_DX1
                        SUB AL,AL
                        SHR AX,8
                        ADD VALUE_BX1,AX
                        
                    ADD69:
                        cmp source_index,21
                        jne ADD7
                        
                        mov AX,VALUE1
                        SHL AX,8
                        ADD VALUE_BX1,AX      
                        
                        
                        
               ADD7:   
               cmp dest_index,7
               jne ADD8
               
                    ADD71:
                        cmp source_index,5
                        jne ADD72
                        
                        
                        mov AX,VALUE_AX1
                        SUB AH,AH
                        ADD VALUE_CX1,AX
                        
                    ADD72:
                        cmp source_index,6
                        jne ADD73
                        
                        mov AX,VALUE_BX1
                        SUB AH,AH
                        ADD VALUE_CX1,AX
                    
                    ADD73:
                        cmp source_index,7
                        jne ADD74
                        
                        mov AX,VALUE_CX1
                        SUB AH,AH
                        ADD VALUE_CX1,AX 
                        
                    ADD74:
                        cmp source_index,8
                        jne ADD75
                        
                        mov AX,VALUE_DX1
                        SUB AH,AH
                        ADD VALUE_CX1,AX
                        
                   ADD75:
                        cmp source_index,9
                        jne ADD76
                        
                        mov AX,VALUE_AX1
                        SUB AL,AL
                        SHR AX,8
                        ADD VALUE_CX1,AX
                        
                    ADD76:
                        cmp source_index,10
                        jne ADD77
                        
                        mov AX,VALUE_BX1
                        SUB AL,AL 
                        SHR AX,8
                        ADD VALUE_CX1,AX
                    
                    ADD77:
                        cmp source_index,11
                        jne ADD78
                        
                        mov AX,VALUE_CX1
                        SUB AL,AL
                        SHR AX,8
                        ADD VALUE_CX1,AX 
                        
                    ADD78:
                        cmp source_index,12
                        jne ADD79
                        
                        mov AX,VALUE_DX1
                        SUB AL,AL
                        SHR AX,8
                        ADD VALUE_CX1,AX 
                        
                    ADD79:
                        cmp source_index,21
                        jne ADD8
                        
                        mov AX,VALUE1
                        SHR AX,8
                        ADD VALUE_CX1,AX
                                   
                        
              ADD8:   
               cmp dest_index,8
               jne ADD9
               
                     ADD81:
                        cmp source_index,5
                        jne ADD82
                               
                        
                        mov AX,VALUE_AX1
                        SUB AH,AH
                        ADD VALUE_DX1,AX
                        
                    ADD82:
                        cmp source_index,6
                        jne ADD83
                               
                        mov AX,VALUE_BX1
                        SUB AH,AH
                        ADD VALUE_DX1,AX
                    
                    ADD83:
                        cmp source_index,7
                        jne ADD84
                        
                        mov AX,VALUE_CX1
                        SUB AH,AH
                        ADD VALUE_DX1,AX 
                        
                    ADD84:
                        cmp source_index,8
                        jne ADD85
                        
                        mov AX,VALUE_DX1
                        SUB AH,AH
                        ADD VALUE_DX1,AX
                        
                    ADD85:
                        cmp source_index,9
                        jne ADD86
                        
                        mov AX,VALUE_AX1
                        SUB AL,AL
                        SHR AX,8
                        ADD VALUE_DX1,AX
                        
                    ADD86:
                        cmp source_index,10
                        jne ADD87
                        
                        mov AX,VALUE_BX1
                        SUB AL,AL 
                        SHR AX,8
                        ADD VALUE_DX1,AX
                    
                    ADD87:
                        cmp source_index,11
                        jne ADD88
                        
                        mov AX,VALUE_CX1
                        SUB AL,AL
                        SHR AX,8
                        ADD VALUE_DX1,AX 
                        
                    ADD88:
                        cmp source_index,12
                        jne ADD89
                        
                        mov AX,VALUE_DX1
                        SUB AL,AL
                        SHR AX,8
                        ADD VALUE_DX1,AX 
                        
                        
                    ADD89:
                        cmp source_index,21
                        jne ADD9
                        
                        mov AX,VALUE1
                        SHR AX,8
                        ADD VALUE_DX1,AX
              
              
              ADD9:   
               cmp dest_index,9
               jne ADD10
               
                     ADD91:
                        cmp source_index,5
                        jne ADD92
                               
                        
                        mov AX,VALUE_AX1
                        SUB AH,AH
                        SHL AX,8
                        ADD VALUE_AX1,AX
                        
                    ADD92:
                        cmp source_index,6
                        jne ADD93
                               
                        mov AX,VALUE_BX1
                        SUB AL,AL
                        SHL AX,8
                        ADD VALUE_AX1,AX
                    
                    ADD93:
                        cmp source_index,7
                        jne ADD94
                        
                        mov AX,VALUE_CX1
                        SUB AH,AH
                        SHL AX,8
                        ADD VALUE_AX1,AX 
                        
                    ADD94:
                        cmp source_index,8
                        jne ADD95
                        
                        mov AX,VALUE_DX1
                        SUB AH,AH
                        SHL AX,8
                        ADD VALUE_AX1,AX
                        
                   ADD95:
                        cmp source_index,9
                        jne ADD96
                        
                        mov AX,VALUE_AX1
                        SUB AL,AL
                        ADD VALUE_AX1,AX
                        
                    ADD96:
                        cmp source_index,10
                        jne ADD97
                        
                        mov AX,VALUE_BX1
                        SUB AL,AL
                        ADD VALUE_AX1,AX
                    
                    ADD97:
                        cmp source_index,11
                        jne ADD98
                        
                        mov AX,VALUE_CX1
                        SUB AL,AL
                        ADD VALUE_AX1,AX 
                        
                    ADD98:
                        cmp source_index,12
                        jne ADD10
                        
                        mov AX,VALUE_DX1
                        SUB AL,AL
                        ADD VALUE_AX1,AX
                        
                    ADD99:
                        cmp source_index,21
                        jne ADD10
                        
                        mov AX,VALUE1
                        SUB AL,AL
                        ADD VALUE_AX1,AX 
                        
                            
              
              
              ADD10:   
               cmp dest_index,10
               jne ADDD11
               
                    ADD101:
                        cmp source_index,5
                        jne ADD102
                               
                        
                        mov AX,VALUE_AX1
                        SUB AH,AH
                        SHL AX,8
                        ADD VALUE_BX1,AX
                        
                    ADD102:
                        cmp source_index,6
                        jne ADD103
                               
                        mov AX,VALUE_BX1
                        SUB AH,AH
                        SHL AX,8
                        ADD VALUE_BX1,AX
                    
                    ADD103:
                        cmp source_index,7
                        jne ADD104
                        
                        mov AX,VALUE_CX1
                        SUB AH,AH
                        SHL AX,8
                        ADD VALUE_BX1,AX 
                        
                    ADD104:
                        cmp source_index,8
                        jne ADD105
                        
                        mov AX,VALUE_DX1
                        SUB AH,AH
                        SHL AX,8
                        ADD VALUE_BX1,AX
                        
                   ADD105:
                        cmp source_index,9
                        jne ADD106
                        
                        mov AX,VALUE_AX1
                        SUB AL,AL
                        ADD VALUE_BX1,AX
                        
                    ADD106:
                        cmp source_index,10
                        jne ADD107
                        
                        mov AX,VALUE_BX1
                        SUB AL,AL
                        ADD VALUE_BX1,AX
                    
                    ADD107:
                        cmp source_index,11
                        jne ADD108
                        
                        mov AX,VALUE_CX1
                        SUB AL,AL
                        ADD VALUE_BX1,AX 
                        
                    ADD108:
                        cmp source_index,12
                        jne ADD109
                        
                        mov AX,VALUE_DX1
                        SUB AL,AL
                        ADD VALUE_BX1,AX 
                    
                    ADD109:
                        cmp source_index,21
                        jne ADDD11
                        
                        mov AX,VALUE1
                        SUB AL,AL
                        ADD VALUE_BX1,AX             
              
              
              ADDD11:   
               cmp dest_index,11
               jne ADDD12
               
                     ADD111:
                        cmp source_index,5
                        jne ADD112
                               
                        
                        mov AX,VALUE_AX1
                        SUB AH,AH
                        SHL AX,8
                        ADD VALUE_CX1,AX
                        
                    ADD112:
                        cmp source_index,6
                        jne ADD113
                               
                        mov AX,VALUE_BX1
                        SUB AH,AH
                        SHL AX,8
                        ADD VALUE_CX1,AX
                    
                    ADD113:
                        cmp source_index,7
                        jne ADD114
                        
                        mov AX,VALUE_CX1
                        SUB AH,AH
                        SHL AX,8
                        ADD VALUE_CX1,AX 
                        
                   ADD114:
                        cmp source_index,8
                        jne ADD115
                        
                        mov AX,VALUE_DX1
                        SUB AH,AH
                        SHL AX,8
                        ADD VALUE_CX1,AX
                        
                   ADD115:
                        cmp source_index,9
                        jne ADD116
                        
                        mov AX,VALUE_AX1
                        SUB AL,AL
                        ADD VALUE_CX1,AX
                        
                    ADD116:
                        cmp source_index,10
                        jne ADD117
                        
                        mov AX,VALUE_BX1
                        SUB AL,AL
                        ADD VALUE_CX1,AX
                    
                    ADD117:
                        cmp source_index,11
                        jne ADD118
                        
                        mov AX,VALUE_CX1
                        SUB AL,AL
                        ADD VALUE_CX1,AX 
                        
                    ADD118:
                        cmp source_index,12
                        jne ADD119
                        
                        mov AX,VALUE_DX1
                        SUB AL,AL
                        ADD VALUE_CX1,AX
                        
                    ADD119:
                        cmp source_index,21
                        jne ADDD12
                        
                        mov AX,VALUE1
                        SUB AL,AL
                        ADD VALUE_CX1,AX          
              
              
              ADDD12:   
               cmp dest_index,12
               jne OPER2
               
                     ADD121:
                        cmp source_index,5
                        jne ADD122
                               
                        
                        mov AX,VALUE_AX1
                        SUB AH,AH
                        SHL AX,8
                        ADD VALUE_DX1,AX
                        
                    ADD122:
                        cmp source_index,6
                        jne ADD123
                               
                        mov AX,VALUE_BX1
                        SUB AH,AH
                        SHL AX,8
                        ADD VALUE_DX1,AX
                    
                    ADD123:
                        cmp source_index,7
                        jne ADD124
                        
                        mov AX,VALUE_CX1
                        SUB AH,AH
                        SHL AX,8
                        ADD VALUE_DX1,AX 
                        
                    ADD124:
                        cmp source_index,8
                        jne ADD125
                        
                        mov AX,VALUE_DX1
                        SUB AH,AH
                        SHL AX,8
                        ADD VALUE_DX1,AX
                        
                   ADD125:
                        cmp source_index,9
                        jne ADD126
                        
                        mov AX,VALUE_AX1
                        SUB AL,AL
                        ADD VALUE_DX1,AX
                        
                   ADD126:
                        cmp source_index,10
                        jne ADD127
                        
                        mov AX,VALUE_BX1
                        SUB AL,AL
                        ADD VALUE_DX1,AX
                    
                    ADD127:
                        cmp source_index,11
                        jne ADD128
                        
                        mov AX,VALUE_CX1
                        SUB AL,AL
                        ADD VALUE_DX1,AX 
                        
                    ADD128:
                        cmp source_index,12
                        jne ADD129
                        
                        mov AX,VALUE_DX1
                        SUB AL,AL
                        ADD VALUE_DX1,AX     
                    
                    ADD129:
                        cmp source_index,21
                        jne OPER2
                        
                        mov AX,VALUE1
                        SUB AL,AL
                        ADD VALUE_DX1,AX  
                        
                        
             OPER2:
                        
            RET 
           ADD_INST ENDP 
DEC_INST PROC NEAR
        CMP INST_INDEX,13
        JNE DONE2
        AAX2:
        CMP Dest_Index,1
        JNE BBX2
        MOV AX,VALUE_AX1
        DEC AX
        MOV VALUE_AX1,AX
        JMP DONE2
        
        BBX2:
        CMP Dest_Index,2
        JNE CCX2
        MOV BX,VALUE_BX1
        DEC BX
        MOV VALUE_BX1,BX
        JMP DONE2
        
        CCX2:
        CMP Dest_Index,3
        JNE DDX2
        MOV AX,VALUE_CX1
        DEC AX
        MOV VALUE_CX1,AX
        JMP DONE2
        
        DDX2:
        CMP Dest_Index,4
        JNE AAL2
        MOV AX,VALUE_DX1
        DEC AX
        MOV VALUE_DX1,AX
        JMP DONE2
        
        AAL2:
        CMP Dest_Index,5
        JNE BBL2
        MOV AX,VALUE_AX1
        DEC AL
        MOV VALUE_AX1,AX
        JMP DONE2
        
        BBL2:
        CMP Dest_Index,6
        JNE CCL2
        MOV AX,VALUE_BX1
        DEC AL
        MOV VALUE_BX1,AX
        JMP DONE2
        
        CCL2:
        CMP Dest_Index,7
        JNE DDL2
        MOV CX,VALUE_CX1
        DEC CL
        MOV VALUE_CX1,CX
        JMP DONE2
        
        DDL2:
        CMP Dest_Index,8
        JNE AAH2
        MOV AX,VALUE_DX1
        DEC AL
        MOV VALUE_DX1,AX
        JMP DONE2
        
        AAH2:
        CMP Dest_Index,9
        JNE BBH2
        MOV AX,VALUE_AX1
        DEC AH
        MOV VALUE_AX1,AX
        JMP DONE2
        
        BBH2:
        CMP Dest_Index,10
        JNE CCH2
        MOV AX,VALUE_BX1
        DEC AH
        MOV VALUE_BX1,AX
        JMP DONE2
        
        CCH2:
        CMP Dest_Index,11
        JNE DDH2
        MOV AX,VALUE_CX1
        DEC AH
        MOV VALUE_CX1,AX
        JMP DONE2 
        
        DDH2:
        CMP Dest_Index,12
        JNE SSI2
        MOV AX,VALUE_DX1
        DEC AH
        MOV VALUE_DX1,AX
        JMP DONE2
        
        SSI2:
        CMP Dest_Index,13
        JNE DDI2
        MOV AX,VALUE_SI1
        DEC AX
        MOV VALUE_SI1,AX
        JMP DONE2
        
        DDI2:
        CMP Dest_Index,14
        JNE BBP2
        MOV AX,VALUE_DI1
        DEC AX
        MOV VALUE_DI1,AX
        JMP DONE2
        
        BBP2:
        CMP Dest_Index,15
        JNE SSP2
        MOV AX,VALUE_BP1
        DEC AX
        MOV VALUE_BP1,AX
        JMP DONE2
        
        SSP2:
        CMP Dest_Index,16
        JNE DONE2
        MOV AX,VALUE_SP1
        DEC AX
        MOV VALUE_SP1,AX
        JMP DONE2
        
        DONE2:
        RET
        DEC_INST ENDP	
INC_INST PROC NEAR
        CMP INST_INDEX,12
        JNE DONE
        AAX:
        CMP Dest_Index,1
        JNE BBX
        MOV AX,0
        MOV AX,VALUE_AX1
        INC AX
        MOV VALUE_AX1,AX
        JMP DONE
        
        BBX:
        CMP Dest_Index,2
        JNE CCX
        MOV BX,0
        MOV BX,VALUE_BX1
        INC BX
        MOV VALUE_BX1,BX
        JMP DONE
        
        CCX:
        CMP Dest_Index,3
        JNE DDX
        MOV AX,VALUE_CX1
        INC AX
        MOV VALUE_CX1,AX
        JMP DONE
        
        DDX:
        CMP Dest_Index,4
        JNE AAL
        MOV AX,VALUE_DX1
        INC AX
        MOV VALUE_DX1,AX
        JMP DONE
        
        AAL:
        CMP Dest_Index,5
        JNE BBL
        MOV AX,0
        MOV AX,VALUE_AX1
        INC AL
        MOV VALUE_AX1,AX
        JMP DONE
        
        BBL:
        CMP Dest_Index,6
        JNE CCL
        MOV AX,0
        MOV AX,VALUE_BX1
        INC AL
        MOV VALUE_BX1,AX
        JMP DONE
        
        CCL:
        CMP Dest_Index,7
        JNE DDL
        MOV AX,0
        MOV AX,VALUE_CX1
        INC AL
        MOV VALUE_CX1,AX
        JMP DONE
        
        DDL:
        CMP Dest_Index,8
        JNE AAH
        MOV AX,0
        MOV AX,VALUE_DX1
        INC AL
        MOV VALUE_DX1,AX
        JMP DONE
        
        AAH:
        CMP Dest_Index,9
        JNE BBH
        MOV AX,0
        MOV AX,VALUE_AX1
        INC AH
        MOV VALUE_AX1,AX
        JMP DONE
        
        BBH:
        CMP Dest_Index,10
        JNE CCH
        MOV AX,0
        MOV AX,VALUE_BX1
        INC AH
        MOV VALUE_BX1,AX
        JMP DONE 
        
        CCH:
        CMP Dest_Index,11
        JNE DDH
        MOV AX,0
        MOV AX,VALUE_CX1
        INC AH
        MOV VALUE_CX1,AX
        JMP DONE 
        
        DDH:
        CMP Dest_Index,12
        JNE SSI
        MOV AX,0
        MOV AX,VALUE_DX1
        INC AH
        MOV VALUE_DX1,AX
        JMP DONE
        
        SSI:
        CMP Dest_Index,13
        JNE DDI
        MOV AX,0
        MOV AX,VALUE_SI1
        INC AX
        MOV VALUE_SI1,AX
        JMP DONE
        
        DDI:
        CMP Dest_Index,14
        JNE BBP
        MOV AX,0
        MOV AX,VALUE_DI1
        INC AX
        MOV VALUE_DI1,AX
        JMP DONE
        
        BBP:
        CMP Dest_Index,15
        JNE SSP
        MOV AX,0
        MOV AX,VALUE_BP1
        INC AX
        MOV VALUE_BP1,AX
        JMP DONE
        
        SSP:
        CMP Dest_Index,16
        JNE DONE
        MOV AX,0
        MOV AX,VALUE_SP1
        INC AX
        MOV VALUE_SP1,AX
        JMP DONE
        
        DONE:
        RET
INC_INST ENDP                   		
MUL_INST PROC NEAR
         CMP INST_INDEX,15
         JNE DONE3
        AAX3:
        CMP Dest_Index,1
        JNE BBX3
        MOV CX,VALUE_AX1
        MOV AX,VALUE_AX1
        MUL CX
        AND DX,1111
        JZ OL
        MOV VALUE_DX1,DX
        OL:
        MOV VALUE_AX1,AX
        JMP DONE3
        
        BBX3:
        CMP Dest_Index,2
        JNE CCX3
        MOV CX,VALUE_BX1
        MOV AX,VALUE_AX1
        MUL CX
        AND DX,1111
        JZ OL2
        MOV VALUE_DX1,DX
        OL2:
        MOV VALUE_AX1,AX
        JMP DONE3
        
        CCX3:
        CMP Dest_Index,3
        JNE DDX3
        MOV CX,VALUE_CX1
        MOV AX,VALUE_AX1
        MUL CX
        AND DX,1111   ;DX has a value cuz the num that result from the product is greater than 16bits
        JZ OL3
        MOV VALUE_DX1,DX
        OL3:
        MOV VALUE_AX1,AX
        JMP DONE3
        
        DDX3:
        CMP Dest_Index,4
        JNE AAL3
        MOV CX,VALUE_DX1
        MOV AX,VALUE_AX1
        MUL CX
        AND DX,1111
        JZ OL4
        MOV VALUE_DX1,DX
        OL4:
        MOV VALUE_AX1,AX
        JMP DONE3
        
        AAL3:     ;IF IT IS NOT WORKING WE CAN USE MOV AX,VALUE_AX1 THEN SUB AH,AH THEN DEC AL SAME AS BELOW 
        CMP Dest_Index,5
        JNE BBL3
        MOV CX,VALUE_AX1
        MOV AX,VALUE_AX1
        SUB AH,AH
        MUL CL
        MOV VALUE_AX1,AX
        JMP DONE3
        
        BBL3:
        CMP Dest_Index,6
        JNE CCL3
        MOV CX,VALUE_BX1
        MOV AX,VALUE_AX1
        SUB AH,AH
        MUL CL
        MOV VALUE_AX1,AX
        JMP DONE3
        
        CCL3:
        CMP Dest_Index,7
        JNE DDL3
        MOV CX,VALUE_CX1
        MOV AX,VALUE_AX1
        SUB AH,AH
        MUL CL
        MOV VALUE_AX1,AX
        JMP DONE3
        
        DDL3:
        CMP Dest_Index,8
        JNE AAH3
        MOV CX,VALUE_DX1
        MOV AX,VALUE_AX1
        SUB AH,AH
        MUL CL
        MOV VALUE_AX1,AX
        JMP DONE3
        
        AAH3:
        CMP Dest_Index,9
        JNE BBH3
        MOV CX,VALUE_AX1
        MOV AX,VALUE_AX1
        SUB AH,AH
        MUL CH
        MOV VALUE_AX1,AX
        JMP DONE3
        
        BBH3:
        CMP Dest_Index,10
        JNE CCH3
        MOV CX,VALUE_BX1
        MOV AX,VALUE_AX1
        SUB AH,AH
        MUL CH
        MOV VALUE_AX1,AX
        JMP DONE3
        
        CCH3:
        CMP Dest_Index,11
        JNE DDH3
        MOV CX,VALUE_CX1
        MOV AX,VALUE_AX1
        SUB AH,AH
        MUL CH
        MOV VALUE_AX1,AX
        JMP DONE3
        
        DDH3:
        CMP Dest_Index,12
        JNE SSI3
        MOV CX,VALUE_DX1
        MOV AX,VALUE_AX1
        SUB AH,AH
        MUL CH
        MOV VALUE_AX1,AX
        JMP DONE3
        
        SSI3:
        CMP Dest_Index,13
        JNE DDI3
        MOV CX,VALUE_SI1
        MOV AX,VALUE_AX1
        MUL CX
        AND DX,1111
        JZ OL5
        MOV VALUE_DX1,DX
        OL5:
        MOV VALUE_AX1,AX
        JMP DONE3
        
        DDI3:
        CMP Dest_Index,14
        JNE BBP3
        MOV CX,VALUE_DI1
        MOV AX,VALUE_AX1
        MUL CX
        AND DX,1111
        JZ OL6
        MOV VALUE_DX1,DX
        OL6:
        MOV VALUE_AX1,AX
        JMP DONE3
        
        BBP3:
        CMP Dest_Index,15
        JNE SSP3
        MOV CX,VALUE_BP1
        MOV AX,VALUE_AX1
        MUL CX
        AND DX,1111
        JZ OL7
        MOV VALUE_DX1,DX
        OL7:
        MOV VALUE_AX1,AX
        JMP DONE3
        
        
        SSP3:
        CMP Dest_Index,16
        JNE DONE3
        MOV CX,VALUE_SP1
        MOV AX,VALUE_AX1
        MUL CX
        AND DX,1111
        JZ OL8
        MOV VALUE_DX1,DX
        OL8:
        MOV VALUE_AX1,AX
        JMP DONE3
        
        DONE3:
        RET
     MUL_INST ENDP		                
XOR_INST PROC NEAR
        
       
          
          CMP INST_INDEX,9
           JNE TESTEE9  
         
            cmp dest_index,1
            jne XOR2
            
                    XOR11:
            
                        cmp source_index,1
                        jne XOR12
                        
                        mov ax,VALUE_AX1
                        XOR VALUE_AX1,ax
                        
                        
                    XOR12:
                        cmp source_index,2
                        jne XOR13
                        
                        mov ax,VALUE_BX1
                        XOR VALUE_AX1,ax
                        
                    XOR13:
                        cmp source_index,3
                        jne XOR14
                        
                        mov ax,VALUE_CX1
                        XOR VALUE_AX1,ax
                                   
                    XOR14:
                        cmp source_index,4
                        jne XOR15
                        
                        mov ax,VALUE_DX1
                        XOR VALUE_AX1,ax
                        
                    XOR15:
                        cmp source_index,13
                        jne XOR16
                        
                        mov ax,VALUE_SI1
                        XOR VALUE_AX1,ax
                        
                    XOR16:
                        cmp source_index,14
                        jne XOR17
                        
                        mov ax,VALUE_DI1
                        XOR VALUE_AX1,ax   
                        
                    XOR17:
                        cmp source_index,15
                        jne XOR18 
                        
                        mov ax,VALUE_SP1
                        XOR VALUE_AX1,ax
                        
                    XOR18:
                        cmp source_index,16
                        jne XOR19
                        
                        mov ax,VALUE_BP1
                        XOR VALUE_AX1,ax
                        
                    XOR19:
                        cmp source_index,21
                        jne XOR2
                        
                        mov ax,VALUE1
                        XOR VALUE_AX1,ax
                
               XOR2: 
                        
               cmp dest_index,2
               jne XOR3
               
               
              
                    XOR21:
            
                        cmp source_index,1
                        jne XOR22
                        
                        mov ax,VALUE_AX1
                        XOR VALUE_BX1,ax
                        
                        
                    XOR22:
                        cmp source_index,2
                        jne XOR23
                        
                        MOV ax,VALUE_BX1
                        XOR VALUE_BX1,ax
                        
                    XOR23:
                        cmp source_index,3
                        jne XOR24
                        
                        mov ax,VALUE_CX1
                        XOR VALUE_BX1,ax
                                   
                    XOR24:
                        cmp source_index,4
                        jne XOR25
                        
                        mov ax,VALUE_DX1
                        XOR Value_BX1,ax
                        
                    XOR25:
                        cmp source_index,13
                        jne XOR26
                        
                        mov ax,VALUE_SI1
                        XOR VALUE_BX1,ax
                        
                    XOR26:
                        cmp source_index,14
                        jne XOR27
                        
                        mov ax,VALUE_DI1
                        XOR VALUE_BX1,ax   
                        
                    XOR27:
                        cmp source_index,15
                        jne XOR28 
                        
                        mov ax,VALUE_SP1
                        XOR VALUE_BX1,ax
                        
                    XOR28:
                        cmp source_index,16
                        jne XOR29
                        
                        mov ax,VALUE_BP1
                        XOR VALUE_BX1,ax
                        
                    XOR29:
                        cmp source_index,21
                        jne XOR3
                        
                        mov ax,VALUE1
                        XOR VALUE_BX1,ax     
               
            XOR3:   
               cmp dest_index,3
               jne XOR4
            
                    XOR31:
            
                        cmp source_index,1
                        jne XOR32
                        
                        mov ax,VALUE_AX1
                        XOR VALUE_CX1,ax
                        
                        
                    XOR32:
                        cmp source_index,2
                        jne XOR33
                        
                        mov ax,VALUE_BX1
                        XOR VALUE_CX1,ax
                        
                    XOR33:
                        cmp source_index,3
                        jne XOR34
                        
                        mov ax,VALUE_CX1
                        XOR VALUE_CX1,ax
                                   
                    XOR34:
                        cmp source_index,4
                        jne XOR35
                        
                        mov ax,VALUE_DX1
                        XOR VALUE_CX1,ax
                        
                    XOR35:
                        cmp source_index,13
                        jne XOR36
                        
                        mov ax,VALUE_SI1
                        XOR VALUE_CX1,ax
                        
                    XOR36:
                        cmp source_index,14
                        jne XOR37
                        
                        mov ax,VALUE_DI1
                        XOR VALUE_CX1,ax   
                        
                    XOR37:
                        cmp source_index,15
                        jne XOR38 
                        
                        mov ax,VALUE_SP1
                        XOR VALUE_CX1,ax
                        
                    XOR38:
                        cmp source_index,16
                        jne XOR39
                        
                        mov ax,VALUE_BP1
                        XOR VALUE_CX1,ax
                        
                    XOR39:
                        cmp source_index,21
                        jne XOR4
                        
                        mov ax,VALUE1
                        XOR VALUE_CX1,ax
                        
             XOR4:   
               cmp dest_index,4
               jne XOR5
            
                    XOR41:
            
                        cmp source_index,1
                        jne XOR42
                        
                        mov ax,VALUE_AX1
                        XOR VALUE_DX1,ax
                        
                        
                    XOR42:
                        cmp source_index,2
                        jne XOR43
                        
                        mov ax,VALUE_BX1
                        XOR VALUE_DX1,ax
                        
                    XOR43:
                        cmp source_index,3
                        jne XOR44
                        
                        mov ax,VALUE_CX1
                        XOR VALUE_DX1,ax
                                   
                    XOR44:
                        cmp source_index,4
                        jne XOR45
                        
                        mov ax,VALUE_DX1
                        XOR VALUE_DX1,ax
                        
                    XOR45:
                        cmp source_index,13
                        jne XOR46
                        
                        mov ax,VALUE_SI1
                        XOR VALUE_DX1,ax
                        
                    XOR46:
                        cmp source_index,14
                        jne XOR47
                        
                        mov ax,VALUE_DI1
                        XOR VALUE_DX1,ax   
                        
                    XOR47:
                        cmp source_index,15
                        jne XOR48 
                        
                        mov ax,VALUE_SP1
                        XOR VALUE_DX1,ax
                        
                    XOR48:
                        cmp source_index,16
                        jne XOR49
                        
                        mov ax,VALUE_BP1
                        XOR VALUE_DX1,ax
                        
                    XOR49:
                        cmp source_index,21
                        jne XOR5
                        
                        mov ax,VALUE1
                        XOR VALUE_DX1,ax
                        
                        
              XOR5:   
               cmp dest_index,5
               jne XOR6
               
       
            XOR51:
                cmp source_index,5
                jne XOR52
                
                
                mov AX,VALUE_AX1
                SUB AH,AH
                mov BX,VALUE_AX1
                SUB BL,BL
                XOR VALUE_AX1,AX
                
            XOR52:
                cmp source_index,6
                jne XOR53
                
                mov AX,VALUE_BX1
                SUB AH,AH
                XOR VALUE_AX1,AX
            
            XOR53:
                cmp source_index,7
                jne XOR54
                
                mov AX,VALUE_CX1
                SUB AH,AH
                XOR VALUE_AX1,AX 
                
            XOR54:
                cmp source_index,8
                jne XOR55
                
                mov AX,VALUE_DX1
                SUB AH,AH
                XOR VALUE_AX1,AX
                
           XOR55:
                cmp source_index,9
                jne XOR56
                
                mov AX,VALUE_AX1
                SUB AL,AL
                SHR AX,8
                XOR VALUE_AX1,AX
                
            XOR56:
                cmp source_index,10
                jne XOR57
                
                mov AX,VALUE_BX1
                SUB AL,AL 
                SHR AX,8
                XOR VALUE_AX1,AX
            
            XOR57:
                cmp source_index,11
                jne XOR58
                
                mov AX,VALUE_CX1
                SUB AL,AL
                SHR AX,8
                XOR VALUE_AX1,AX 
                
            XOR58:
                cmp source_index,12
                jne XOR59
                
                mov AX,VALUE_DX1
                SUB AL,AL
                SHR AX,8
                XOR VALUE_AX1,AX
                
            XOR59:
                cmp source_index,21
                jne XOR6
                
                mov AX,VALUE1
                SUB AH,AH
                SHR AX,8
                
                XOR VALUE_AX1,AX    
                  
                
       XOR6:   
       cmp dest_index,6
       jne XOR7
       
            XOR61:
                cmp source_index,5
                jne XOR62
                
                
                mov AX,VALUE_AX1
                SUB AH,AH
                XOR VALUE_AX1,AX
                
            XOR62:
                cmp source_index,6
                jne XOR63
                
                mov AX,VALUE_BX1
                SUB AH,AH
                XOR VALUE_BX1,AX
            
            XOR63:
                cmp source_index,7
                jne XOR64
                
                mov AX,VALUE_CX1
                SUB AH,AH
                XOR VALUE_BX1,AX 
                
            XOR64:
                cmp source_index,8
                jne XOR65
                
                mov AX,VALUE_DX1
                SUB AH,AH
                XOR VALUE_BX1,AX
                
           XOR65:
                cmp source_index,9
                jne XOR66
                
                mov AX,VALUE_AX1
                SUB AL,AL
                SHR AX,8
                XOR VALUE_BX1,AX
                
            XOR66:
                cmp source_index,10
                jne XOR67
                
                mov AX,VALUE_BX1
                SUB AL,AL 
                SHR AX,8
                XOR VALUE_BX1,AX
            
            XOR67:
                cmp source_index,11
                jne XOR68
                
                mov AX,VALUE_CX1
                SUB AL,AL
                SHR AX,8
                XOR VALUE_BX1,AX 
                
            XOR68:
                cmp source_index,12
                jne XOR69
                
                mov AX,VALUE_DX1
                SUB AL,AL
                SHR AX,8
                XOR VALUE_BX1,AX
                
            XOR69:
                cmp source_index,21
                jne XOR7
                
                mov AX,VALUE1
                SUB AL,AL
                SHR AX,8
                
                XOR VALUE_BX1,AX      
                
                
                
       XOR7:   
       cmp dest_index,7
       jne XOR8
       
            XOR71:
                cmp source_index,5
                jne XOR72
                
                
                mov AX,VALUE_AX1
                SUB AH,AH
                XOR VALUE_CX1,AX
                
            XOR72:
                cmp source_index,6
                jne XOR73
                
                mov AX,VALUE_BX1
                SUB AH,AH
                XOR VALUE_CX1,AX
            
            XOR73:
                cmp source_index,7
                jne XOR74
                
                mov AX,VALUE_CX1
                SUB AH,AH
                XOR VALUE_CX1,AX 
                
            XOR74:
                cmp source_index,8
                jne XOR75
                
                mov AX,VALUE_DX1
                SUB AH,AH
                XOR VALUE_CX1,AX
                
           XOR75:
                cmp source_index,9
                jne XOR76
                
                mov AX,VALUE_AX1
                SUB AL,AL
                SHR AX,8
                XOR VALUE_CX1,AX
                
            XOR76:
                cmp source_index,10
                jne XOR77
                
                mov AX,VALUE_BX1
                SUB AL,AL 
                SHR AX,8
                XOR VALUE_CX1,AX
            
            XOR77:
                cmp source_index,11
                jne XOR78
                
                mov AX,VALUE_CX1
                SUB AL,AL
                SHR AX,8
                XOR VALUE_CX1,AX 
                
            XOR78:
                cmp source_index,12
                jne XOR79
                
                mov AX,VALUE_DX1
                SUB AL,AL
                SHR AX,8
                XOR VALUE_CX1,AX 
                
            XOR79:
                cmp source_index,21
                jne XOR8
                
                mov AX,VALUE1
                SUB AL,AL
                SHR AX,8
                
                XOR VALUE_CX1,AX
                           
                
      XOR8:   
       cmp dest_index,8
       jne XOR9
       
             XOR81:
                cmp source_index,5
                jne XOR82
                       
                
                mov AX,VALUE_AX1
                SUB AH,AH
                XOR VALUE_DX1,AX
                
            XOR82:
                cmp source_index,6
                jne XOR83
                       
                mov AX,VALUE_BX1
                SUB AH,AH
                XOR VALUE_DX1,AX
            
            XOR83:
                cmp source_index,7
                jne XOR84
                
                mov AX,VALUE_CX1
                SUB AH,AH
                XOR VALUE_DX1,AX 
                
            XOR84:
                cmp source_index,8
                jne XOR85
                
                mov AX,VALUE_DX1
                SUB AH,AH
                XOR VALUE_DX1,AX
                
            XOR85:
                cmp source_index,9
                jne XOR86
                
                mov AX,VALUE_AX1
                SUB AL,AL
                SHR AX,8
                XOR VALUE_DX1,AX
                
            XOR86:
                cmp source_index,10
                jne XOR87
                
                mov AX,VALUE_BX1
                SUB AL,AL 
                SHR AX,8
                XOR VALUE_DX1,AX
            
            XOR87:
                cmp source_index,11
                jne XOR88
                
                mov AX,VALUE_CX1
                SUB AL,AL
                SHR AX,8
                XOR VALUE_DX1,AX 
                
            XOR88:
                cmp source_index,12
                jne XOR89
                
                mov AX,VALUE_DX1
                SUB AL,AL
                SHR AX,8
                XOR VALUE_DX1,AX 
                
                
            XOR89:
                cmp source_index,21
                jne XOR9
                
                mov AX,VALUE1
                SUB AL,AL
                SHR AX,8
                
                XOR VALUE_DX1,AX
      
      
      XOR9:   
       cmp dest_index,9
       jne XOR10
       
             XOR91:
                cmp source_index,5
                jne XOR92
                       
                
                mov AX,VALUE_AX1
                SUB AH,AH
                SHL AX,8
                XOR VALUE_AX1,AX
                
            XOR92:
                cmp source_index,6
                jne XOR93
                       
                mov AX,VALUE_BX1
                SUB AH,AH
                SHL AX,8
                XOR VALUE_AX1,AX
            
            XOR93:
                cmp source_index,7
                jne XOR94
                
                mov AX,VALUE_CX1
                SUB AH,AH
                SHL AX,8
                XOR VALUE_AX1,AX 
                
            XOR94:
                cmp source_index,8
                jne XOR95
                
                mov AX,VALUE_DX1
                SUB AH,AH
                SHL AX,8
                XOR VALUE_AX1,AX
                
           XOR95:
                cmp source_index,9
                jne XOR96
                
                mov AX,VALUE_AX1
                SUB AL,AL
                XOR VALUE_AX1,AX
                
            XOR96:
                cmp source_index,10
                jne XOR97
                
                mov AX,VALUE_BX1
                SUB AL,AL
                XOR VALUE_AX1,AX
            
            XOR97:
                cmp source_index,11
                jne XOR98
                
                mov AX,VALUE_CX1
                SUB AL,AL
                XOR VALUE_AX1,AX 
                
            XOR98:
                cmp source_index,12
                jne XOR99
                
                mov AX,VALUE_DX1
                SUB AL,AL
                XOR VALUE_AX1,AX
                
            XOR99:
                cmp source_index,21
                jne XOR10
                
                mov AX,VALUE1
                XOR VALUE_AX1,AX 
                
                    
      
      
      XOR10:   
       cmp dest_index,10
       jne XORD11
       
            XOR101:
                cmp source_index,5
                jne XOR102
                       
                
                mov AX,VALUE_AX1
                SUB AH,AH
                SHL AX,8
                XOR VALUE_BX1,AX
                
            XOR102:
                cmp source_index,6
                jne XOR103
                       
                mov AX,VALUE_BX1
                SUB AH,AH
                SHL AX,8
                XOR VALUE_BX1,AX
            
            XOR103:
                cmp source_index,7
                jne XOR104
                
                mov AX,VALUE_CX1
                SUB AH,AH
                SHL AX,8
                XOR VALUE_BX1,AX 
                
            XOR104:
                cmp source_index,8
                jne XOR105
                
                mov AX,VALUE_DX1
                SUB AH,AH
                SHL AX,8
                XOR VALUE_BX1,AX
                
           XOR105:
                cmp source_index,9
                jne XOR106
                
                mov AX,VALUE_AX1
                SUB AL,AL
                XOR VALUE_BX1,AX
                
            XOR106:
                cmp source_index,10
                jne XOR107
                
                mov AX,VALUE_BX1
                SUB AL,AL
                XOR VALUE_BX1,AX
            
            XOR107:
                cmp source_index,11
                jne XOR108
                
                mov AX,VALUE_CX1
                SUB AL,AL
                XOR VALUE_BX1,AX 
                
            XOR108:
                cmp source_index,12
                jne XOR109
                
                mov AX,VALUE_DX1
                SUB AL,AL
                XOR VALUE_BX1,AX 
            
            XOR109:
                cmp source_index,21
                jne XORD11
                
                mov AX,VALUE1
                XOR VALUE_BX1,AX             
      
      
      XORD11:   
       cmp dest_index,11
       jne XORD12
       
             XOR111:
                cmp source_index,5
                jne XOR112
                       
                
                mov AX,VALUE_AX1
                SUB AH,AH
                SHL AX,8
                XOR VALUE_CX1,AX
                
            XOR112:
                cmp source_index,6
                jne XOR113
                       
                mov AX,VALUE_BX1
                SUB AH,AH
                SHL AX,8
                XOR VALUE_CX1,AX
            
            XOR113:
                cmp source_index,7
                jne XOR114
                
                mov AX,VALUE_CX1
                SUB AH,AH
                SHL AX,8
                XOR VALUE_CX1,AX 
                
           XOR114:
                cmp source_index,8
                jne XOR115
                
                mov AX,VALUE_DX1
                SUB AH,AH
                SHL AX,8
                XOR VALUE_CX1,AX
                
           XOR115:
                cmp source_index,9
                jne XOR116
                
                mov AX,VALUE_AX1
                SUB AL,AL
                XOR VALUE_CX1,AX
                
            XOR116:
                cmp source_index,10
                jne XOR117
                
                mov AX,VALUE_BX1
                SUB AL,AL
                XOR VALUE_CX1,AX
            
            XOR117:
                cmp source_index,11
                jne XOR118
                
                mov AX,VALUE_CX1
                SUB AL,AL
                XOR VALUE_CX1,AX 
                
            XOR118:
                cmp source_index,12
                jne XOR119
                
                mov AX,VALUE_DX1
                SUB AL,AL
                XOR VALUE_CX1,AX
                
            XOR119:
                cmp source_index,21
                jne XORD12
                
                mov AX,VALUE1
                XOR VALUE_CX1,AX 
                
                    
      
      
      XORD12:   
       cmp dest_index,12
       jne XORD13
       
             XOR121:
                cmp source_index,5
                jne XOR122
                       
                
                mov AX,VALUE_AX1
                SUB AH,AH
                SHL AX,8
                XOR VALUE_DX1,AX
                
            XOR122:
                cmp source_index,6
                jne XOR123
                       
                mov AX,VALUE_BX1
                SUB AH,AH
                SHL AX,8
                XOR VALUE_DX1,AX
            
            XOR123:
                cmp source_index,7
                jne XOR124
                
                mov AX,VALUE_CX1
                SUB AH,AH
                SHL AX,8
                XOR VALUE_DX1,AX 
                
            XOR124:
                cmp source_index,8
                jne XOR125
                
                mov AX,VALUE_DX1
                SUB AH,AH
                SHL AX,8
                XOR VALUE_DX1,AX
                
           XOR125:
                cmp source_index,9
                jne XOR126
                
                mov AX,VALUE_AX1
                SUB AL,AL
                XOR VALUE_DX1,AX
                
           XOR126:
                cmp source_index,10
                jne XOR127
                
                mov AX,VALUE_BX1
                SUB AL,AL
                XOR VALUE_DX1,AX
            
            XOR127:
                cmp source_index,11
                jne XOR128
                
                mov AX,VALUE_CX1
                SUB AL,AL
                XOR VALUE_DX1,AX 
                
            XOR128:
                cmp source_index,12
                jne XOR129
                
                mov AX,VALUE_DX1
                SUB AL,AL
                XOR VALUE_DX1,AX     
            
            XOR129:
                cmp source_index,21
                jne XORD13
                
                mov AX,VALUE1
                XOR VALUE_DX1,AX
                
    XORD13:             
    cmp dest_index,13
    jne XORD14
    
            XOR131:
    
                cmp source_index,1
                jne XOR132
                
                mov ax,VALUE_AX1
                XOR VALUE_SI1,ax
                
                
            XOR132:
                cmp source_index,2
                jne XOR133
                
                mov ax,VALUE_BX1
                XOR VALUE_SI1,ax
                
            XOR133:
                cmp source_index,3
                jne XOR134
                
                mov ax,VALUE_CX1
                XOR VALUE_SI1,ax
                           
            XOR134:
                cmp source_index,4
                jne XOR135
                
                mov ax,VALUE_DX1
                XOR VALUE_SI1,ax
                
            XOR135:
                cmp source_index,13
                jne XOR136
                
                mov ax,VALUE_SI1
                XOR VALUE_SI1,ax
                
            XOR136:
                cmp source_index,14
                jne XOR137
                
                mov ax,VALUE_DI1
                XOR VALUE_SI1,ax   
                
            XOR137:
                cmp source_index,15
                jne XOR138 
                
                mov ax,VALUE_BP1
                XOR VALUE_SI1,ax
                
            XOR138:
                cmp source_index,16
                jne XOR139
                
                mov ax,VALUE_SP1
                XOR VALUE_SI1,ax
                
            XOR139:
                cmp source_index,21
                jne XOR14
                
                mov ax,VALUE1
                XOR VALUE_SI1,ax
        
       XORD14: 
                
       cmp dest_index,14
       jne XORD15
       
       
      
            XOR141:
    
                cmp source_index,1
                jne XOR142
                
                mov ax,VALUE_AX1
                XOR VALUE_DI1,ax
                
                
            XOR142:
                cmp source_index,2
                jne XOR143
                
                MOV ax,VALUE_BX1
                XOR VALUE_DI1,ax
                
            XOR143:
                cmp source_index,3
                jne XOR144
                
                mov ax,VALUE_CX1
                XOR VALUE_DI1,ax
                           
            XOR144:
                cmp source_index,4
                jne XOR145
                
                mov ax,VALUE_DX1
                XOR VALUE_DI1,ax
                
            XOR145:
                cmp source_index,13
                jne XOR146
                
                mov ax,VALUE_SI1
                XOR VALUE_DI1,ax
                
            XOR146:
                cmp source_index,14
                jne XOR147
                
                mov ax,VALUE_DI1
                XOR VALUE_DI1,ax   
                
            XOR147:
                cmp source_index,15
                jne XOR148 
                
                mov ax,VALUE_BP1
                XOR VALUE_DI1,ax
                
            XOR148:
                cmp source_index,16
                jne XOR149
                
                mov ax,VALUE_SP1
                XOR VALUE_DI1,ax
                
            XOR149:
                cmp source_index,21
                jne XORD15
                
                mov ax,VALUE1
                XOR VALUE_DI1,ax     
       
    XORD15:   
       cmp dest_index,15
       jne XORD16
    
            XOR151:
    
                cmp source_index,1
                jne XOR152
                
                mov ax,VALUE_AX1
                XOR VALUE_BP1,ax
                
                
            XOR152:
                cmp source_index,2
                jne XOR153
                
                mov ax,VALUE_BX1
                XOR VALUE_BP1,ax
                
            XOR153:
                cmp source_index,3
                jne XOR154
                
                mov ax,VALUE_CX1
                XOR VALUE_BP1,ax
                           
            XOR154:
                cmp source_index,4
                jne XOR155
                
                mov ax,VALUE_DX1
                XOR VALUE_BP1,ax
                
            XOR155:
                cmp source_index,13
                jne XOR156
                
                mov ax,VALUE_SI1
                XOR VALUE_BP1,ax
                
            XOR156:
                cmp source_index,14
                jne XOR157
                
                mov ax,VALUE_DI1
                XOR VALUE_BP1,ax   
                
            XOR157:
                cmp source_index,15
                jne XOR158 
                
                mov ax,VALUE_BP1
                XOR VALUE_BP1,ax
                
            XOR158:
                cmp source_index,16
                jne XOR159
                
                mov ax,VALUE_SP1
                XOR VALUE_BP1,ax
                
            XOR159:
                cmp source_index,21
                jne XORD16
                
                mov ax,VALUE1
                XOR VALUE_BP1,ax
                
     XORD16:   
       cmp dest_index,16
       jne TESTEE9
    
            XOR161:
    
                cmp source_index,1
                jne XOR162
                
                mov ax,VALUE_AX1
                XOR VALUE_SP1,ax
                
                
            XOR162:
                cmp source_index,2
                jne XOR163
                
                mov ax,VALUE_BX1
                XOR VALUE_SP1,ax
                
            XOR163:
                cmp source_index,3
                jne XOR164
                
                mov ax,VALUE_CX1
                XOR VALUE_SP1,ax
                           
            XOR164:
                cmp source_index,4
                jne XOR165
                
                mov ax,VALUE_DX1
                XOR VALUE_SP1,ax
                
            XOR165:
                cmp source_index,13
                jne XOR166
                
                mov ax,VALUE_SI1
                XOR VALUE_SP1,ax
                
            XOR166:
                cmp source_index,14
                jne XOR167
                
                mov ax,VALUE_DI1
                XOR VALUE_SP1,ax   
                
            XOR167:
                cmp source_index,15
                jne XOR168 
                
                mov ax,VALUE_BP1
                XOR VALUE_SP1,ax
                
            XOR168:
                cmp source_index,16
                jne XOR169
                
                mov ax,VALUE_SP1
                XOR VALUE_SP1,ax
                
            XOR169:
                cmp source_index,21
                jne TESTEE9
                
                mov ax,VALUE1
                XOR VALUE_SP1,ax               
                        
                        
             TESTEE9: 
                        
              
        
        
        
        
        
        
        RET
        XOR_INST ENDP                 
OR_INST PROC NEAR
        
       
          
          CMP INST_INDEX,10
           JNE TESTEE10  
         
            cmp dest_index,1
            jne OR2
            
                    OR11:
            
                        cmp source_index,1
                        jne OR12
                        
                        mov ax,VALUE_AX1
                        OR VALUE_AX1,ax
                        
                        
                    OR12:
                        cmp source_index,2
                        jne OR13
                        
                        mov ax,VALUE_BX1
                        OR VALUE_AX1,ax
                        
                    OR13:
                        cmp source_index,3
                        jne OR14
                        
                        mov ax,VALUE_CX1
                        OR VALUE_AX1,ax
                                   
                    OR14:
                        cmp source_index,4
                        jne OR15
                        
                        mov ax,VALUE_DX1
                        OR VALUE_AX1,ax
                        
                    OR15:
                        cmp source_index,13
                        jne OR16
                        
                        mov ax,VALUE_SI1
                        OR VALUE_AX1,ax
                        
                    OR16:
                        cmp source_index,14
                        jne OR17
                        
                        mov ax,VALUE_DI1
                        OR VALUE_AX1,ax   
                        
                    OR17:
                        cmp source_index,15
                        jne OR18 
                        
                        mov ax,VALUE_SP1
                        OR VALUE_AX1,ax
                        
                    OR18:
                        cmp source_index,16
                        jne OR19
                        
                        mov ax,VALUE_BP1
                        OR VALUE_AX1,ax
                        
                    OR19:
                        cmp source_index,21
                        jne OR2
                        
                        mov ax,VALUE1
                        OR VALUE_AX1,ax
                
               OR2: 
                        
               cmp dest_index,2
               jne OR3
               
               
              
                    OR21:
            
                        cmp source_index,1
                        jne OR22
                        
                        mov ax,VALUE_AX1
                        OR VALUE_BX1,ax
                        
                        
                    OR22:
                        cmp source_index,2
                        jne OR23
                        
                        MOV ax,VALUE_BX1
                        OR VALUE_BX1,ax
                        
                    OR23:
                        cmp source_index,3
                        jne OR24
                        
                        mov ax,VALUE_CX1
                        OR VALUE_BX1,ax
                                   
                    OR24:
                        cmp source_index,4
                        jne OR25
                        
                        mov ax,VALUE_DX1
                        OR Value_BX1,ax
                        
                    OR25:
                        cmp source_index,13
                        jne OR26
                        
                        mov ax,VALUE_SI1
                        OR VALUE_BX1,ax
                        
                    OR26:
                        cmp source_index,14
                        jne OR27
                        
                        mov ax,VALUE_DI1
                        OR VALUE_BX1,ax   
                        
                    OR27:
                        cmp source_index,15
                        jne OR28 
                        
                        mov ax,VALUE_SP1
                        OR VALUE_BX1,ax
                        
                    OR28:
                        cmp source_index,16
                        jne OR29
                        
                        mov ax,VALUE_BP1
                        OR VALUE_BX1,ax
                        
                    OR29:
                        cmp source_index,21
                        jne OR3
                        
                        mov ax,VALUE1
                        OR VALUE_BX1,ax     
               
            OR3:   
               cmp dest_index,3
               jne OR4
            
                    OR31:
            
                        cmp source_index,1
                        jne OR32
                        
                        mov ax,VALUE_AX1
                        OR VALUE_CX1,ax
                        
                        
                    OR32:
                        cmp source_index,2
                        jne OR33
                        
                        mov ax,VALUE_BX1
                        OR VALUE_CX1,ax
                        
                    OR33:
                        cmp source_index,3
                        jne OR34
                        
                        mov ax,VALUE_CX1
                        OR VALUE_CX1,ax
                                   
                    OR34:
                        cmp source_index,4
                        jne OR35
                        
                        mov ax,VALUE_DX1
                        OR VALUE_CX1,ax
                        
                    OR35:
                        cmp source_index,13
                        jne OR36
                        
                        mov ax,VALUE_SI1
                        OR VALUE_CX1,ax
                        
                    OR36:
                        cmp source_index,14
                        jne OR37
                        
                        mov ax,VALUE_DI1
                        OR VALUE_CX1,ax   
                        
                    OR37:
                        cmp source_index,15
                        jne OR38 
                        
                        mov ax,VALUE_SP1
                        OR VALUE_CX1,ax
                        
                    OR38:
                        cmp source_index,16
                        jne OR39
                        
                        mov ax,VALUE_BP1
                        OR VALUE_CX1,ax
                        
                    OR39:
                        cmp source_index,21
                        jne OR4
                        
                        mov ax,VALUE1
                        OR VALUE_CX1,ax
                        
             OR4:   
               cmp dest_index,4
               jne OR5
            
                    OR41:
            
                        cmp source_index,1
                        jne OR42
                        
                        mov ax,VALUE_AX1
                        OR VALUE_DX1,ax
                        
                        
                    OR42:
                        cmp source_index,2
                        jne OR43
                        
                        mov ax,VALUE_BX1
                        OR VALUE_DX1,ax
                        
                    OR43:
                        cmp source_index,3
                        jne OR44
                        
                        mov ax,VALUE_CX1
                        OR VALUE_DX1,ax
                                   
                    OR44:
                        cmp source_index,4
                        jne OR45
                        
                        mov ax,VALUE_DX1
                        OR VALUE_DX1,ax
                        
                    OR45:
                        cmp source_index,13
                        jne OR46
                        
                        mov ax,VALUE_SI1
                        OR VALUE_DX1,ax
                        
                    OR46:
                        cmp source_index,14
                        jne OR47
                        
                        mov ax,VALUE_DI1
                        OR VALUE_DX1,ax   
                        
                    OR47:
                        cmp source_index,15
                        jne OR48 
                        
                        mov ax,VALUE_SP1
                        OR VALUE_DX1,ax
                        
                    OR48:
                        cmp source_index,16
                        jne OR49
                        
                        mov ax,VALUE_BP1
                        OR VALUE_DX1,ax
                        
                    OR49:
                        cmp source_index,21
                        jne OR5
                        
                        mov ax,VALUE1
                        OR VALUE_DX1,ax
                        
                        
              OR5:   
               cmp dest_index,5
               jne OR6
               
       
            OR51:
                cmp source_index,5
                jne OR52
                
                
                mov AX,VALUE_AX1
                SUB AH,AH
                OR VALUE_AX1,AX
                
            OR52:
                cmp source_index,6
                jne OR53
                
                mov AX,VALUE_BX1
                SUB AH,AH
                OR VALUE_AX1,AX
            
            OR53:
                cmp source_index,7
                jne OR54
                
                mov AX,VALUE_CX1
                SUB AH,AH
                OR VALUE_AX1,AX 
                
            OR54:
                cmp source_index,8
                jne OR55
                
                mov AX,VALUE_DX1
                SUB AH,AH
                OR VALUE_AX1,AX
                
           OR55:
                cmp source_index,9
                jne OR56
                
                mov AX,VALUE_AX1
                SUB AL,AL
                SHR AX,8
                OR VALUE_AX1,AX
                
            OR56:
                cmp source_index,10
                jne OR57
                
                mov AX,VALUE_BX1
                SUB AL,AL 
                SHR AX,8
                OR VALUE_AX1,AX
            
            OR57:
                cmp source_index,11
                jne OR58
                
                mov AX,VALUE_CX1
                SUB AL,AL
                SHR AX,8
                OR VALUE_AX1,AX 
                
            OR58:
                cmp source_index,12
                jne OR59
                
                mov AX,VALUE_DX1
                SUB AL,AL
                SHR AX,8
                OR VALUE_AX1,AX
                
            OR59:
                cmp source_index,21
                jne OR6
                
                mov AX,VALUE1
                SUB AL,AL
                SHR AX,8
                
                OR VALUE_AX1,AX    
                  
                
       OR6:   
       cmp dest_index,6
       jne OR7
       
            OR61:
                cmp source_index,5
                jne OR62
                
                
                mov AX,VALUE_AX1
                SUB AH,AH
                OR VALUE_AX1,AX
                
            OR62:
                cmp source_index,6
                jne OR63
                
                mov AX,VALUE_BX1
                SUB AH,AH
                OR VALUE_BX1,AX
            
            OR63:
                cmp source_index,7
                jne OR64
                
                mov AX,VALUE_CX1
                SUB AH,AH
                OR VALUE_BX1,AX 
                
            OR64:
                cmp source_index,8
                jne OR65
                
                mov AX,VALUE_DX1
                SUB AH,AH
                OR VALUE_BX1,AX
                
           OR65:
                cmp source_index,9
                jne OR66
                
                mov AX,VALUE_AX1
                SUB AL,AL
                SHR AX,8
                OR VALUE_BX1,AX
                
            OR66:
                cmp source_index,10
                jne OR67
                
                mov AX,VALUE_BX1
                SUB AL,AL 
                SHR AX,8
                OR VALUE_BX1,AX
            
            OR67:
                cmp source_index,11
                jne OR68
                
                mov AX,VALUE_CX1
                SUB AL,AL
                SHR AX,8
                OR VALUE_BX1,AX 
                
            OR68:
                cmp source_index,12
                jne OR69
                
                mov AX,VALUE_DX1
                SUB AL,AL
                SHR AX,8
                OR VALUE_BX1,AX
                
            OR69:
                cmp source_index,21
                jne OR7
                
                mov AX,VALUE1
                SUB AL,AL
                SHR AX,8
                
                OR VALUE_BX1,AX      
                
                
                
       OR7:   
       cmp dest_index,7
       jne OR8
       
            OR71:
                cmp source_index,5
                jne OR72
                
                
                mov AX,VALUE_AX1
                SUB AH,AH
                OR VALUE_CX1,AX
                
            OR72:
                cmp source_index,6
                jne OR73
                
                mov AX,VALUE_BX1
                SUB AH,AH
                OR VALUE_CX1,AX
            
            OR73:
                cmp source_index,7
                jne OR74
                
                mov AX,VALUE_CX1
                SUB AH,AH
                OR VALUE_CX1,AX 
                
            OR74:
                cmp source_index,8
                jne OR75
                
                mov AX,VALUE_DX1
                SUB AH,AH
                OR VALUE_CX1,AX
                
           OR75:
                cmp source_index,9
                jne OR76
                
                mov AX,VALUE_AX1
                SUB AL,AL
                SHR AX,8
                OR VALUE_CX1,AX
                
            OR76:
                cmp source_index,10
                jne OR77
                
                mov AX,VALUE_BX1
                SUB AL,AL 
                SHR AX,8
                OR VALUE_CX1,AX
            
            OR77:
                cmp source_index,11
                jne OR78
                
                mov AX,VALUE_CX1
                SUB AL,AL
                SHR AX,8
                OR VALUE_CX1,AX 
                
            OR78:
                cmp source_index,12
                jne OR79
                
                mov AX,VALUE_DX1
                SUB AL,AL
                SHR AX,8
                OR VALUE_CX1,AX 
                
            OR79:
                cmp source_index,21
                jne OR8
                
                mov AX,VALUE1
                SUB AL,AL
                SHR AX,8
                
                OR VALUE_CX1,AX
                           
                
      OR8:   
       cmp dest_index,8
       jne OR9
       
             OR81:
                cmp source_index,5
                jne OR82
                       
                
                mov AX,VALUE_AX1
                SUB AH,AH
                OR VALUE_DX1,AX
                
            OR82:
                cmp source_index,6
                jne OR83
                       
                mov AX,VALUE_BX1
                SUB AH,AH
                OR VALUE_DX1,AX
            
            OR83:
                cmp source_index,7
                jne OR84
                
                mov AX,VALUE_CX1
                SUB AH,AH
                OR VALUE_DX1,AX 
                
            OR84:
                cmp source_index,8
                jne OR85
                
                mov AX,VALUE_DX1
                SUB AH,AH
                OR VALUE_DX1,AX
                
            OR85:
                cmp source_index,9
                jne OR86
                
                mov AX,VALUE_AX1
                SUB AL,AL
                SHR AX,8
                OR VALUE_DX1,AX
                
            OR86:
                cmp source_index,10
                jne OR87
                
                mov AX,VALUE_BX1
                SUB AL,AL 
                SHR AX,8
                OR VALUE_DX1,AX
            
            OR87:
                cmp source_index,11
                jne OR88
                
                mov AX,VALUE_CX1
                SUB AL,AL
                SHR AX,8
                OR VALUE_DX1,AX 
                
            OR88:
                cmp source_index,12
                jne OR89
                
                mov AX,VALUE_DX1
                SUB AL,AL
                SHR AX,8
                OR VALUE_DX1,AX 
                
                
            OR89:
                cmp source_index,21
                jne OR9
                
                mov AX,VALUE1
                SUB AL,AL
                SHR AX,8
                
                OR VALUE_DX1,AX
      
      
      OR9:   
       cmp dest_index,9
       jne OR10
       
             OR91:
                cmp source_index,5
                jne OR92
                       
                
                mov AX,VALUE_AX1
                SUB AH,AH
                SHL AX,8
                OR VALUE_AX1,AX
                
            OR92:
                cmp source_index,6
                jne OR93
                       
                mov AX,VALUE_BX1
                SUB AH,AH
                SHL AX,8
                OR VALUE_AX1,AX
            
            OR93:
                cmp source_index,7
                jne OR94
                
                mov AX,VALUE_CX1
                SUB AH,AH
                SHL AX,8
                OR VALUE_AX1,AX 
                
            OR94:
                cmp source_index,8
                jne OR95
                
                mov AX,VALUE_DX1
                SUB AH,AH
                SHL AX,8
                OR VALUE_AX1,AX
                
           OR95:
                cmp source_index,9
                jne OR96
                
                mov AX,VALUE_AX1
                SUB AL,AL
                OR VALUE_AX1,AX
                
            OR96:
                cmp source_index,10
                jne OR97
                
                mov AX,VALUE_BX1
                SUB AL,AL
                OR VALUE_AX1,AX
            
            OR97:
                cmp source_index,11
                jne OR98
                
                mov AX,VALUE_CX1
                SUB AL,AL
                OR VALUE_AX1,AX 
                
            OR98:
                cmp source_index,12
                jne OR99
                
                mov AX,VALUE_DX1
                SUB AL,AL
                OR VALUE_AX1,AX
                
            OR99:
                cmp source_index,21
                jne OR10
                
                mov AX,VALUE1
                OR VALUE_AX1,AX 
                
                    
      
      
      OR10:   
       cmp dest_index,10
       jne ORD11
       
            OR101:
                cmp source_index,5
                jne OR102
                       
                
                mov AX,VALUE_AX1
                SUB AH,AH
                SHL AX,8
                OR VALUE_BX1,AX
                
            OR102:
                cmp source_index,6
                jne OR103
                       
                mov AX,VALUE_BX1
                SUB AH,AH
                SHL AX,8
                OR VALUE_BX1,AX
            
            OR103:
                cmp source_index,7
                jne OR104
                
                mov AX,VALUE_CX1
                SUB AH,AH
                SHL AX,8
                OR VALUE_BX1,AX 
                
            OR104:
                cmp source_index,8
                jne OR105
                
                mov AX,VALUE_DX1
                SUB AH,AH
                SHL AX,8
                OR VALUE_BX1,AX
                
           OR105:
                cmp source_index,9
                jne OR106
                
                mov AX,VALUE_AX1
                SUB AL,AL
                OR VALUE_BX1,AX
                
            OR106:
                cmp source_index,10
                jne OR107
                
                mov AX,VALUE_BX1
                SUB AL,AL
                OR VALUE_BX1,AX
            
            OR107:
                cmp source_index,11
                jne OR108
                
                mov AX,VALUE_CX1
                SUB AL,AL
                OR VALUE_BX1,AX 
                
            OR108:
                cmp source_index,12
                jne OR109
                
                mov AX,VALUE_DX1
                SUB AL,AL
                OR VALUE_BX1,AX 
            
            OR109:
                cmp source_index,21
                jne ORD11
                
                mov AX,VALUE1
                OR VALUE_BX1,AX             
      
      
      ORD11:   
       cmp dest_index,11
       jne ORD12
       
             OR111:
                cmp source_index,5
                jne OR112
                       
                
                mov AX,VALUE_AX1
                SUB AH,AH
                SHL AX,8
                OR VALUE_CX1,AX
                
            OR112:
                cmp source_index,6
                jne OR113
                       
                mov AX,VALUE_BX1
                SUB AH,AH
                SHL AX,8
                OR VALUE_CX1,AX
            
            OR113:
                cmp source_index,7
                jne OR114
                
                mov AX,VALUE_CX1
                SUB AH,AH
                SHL AX,8
                OR VALUE_CX1,AX 
                
           OR114:
                cmp source_index,8
                jne OR115
                
                mov AX,VALUE_DX1
                SUB AH,AH
                SHL AX,8
                OR VALUE_CX1,AX
                
           OR115:
                cmp source_index,9
                jne OR116
                
                mov AX,VALUE_AX1
                SUB AL,AL
                OR VALUE_CX1,AX
                
            OR116:
                cmp source_index,10
                jne OR117
                
                mov AX,VALUE_BX1
                SUB AL,AL
                OR VALUE_CX1,AX
            
            OR117:
                cmp source_index,11
                jne OR118
                
                mov AX,VALUE_CX1
                SUB AL,AL
                OR VALUE_CX1,AX 
                
            OR118:
                cmp source_index,12
                jne OR119
                
                mov AX,VALUE_DX1
                SUB AL,AL
                OR VALUE_CX1,AX
                
            OR119:
                cmp source_index,21
                jne ORD12
                
                mov AX,VALUE1
                OR VALUE_CX1,AX 
                
                    
      
      
      ORD12:   
       cmp dest_index,12
       jne ORD13
       
             OR121:
                cmp source_index,5
                jne OR122
                       
                
                mov AX,VALUE_AX1
                SUB AH,AH
                SHL AX,8
                OR VALUE_DX1,AX
                
            OR122:
                cmp source_index,6
                jne OR123
                       
                mov AX,VALUE_BX1
                SUB AH,AH
                SHL AX,8
                OR VALUE_DX1,AX
            
            OR123:
                cmp source_index,7
                jne OR124
                
                mov AX,VALUE_CX1
                SUB AH,AH
                SHL AX,8
                OR VALUE_DX1,AX 
                
            OR124:
                cmp source_index,8
                jne OR125
                
                mov AX,VALUE_DX1
                SUB AH,AH
                SHL AX,8
                OR VALUE_DX1,AX
                
           OR125:
                cmp source_index,9
                jne OR126
                
                mov AX,VALUE_AX1
                SUB AL,AL
                OR VALUE_DX1,AX
                
           OR126:
                cmp source_index,10
                jne OR127
                
                mov AX,VALUE_BX1
                SUB AL,AL
                OR VALUE_DX1,AX
            
            OR127:
                cmp source_index,11
                jne OR128
                
                mov AX,VALUE_CX1
                SUB AL,AL
                OR VALUE_DX1,AX 
                
            OR128:
                cmp source_index,12
                jne OR129
                
                mov AX,VALUE_DX1
                SUB AL,AL
                OR VALUE_DX1,AX     
            
            OR129:
                cmp source_index,21
                jne ORD13
                
                mov AX,VALUE1
                OR VALUE_DX1,AX
                
    ORD13:             
    cmp dest_index,13
    jne ORD14
    
            OR131:
    
                cmp source_index,1
                jne OR132
                
                mov ax,VALUE_AX1
                OR VALUE_SI1,ax
                
                
            OR132:
                cmp source_index,2
                jne OR133
                
                mov ax,VALUE_BX1
                OR VALUE_SI1,ax
                
            OR133:
                cmp source_index,3
                jne OR134
                
                mov ax,VALUE_CX1
                OR VALUE_SI1,ax
                           
            OR134:
                cmp source_index,4
                jne OR135
                
                mov ax,VALUE_DX1
                OR VALUE_SI1,ax
                
            OR135:
                cmp source_index,13
                jne OR136
                
                mov ax,VALUE_SI1
                OR VALUE_SI1,ax
                
            OR136:
                cmp source_index,14
                jne OR137
                
                mov ax,VALUE_DI1
                OR VALUE_SI1,ax   
                
            OR137:
                cmp source_index,15
                jne OR138 
                
                mov ax,VALUE_BP1
                OR VALUE_SI1,ax
                
            OR138:
                cmp source_index,16
                jne OR139
                
                mov ax,VALUE_SP1
                OR VALUE_SI1,ax
                
            OR139:
                cmp source_index,21
                jne OR14
                
                mov ax,VALUE1
                OR VALUE_SI1,ax
        
       ORD14: 
                
       cmp dest_index,14
       jne ORD15
       
       
      
            OR141:
    
                cmp source_index,1
                jne OR142
                
                mov ax,VALUE_AX1
                OR VALUE_DI1,ax
                
                
            OR142:
                cmp source_index,2
                jne OR143
                
                MOV ax,VALUE_BX1
                OR VALUE_DI1,ax
                
            OR143:
                cmp source_index,3
                jne OR144
                
                mov ax,VALUE_CX1
                OR VALUE_DI1,ax
                           
            OR144:
                cmp source_index,4
                jne OR145
                
                mov ax,VALUE_DX1
                OR VALUE_DI1,ax
                
            OR145:
                cmp source_index,13
                jne OR146
                
                mov ax,VALUE_SI1
                OR VALUE_DI1,ax
                
            OR146:
                cmp source_index,14
                jne OR147
                
                mov ax,VALUE_DI1
                OR VALUE_DI1,ax   
                
            OR147:
                cmp source_index,15
                jne OR148 
                
                mov ax,VALUE_BP1
                OR VALUE_DI1,ax
                
            OR148:
                cmp source_index,16
                jne OR149
                
                mov ax,VALUE_SP1
                OR VALUE_DI1,ax
                
            OR149:
                cmp source_index,21
                jne ORD15
                
                mov ax,VALUE1
                OR VALUE_DI1,ax     
       
    ORD15:   
       cmp dest_index,15
       jne ORD16
    
            OR151:
    
                cmp source_index,1
                jne OR152
                
                mov ax,VALUE_AX1
                OR VALUE_BP1,ax
                
                
            OR152:
                cmp source_index,2
                jne OR153
                
                mov ax,VALUE_BX1
                OR VALUE_BP1,ax
                
            OR153:
                cmp source_index,3
                jne OR154
                
                mov ax,VALUE_CX1
                OR VALUE_BP1,ax
                           
            OR154:
                cmp source_index,4
                jne OR155
                
                mov ax,VALUE_DX1
                OR VALUE_BP1,ax
                
            OR155:
                cmp source_index,13
                jne OR156
                
                mov ax,VALUE_SI1
                OR VALUE_BP1,ax
                
            OR156:
                cmp source_index,14
                jne OR157
                
                mov ax,VALUE_DI1
                OR VALUE_BP1,ax   
                
            OR157:
                cmp source_index,15
                jne OR158 
                
                mov ax,VALUE_BP1
                OR VALUE_BP1,ax
                
            OR158:
                cmp source_index,16
                jne OR159
                
                mov ax,VALUE_SP1
                OR VALUE_BP1,ax
                
            OR159:
                cmp source_index,21
                jne ORD16
                
                mov ax,VALUE1
                OR VALUE_BP1,ax
                
     ORD16:   
       cmp dest_index,16
       jne TESTEE10
    
            OR161:
    
                cmp source_index,1
                jne OR162
                
                mov ax,VALUE_AX1
                OR VALUE_SP1,ax
                
                
            OR162:
                cmp source_index,2
                jne OR163
                
                mov ax,VALUE_BX1
                OR VALUE_SP1,ax
                
            OR163:
                cmp source_index,3
                jne OR164
                
                mov ax,VALUE_CX1
                OR VALUE_SP1,ax
                           
            OR164:
                cmp source_index,4
                jne OR165
                
                mov ax,VALUE_DX1
                OR VALUE_SP1,ax
                
            OR165:
                cmp source_index,13
                jne OR166
                
                mov ax,VALUE_SI1
                OR VALUE_SP1,ax
                
            OR166:
                cmp source_index,14
                jne OR167
                
                mov ax,VALUE_DI1
                OR VALUE_SP1,ax   
                
            OR167:
                cmp source_index,15
                jne OR168 
                
                mov ax,VALUE_BP1
                OR VALUE_SP1,ax
                
            OR168:
                cmp source_index,16
                jne OR169
                
                mov ax,VALUE_SP1
                OR VALUE_SP1,ax
                
            OR169:
                cmp source_index,21
                jne TESTEE10
                
                mov ax,VALUE1
                OR VALUE_SP1,ax               
                        
                        
             TESTEE10: 
                        
              
        
        
        
        
        
        
        RET
        OR_INST ENDP       
AND_INST PROC NEAR
        
       
          
          CMP INST_INDEX,11
           JNE TESTEE11  
         
            cmp dest_index,1
            jne AND2
            
                    AND11:
            
                        cmp source_index,1
                        jne AND12
                        
                        mov ax,VALUE_AX1
                        AND VALUE_AX1,ax
                        
                        
                    AND12:
                        cmp source_index,2
                        jne AND13
                        
                        mov ax,VALUE_BX1
                        AND VALUE_AX1,ax
                        
                    AND13:
                        cmp source_index,3
                        jne AND14
                        
                        mov ax,VALUE_CX1
                        AND VALUE_AX1,ax
                                   
                    AND14:
                        cmp source_index,4
                        jne AND15
                        
                        mov ax,VALUE_DX1
                        AND VALUE_AX1,ax
                        
                    AND15:
                        cmp source_index,13
                        jne AND16
                        
                        mov ax,VALUE_SI1
                        AND VALUE_AX1,ax
                        
                    AND16:
                        cmp source_index,14
                        jne AND17
                        
                        mov ax,VALUE_DI1
                        AND VALUE_AX1,ax   
                        
                    AND17:
                        cmp source_index,15
                        jne AND18 
                        
                        mov ax,VALUE_SP1
                        AND VALUE_AX1,ax
                        
                    AND18:
                        cmp source_index,16
                        jne AND19
                        
                        mov ax,VALUE_BP1
                        AND VALUE_AX1,ax
                        
                    AND19:
                        cmp source_index,21
                        jne AND2
                        
                        mov ax,VALUE1
                        AND VALUE_AX1,ax
                
               AND2: 
                        
               cmp dest_index,2
               jne AND3
               
               
              
                    AND21:
            
                        cmp source_index,1
                        jne AND22
                        
                        mov ax,VALUE_AX1
                        AND VALUE_BX1,ax
                        
                        
                    AND22:
                        cmp source_index,2
                        jne AND23
                        
                        MOV ax,VALUE_BX1
                        AND VALUE_BX1,ax
                        
                    AND23:
                        cmp source_index,3
                        jne AND24
                        
                        mov ax,VALUE_CX1
                        AND VALUE_BX1,ax
                                   
                    AND24:
                        cmp source_index,4
                        jne AND25
                        
                        mov ax,VALUE_DX1
                        AND Value_BX1,ax
                        
                    AND25:
                        cmp source_index,13
                        jne AND26
                        
                        mov ax,VALUE_SI1
                        AND VALUE_BX1,ax
                        
                    AND26:
                        cmp source_index,14
                        jne AND27
                        
                        mov ax,VALUE_DI1
                        AND VALUE_BX1,ax   
                        
                    AND27:
                        cmp source_index,15
                        jne AND28 
                        
                        mov ax,VALUE_SP1
                        AND VALUE_BX1,ax
                        
                    AND28:
                        cmp source_index,16
                        jne AND29
                        
                        mov ax,VALUE_BP1
                        AND VALUE_BX1,ax
                        
                    AND29:
                        cmp source_index,21
                        jne AND3
                        
                        mov ax,VALUE1
                        AND VALUE_BX1,ax     
               
            AND3:   
               cmp dest_index,3
               jne AND4
            
                    AND31:
            
                        cmp source_index,1
                        jne AND32
                        
                        mov ax,VALUE_AX1
                        AND VALUE_CX1,ax
                        
                        
                    AND32:
                        cmp source_index,2
                        jne AND33
                        
                        mov ax,VALUE_BX1
                        AND VALUE_CX1,ax
                        
                    AND33:
                        cmp source_index,3
                        jne AND34
                        
                        mov ax,VALUE_CX1
                        AND VALUE_CX1,ax
                                   
                    AND34:
                        cmp source_index,4
                        jne AND35
                        
                        mov ax,VALUE_DX1
                        AND VALUE_CX1,ax
                        
                    AND35:
                        cmp source_index,13
                        jne AND36
                        
                        mov ax,VALUE_SI1
                        AND VALUE_CX1,ax
                        
                    AND36:
                        cmp source_index,14
                        jne AND37
                        
                        mov ax,VALUE_DI1
                        AND VALUE_CX1,ax   
                        
                    AND37:
                        cmp source_index,15
                        jne AND38 
                        
                        mov ax,VALUE_SP1
                        AND VALUE_CX1,ax
                        
                    AND38:
                        cmp source_index,16
                        jne AND39
                        
                        mov ax,VALUE_BP1
                        AND VALUE_CX1,ax
                        
                    AND39:
                        cmp source_index,21
                        jne AND4
                        
                        mov ax,VALUE1
                        AND VALUE_CX1,ax
                        
             AND4:   
               cmp dest_index,4
               jne AND5
            
                    AND41:
            
                        cmp source_index,1
                        jne AND42
                        
                        mov ax,VALUE_AX1
                        AND VALUE_DX1,ax
                        
                        
                    AND42:
                        cmp source_index,2
                        jne AND43
                        
                        mov ax,VALUE_BX1
                        AND VALUE_DX1,ax
                        
                    AND43:
                        cmp source_index,3
                        jne AND44
                        
                        mov ax,VALUE_CX1
                        AND VALUE_DX1,ax
                                   
                    AND44:
                        cmp source_index,4
                        jne AND45
                        
                        mov ax,VALUE_DX1
                        AND VALUE_DX1,ax
                        
                    AND45:
                        cmp source_index,13
                        jne AND46
                        
                        mov ax,VALUE_SI1
                        AND VALUE_DX1,ax
                        
                    AND46:
                        cmp source_index,14
                        jne AND47
                        
                        mov ax,VALUE_DI1
                        AND VALUE_DX1,ax   
                        
                    AND47:
                        cmp source_index,15
                        jne AND48 
                        
                        mov ax,VALUE_SP1
                        AND VALUE_DX1,ax
                        
                    AND48:
                        cmp source_index,16
                        jne AND49
                        
                        mov ax,VALUE_BP1
                        AND VALUE_DX1,ax
                        
                    AND49:
                        cmp source_index,21
                        jne AND5
                        
                        mov ax,VALUE1
                        AND VALUE_DX1,ax
                        
                        
              AND5:   
               cmp dest_index,5
               jne AND6
               
       
            AND51:
                cmp source_index,5
                jne AND52
                
                
                mov AX,VALUE_AX1
                SUB AH,AH
                MOV BX,VALUE_AX1
                SUB BL,BL
                AND VALUE_AX1,AX
                ADD VALUE_AX1,BX
                
            AND52:
                cmp source_index,6
                jne AND53
                
                mov AX,VALUE_BX1
                SUB AH,AH
                MOV BX,VALUE_AX1
                SUB BL,BL
                AND VALUE_AX1,AX
                ADD VALUE_AX1,BX
            
            AND53:
                cmp source_index,7
                jne AND54
                
                mov AX,VALUE_CX1
                SUB AH,AH
                MOV BX,VALUE_AX1
                SUB BL,BL
                AND VALUE_AX1,AX
                ADD VALUE_AX1,BX 
                
            AND54:
                cmp source_index,8
                jne AND55
                
                mov AX,VALUE_DX1
                SUB AH,AH
                MOV BX,VALUE_AX1
                SUB BL,BL
                AND VALUE_AX1,AX
                ADD VALUE_AX1,BX
                
           AND55:
                cmp source_index,9
                jne AND56
                
                mov AX,VALUE_AX1
                SUB AL,AL
                MOV BX,VALUE_AX1
                SUB BL,BL
                SHR AX,8
                AND VALUE_AX1,AX
                ADD VALUE_AX1,BX
                
            AND56:
                cmp source_index,10
                jne AND57
                
                mov AX,VALUE_BX1
                SUB AL,AL
                MOV BX,VALUE_AX1
                SUB BL,BL
                SHR AX,8
                AND VALUE_AX1,AX
                ADD VALUE_AX1,BX
            
            AND57:
                cmp source_index,11
                jne AND58
                
                mov AX,VALUE_CX1
                SUB AL,AL
                MOV BX,VALUE_AX1
                SUB BL,BL
                SHR AX,8
                AND VALUE_AX1,AX
                ADD VALUE_AX1,BX 
                
            AND58:
                cmp source_index,12
                jne AND59
                
                mov AX,VALUE_DX1
                SUB AL,AL
                MOV BX,VALUE_AX1
                SUB BL,BL
                SHR AX,8
                AND VALUE_AX1,AX
                ADD VALUE_AX1,BX
                
            AND59:
                cmp source_index,21
                jne AND6
                
                mov AX,VALUE1
                SUB AH,AH
                MOV BX,VALUE_AX1
                SUB BL,BL
                
                AND VALUE_AX1,AX
                ADD VALUE_AX1,BX    
                  
                
       AND6:   
       cmp dest_index,6
       jne AND7
       
            AND61:
                cmp source_index,5
                jne AND62
                
                
                mov AX,VALUE_AX1
                SUB AH,AH
                MOV BX,VALUE_BX1
                SUB BL,BL
                AND VALUE_BX1,AX
                ADD VALUE_BX1,BX
                
            AND62:
                cmp source_index,6
                jne AND63
                
                mov AX,VALUE_BX1
                SUB AH,AH
                MOV BX,VALUE_BX1
                SUB BL,BL
                AND VALUE_BX1,AX
                ADD VALUE_BX1,BX
            
            AND63:
                cmp source_index,7
                jne AND64
                
                mov AX,VALUE_CX1
                SUB AH,AH
                MOV BX,VALUE_BX1
                SUB BL,BL
                AND VALUE_BX1,AX
                ADD VALUE_BX1,BX 
                
            AND64:
                cmp source_index,8
                jne AND65
                
                mov AX,VALUE_DX1
                SUB AH,AH
                MOV BX,VALUE_BX1
                SUB BL,BL
                AND VALUE_BX1,AX
                ADD VALUE_BX1,BX
                
           AND65:
                cmp source_index,9
                jne AND66
                
                mov AX,VALUE_AX1
                SUB AL,AL
                MOV BX,VALUE_BX1
                SUB BL,BL
                SHR AX,8
                AND VALUE_BX1,AX
                ADD VALUE_BX1,BX
                
            AND66:
                cmp source_index,10
                jne AND67
                
                mov AX,VALUE_BX1
                SUB AL,AL
                MOV BX,VALUE_BX1
                SUB BL,BL
                SHR AX,8
                AND VALUE_BX1,AX
                ADD VALUE_BX1,BX
            
            AND67:
                cmp source_index,11
                jne AND68
                
                mov AX,VALUE_CX1
                SUB AL,AL
                MOV BX,VALUE_BX1
                SUB BL,BL
                SHR AX,8
                AND VALUE_BX1,AX
                ADD VALUE_BX1,BX 
                
            AND68:
                cmp source_index,12
                jne AND69
                
                mov AX,VALUE_DX1
                SUB AL,AL
                MOV BX,VALUE_BX1
                SUB BL,BL
                SHR AX,8
                AND VALUE_BX1,AX
                ADD VALUE_BX1,BX
                
            AND69:
                cmp source_index,21
                jne AND7
                
                mov AX,VALUE1
                SUB AH,AH
                MOV BX,VALUE_BX1
                SUB BL,BL
                
                AND VALUE_BX1,AX
                ADD VALUE_BX1,BX      
                
                
                
       AND7:   
       cmp dest_index,7
       jne AND8
       
            AND71:
                cmp source_index,5
                jne AND72
                
                
                mov AX,VALUE_AX1
                SUB AH,AH
                MOV BX,VALUE_CX1
                SUB BL,BL
                AND VALUE_CX1,AX
                ADD VALUE_CX1,BX
                
            AND72:
                cmp source_index,6
                jne AND73
                
                mov AX,VALUE_BX1
                SUB AH,AH
                MOV BX,VALUE_BX1
                SUB BL,BL
                AND VALUE_BX1,AX
                ADD VALUE_BX1,BX
            
            AND73:
                cmp source_index,7
                jne AND74
                
                mov AX,VALUE_CX1
                SUB AH,AH
                MOV BX,VALUE_BX1
                SUB BL,BL
                AND VALUE_BX1,AX
                ADD VALUE_BX1,BX 
                
            AND74:
                cmp source_index,8
                jne AND75
                
                mov AX,VALUE_DX1
                SUB AH,AH
                MOV BX,VALUE_BX1
                SUB BL,BL
                AND VALUE_BX1,AX
                ADD VALUE_BX1,BX
                
           AND75:
                cmp source_index,9
                jne AND76
                
                mov AX,VALUE_AX1
                SUB AL,AL
                MOV BX,VALUE_CX1
                SUB BL,BL
                SHR AX,8
                AND VALUE_CX1,AX
                ADD VALUE_CX1,BX
                
            AND76:
                cmp source_index,10
                jne AND77
                
                mov AX,VALUE_BX1
                SUB AL,AL
                MOV BX,VALUE_CX1
                SUB BL,BL
                SHR AX,8
                AND VALUE_CX1,AX
                ADD VALUE_CX1,BX
            
            AND77:
                cmp source_index,11
                jne AND78
                
                mov AX,VALUE_CX1
                SUB AL,AL
                MOV BX,VALUE_CX1
                SUB BL,BL
                SHR AX,8
                AND VALUE_CX1,AX
                ADD VALUE_CX1,BX 
                
            AND78:
                cmp source_index,12
                jne AND79
                
                mov AX,VALUE_DX1
                SUB AL,AL
                MOV BX,VALUE_CX1
                SUB BL,BL
                SHR AX,8
                AND VALUE_CX1,AX
                ADD VALUE_CX1,BX 
                
            AND79:
                cmp source_index,21
                jne AND8
                
                mov AX,VALUE1
                SUB AH,AH
                MOV BX,VALUE_CX1
                SUB BL,BL
                
                AND VALUE_CX1,AX
                ADD VALUE_CX1,BX
                           
                
      AND8:   
       cmp dest_index,8
       jne AND9
       
             AND81:
                cmp source_index,5
                jne AND82
                       
                
                mov AX,VALUE_AX1
                SUB AH,AH
                MOV BX,VALUE_DX1
                SUB BL,BL
                AND VALUE_DX1,AX
                ADD VALUE_DX1,BX
                
            AND82:
                cmp source_index,6
                jne AND83
                       
                mov AX,VALUE_BX1
                SUB AH,AH
                MOV BX,VALUE_DX1
                SUB BL,BL
                AND VALUE_DX1,AX
                ADD VALUE_DX1,BX
            
            AND83:
                cmp source_index,7
                jne AND84
                
                mov AX,VALUE_CX1
                SUB AH,AH
                MOV BX,VALUE_DX1
                SUB BL,BL
                AND VALUE_DX1,AX
                ADD VALUE_DX1,BX 
                
            AND84:
                cmp source_index,8
                jne AND85
                
                mov AX,VALUE_DX1
                SUB AH,AH
                MOV BX,VALUE_DX1
                SUB BL,BL
                AND VALUE_DX1,AX
                ADD VALUE_DX1,BX
                
            AND85:
                cmp source_index,9
                jne AND86
                
                mov AX,VALUE_AX1
                SUB AL,AL
                MOV BX,VALUE_DX1
                SUB BL,BL
                SHR AX,8
                AND VALUE_DX1,AX
                ADD VALUE_DX1,BX
                
            AND86:
                cmp source_index,10
                jne AND87
                
                mov AX,VALUE_BX1
                SUB AL,AL
                MOV BX,VALUE_DX1
                SUB BL,BL
                SHR AX,8
                AND VALUE_DX1,AX
                ADD VALUE_DX1,BX
            
            AND87:
                cmp source_index,11
                jne AND88
                
                mov AX,VALUE_CX1
                SUB AL,AL
                MOV BX,VALUE_DX1
                SUB BL,BL
                SHR AX,8
                AND VALUE_DX1,AX
                ADD VALUE_DX1,BX 
                
            AND88:
                cmp source_index,12
                jne AND89
                
                mov AX,VALUE_DX1
                SUB AL,AL
                MOV BX,VALUE_DX1
                SUB BL,BL
                SHR AX,8
                AND VALUE_DX1,AX
                ADD VALUE_DX1,BX 
                
                
            AND89:
                cmp source_index,21
                jne AND9
                
                mov AX,VALUE1
                SUB AH,AH
                MOV BX,VALUE_CX1
                SUB BL,BL
                
                AND VALUE_CX1,AX
                ADD VALUE_CX1,BX
      
      
      AND9:   
       cmp dest_index,9
       jne AND10
       
             AND91:
                cmp source_index,5
                jne AND92
                       
                
                mov AX,VALUE_AX1
                SUB AH,AH 
                mov BX,VALUE_AX1
                SUB BH,BH
                SHL AX,8
                AND VALUE_AX1,AX
                ADD VALUE_AX1,BX
                
            AND92:
                cmp source_index,6
                jne AND93
                       
                mov AX,VALUE_BX1
                SUB AH,AH 
                mov BX,VALUE_AX1
                SUB BH,BH
                SHL AX,8
                AND VALUE_AX1,AX
                ADD VALUE_AX1,BX
            
            AND93:
                cmp source_index,7
                jne AND94
                
                mov AX,VALUE_CX1
                SUB AH,AH 
                mov BX,VALUE_AX1
                SUB BH,BH
                SHL AX,8
                AND VALUE_AX1,AX
                ADD VALUE_AX1,BX 
                
            AND94:
                cmp source_index,8
                jne AND95
                
                mov AX,VALUE_DX1
                SUB AH,AH 
                mov BX,VALUE_AX1
                SUB BH,BH
                SHL AX,8
                AND VALUE_AX1,AX
                ADD VALUE_AX1,BX
                
           AND95:
                cmp source_index,9
                jne AND96
                
                mov AX,VALUE_AX1
                SUB AH,AH 
                mov BX,VALUE_AX1
                SUB BL,BL
                
                AND VALUE_AX1,AX
                ADD VALUE_AX1,BX
                
            AND96:
                cmp source_index,10
                jne AND97
                
                mov AX,VALUE_BX1
                SUB AH,AH 
                mov BX,VALUE_AX1
                SUB BL,BL
                
                AND VALUE_AX1,AX
                ADD VALUE_AX1,BX
            
            AND97:
                cmp source_index,11
                jne AND98
                
                mov AX,VALUE_CX1
                SUB AH,AH 
                mov BX,VALUE_AX1
                SUB BL,BL
                
                AND VALUE_AX1,AX
                ADD VALUE_AX1,BX 
                
            AND98:
                cmp source_index,12
                jne AND99
                
                mov AX,VALUE_DX1
                SUB AH,AH 
                mov BX,VALUE_AX1
                SUB BL,BL
                
                AND VALUE_AX1,AX
                ADD VALUE_AX1,BX
                
            AND99:
                cmp source_index,21
                jne AND10
                
                mov AX,VALUE1
                SUB AH,AH
                MOV BX,VALUE_DX1
                SUB BL,BL
                
                AND VALUE_DX1,AX
                ADD VALUE_DX1,BX 
                
                    
      
      
      AND10:   
       cmp dest_index,10
       jne ANDD11
       
            AND101:
                cmp source_index,5
                jne AND102
                       
                
                mov AX,VALUE_AX1
                SUB AH,AH 
                mov BX,VALUE_BX1
                SUB BH,BH
                SHL AX,8
                AND VALUE_BX1,AX
                ADD VALUE_BX1,BX
                
            AND102:
                cmp source_index,6
                jne AND103
                       
                mov AX,VALUE_BX1
                SUB AH,AH 
                mov BX,VALUE_BX1
                SUB BH,BH
                SHL AX,8
                AND VALUE_BX1,AX
                ADD VALUE_BX1,BX
            
            AND103:
                cmp source_index,7
                jne AND104
                
               mov AX,VALUE_CX1
                SUB AH,AH 
                mov BX,VALUE_BX1
                SUB BH,BH
                SHL AX,8
                AND VALUE_BX1,AX
                ADD VALUE_BX1,BX 
                
            AND104:
                cmp source_index,8
                jne AND105
                
                mov AX,VALUE_DX1
                SUB AH,AH 
                mov BX,VALUE_BX1
                SUB BH,BH
                SHL AX,8
                AND VALUE_BX1,AX
                ADD VALUE_BX1,BX
                
           AND105:
                cmp source_index,9
                jne AND106
                
                mov AX,VALUE_AX1
                SUB AH,AH 
                mov BX,VALUE_BX1
                SUB BL,BL
                
                AND VALUE_BX1,AX
                ADD VALUE_BX1,BX
                
            AND106:
                cmp source_index,10
                jne AND107
                
                mov AX,VALUE_BX1
                SUB AH,AH 
                mov BX,VALUE_BX1
                SUB BL,BL
                
                AND VALUE_BX1,AX
                ADD VALUE_BX1,BX
            
            AND107:
                cmp source_index,11
                jne AND108
                
                mov AX,VALUE_CX1
                SUB AH,AH 
                mov BX,VALUE_BX1
                SUB BL,BL
                
                AND VALUE_BX1,AX
                ADD VALUE_BX1,BX 
                
            AND108:
                cmp source_index,12
                jne AND109
                
                mov AX,VALUE_DX1
                SUB AH,AH 
                mov BX,VALUE_BX1
                SUB BL,BL
                
                AND VALUE_BX1,AX
                ADD VALUE_BX1,BX 
            
            AND109:
                cmp source_index,21
                jne ANDD11
               
                mov AX,VALUE1 
                mov BX,VALUE_BX1
                SUB BH,BH
                SHL AX,8
                AND VALUE_BX1,AX
                ADD VALUE_BX1,BX             
      
      
      ANDD11:   
       cmp dest_index,11
       jne ANDD12
       
             AND111:
                cmp source_index,5
                jne AND112
                       
                
                mov AX,VALUE_AX1
                SUB AH,AH 
                mov BX,VALUE_CX1
                SUB BH,BH
                SHL AX,8
                AND VALUE_CX1,AX
                ADD VALUE_CX1,BX
                
            AND112:
                cmp source_index,6
                jne AND113
                       
                mov AX,VALUE_BX1
                SUB AH,AH 
                mov BX,VALUE_CX1
                SUB BH,BH
                SHL AX,8
                AND VALUE_CX1,AX
                ADD VALUE_CX1,BX
            
            AND113:
                cmp source_index,7
                jne AND114
                
                mov AX,VALUE_CX1
                SUB AH,AH 
                mov BX,VALUE_CX1
                SUB BH,BH
                SHL AX,8
                AND VALUE_CX1,AX
                ADD VALUE_CX1,BX 
                
           AND114:
                cmp source_index,8
                jne AND115
                
                mov AX,VALUE_DX1
                SUB AH,AH 
                mov BX,VALUE_CX1
                SUB BH,BH
                SHL AX,8
                AND VALUE_CX1,AX
                ADD VALUE_CX1,BX
                
           AND115:
                cmp source_index,9
                jne AND116
                
                mov AX,VALUE_AX1
                SUB AH,AH 
                mov BX,VALUE_CX1
                SUB BL,BL
                
                AND VALUE_CX1,AX
                ADD VALUE_CX1,BX
                
            AND116:
                cmp source_index,10
                jne AND117
                
                mov AX,VALUE_BX1
                SUB AH,AH 
                mov BX,VALUE_CX1
                SUB BL,BL
                
                AND VALUE_CX1,AX
                ADD VALUE_CX1,BX
            
            AND117:
                cmp source_index,11
                jne AND118
                
                mov AX,VALUE_CX1
                SUB AH,AH 
                mov BX,VALUE_CX1
                SUB BL,BL
                
                AND VALUE_CX1,AX
                ADD VALUE_CX1,BX 
                
            AND118:
                cmp source_index,12
                jne AND119
                
                mov AX,VALUE_DX1
                SUB AH,AH 
                mov BX,VALUE_CX1
                SUB BL,BL
                
                AND VALUE_CX1,AX
                ADD VALUE_CX1,BX
                
            AND119:
                cmp source_index,21
                jne ANDD12
                
                mov AX,VALUE1 
                mov BX,VALUE_CX1
                SUB BH,BH
                SHL AX,8
                AND VALUE_CX1,AX
                ADD VALUE_CX1,BX 
                
                    
      
      
      ANDD12:   
       cmp dest_index,12
       jne ANDD13
       
             AND121:
                cmp source_index,5
                jne AND122
                       
                
                mov AX,VALUE_AX1
                SUB AH,AH 
                mov BX,VALUE_DX1
                SUB BH,BH
                SHL AX,8
                AND VALUE_DX1,AX
                ADD VALUE_DX1,BX
                
            AND122:
                cmp source_index,6
                jne AND123
                       
                mov AX,VALUE_BX1
                SUB AH,AH 
                mov BX,VALUE_DX1
                SUB BH,BH
                SHL AX,8
                AND VALUE_DX1,AX
                ADD VALUE_DX1,BX
            
            AND123:
                cmp source_index,7
                jne AND124
                
               mov AX,VALUE_CX1
                SUB AH,AH 
                mov BX,VALUE_DX1
                SUB BH,BH
                SHL AX,8
                AND VALUE_DX1,AX
                ADD VALUE_DX1,BX 
                
            AND124:
                cmp source_index,8
                jne AND125
                
                mov AX,VALUE_DX1
                SUB AH,AH 
                mov BX,VALUE_DX1
                SUB BH,BH
                SHL AX,8
                AND VALUE_DX1,AX
                ADD VALUE_DX1,BX
                
           AND125:
                cmp source_index,9
                jne AND126
                
                mov AX,VALUE_AX1
                SUB AH,AH 
                mov BX,VALUE_DX1
                SUB BL,BL
                
                AND VALUE_DX1,AX
                ADD VALUE_DX1,BX
                
           AND126:
                cmp source_index,10
                jne AND127
                
                mov AX,VALUE_BX1
                SUB AH,AH 
                mov BX,VALUE_DX1
                SUB BL,BL
                
                AND VALUE_DX1,AX
                ADD VALUE_DX1,BX
            
            AND127:
                cmp source_index,11
                jne AND128
                
                mov AX,VALUE_CX1
                SUB AH,AH 
                mov BX,VALUE_DX1
                SUB BL,BL
                
                AND VALUE_DX1,AX
                ADD VALUE_DX1,BX 
                
            AND128:
                cmp source_index,12
                jne AND129
                
                mov AX,VALUE_DX1
                SUB AH,AH 
                mov BX,VALUE_DX1
                SUB BL,BL
                
                AND VALUE_DX1,AX
                ADD VALUE_DX1,BX     
            
            AND129:
                cmp source_index,21
                jne ANDD13
                
                mov AX,VALUE1 
                mov BX,VALUE_DX1
                SUB BH,BH
                SHL AX,8
                AND VALUE_DX1,AX
                ADD VALUE_DX1,BX
                
    ANDD13:             
    cmp dest_index,13
    jne ANDD14
    
            AND131:
    
                cmp source_index,1
                jne AND132
                
                mov ax,VALUE_AX1
                AND VALUE_SI1,ax
                
                
            AND132:
                cmp source_index,2
                jne AND133
                
                mov ax,VALUE_BX1
                AND VALUE_SI1,ax
                
            AND133:
                cmp source_index,3
                jne AND134
                
                mov ax,VALUE_CX1
                AND VALUE_SI1,ax
                           
            AND134:
                cmp source_index,4
                jne AND135
                
                mov ax,VALUE_DX1
                AND VALUE_SI1,ax
                
            AND135:
                cmp source_index,13
                jne AND136
                
                mov ax,VALUE_SI1
                AND VALUE_SI1,ax
                
            AND136:
                cmp source_index,14
                jne AND137
                
                mov ax,VALUE_DI1
                AND VALUE_SI1,ax   
                
            AND137:
                cmp source_index,15
                jne AND138 
                
                mov ax,VALUE_BP1
                AND VALUE_SI1,ax
                
            AND138:
                cmp source_index,16
                jne AND139
                
                mov ax,VALUE_SP1
                AND VALUE_SI1,ax
                
            AND139:
                cmp source_index,21
                jne AND14
                
                mov ax,VALUE1
                AND VALUE_SI1,ax
        
       ANDD14: 
                
       cmp dest_index,14
       jne ANDD15
       
       
      
            AND141:
    
                cmp source_index,1
                jne AND142
                
                mov ax,VALUE_AX1
                AND VALUE_DI1,ax
                
                
            AND142:
                cmp source_index,2
                jne AND143
                
                MOV ax,VALUE_BX1
                AND VALUE_DI1,ax
                
            AND143:
                cmp source_index,3
                jne AND144
                
                mov ax,VALUE_CX1
                AND VALUE_DI1,ax
                           
            AND144:
                cmp source_index,4
                jne AND145
                
                mov ax,VALUE_DX1
                AND VALUE_DI1,ax
                
            AND145:
                cmp source_index,13
                jne AND146
                
                mov ax,VALUE_SI1
                AND VALUE_DI1,ax
                
            AND146:
                cmp source_index,14
                jne AND147
                
                mov ax,VALUE_DI1
                AND VALUE_DI1,ax   
                
            AND147:
                cmp source_index,15
                jne AND148 
                
                mov ax,VALUE_BP1
                AND VALUE_DI1,ax
                
            AND148:
                cmp source_index,16
                jne AND149
                
                mov ax,VALUE_SP1
                AND VALUE_DI1,ax
                
            AND149:
                cmp source_index,21
                jne ANDD15
                
                mov ax,VALUE1
                AND VALUE_DI1,ax     
       
    ANDD15:   
       cmp dest_index,15
       jne ANDD16
    
            AND151:
    
                cmp source_index,1
                jne AND152
                
                mov ax,VALUE_AX1
                AND VALUE_BP1,ax
                
                
            AND152:
                cmp source_index,2
                jne AND153
                
                mov ax,VALUE_BX1
                AND VALUE_BP1,ax
                
            AND153:
                cmp source_index,3
                jne AND154
                
                mov ax,VALUE_CX1
                AND VALUE_BP1,ax
                           
            AND154:
                cmp source_index,4
                jne AND155
                
                mov ax,VALUE_DX1
                AND VALUE_BP1,ax
                
            AND155:
                cmp source_index,13
                jne AND156
                
                mov ax,VALUE_SI1
                AND VALUE_BP1,ax
                
            AND156:
                cmp source_index,14
                jne AND157
                
                mov ax,VALUE_DI1
                AND VALUE_BP1,ax   
                
            AND157:
                cmp source_index,15
                jne AND158 
                
                mov ax,VALUE_BP1
                AND VALUE_BP1,ax
                
            AND158:
                cmp source_index,16
                jne AND159
                
                mov ax,VALUE_SP1
                AND VALUE_BP1,ax
                
            AND159:
                cmp source_index,21
                jne ANDD16
                
                mov ax,VALUE1
                AND VALUE_BP1,ax
                
     ANDD16:   
       cmp dest_index,16
       jne TESTEE11
    
            AND161:
    
                cmp source_index,1
                jne AND162
                
                mov ax,VALUE_AX1
                AND VALUE_SP1,ax
                
                
            AND162:
                cmp source_index,2
                jne AND163
                
                mov ax,VALUE_BX1
                AND VALUE_SP1,ax
                
            AND163:
                cmp source_index,3
                jne AND164
                
                mov ax,VALUE_CX1
                AND VALUE_SP1,ax
                           
            AND164:
                cmp source_index,4
                jne AND165
                
                mov ax,VALUE_DX1
                AND VALUE_SP1,ax
                
            AND165:
                cmp source_index,13
                jne AND166
                
                mov ax,VALUE_SI1
                AND VALUE_SP1,ax
                
            AND166:
                cmp source_index,14
                jne AND167
                
                mov ax,VALUE_DI1
                AND VALUE_SP1,ax   
                
            AND167:
                cmp source_index,15
                jne AND168 
                
                mov ax,VALUE_BP1
                AND VALUE_SP1,ax
                
            AND168:
                cmp source_index,16
                jne AND169
                
                mov ax,VALUE_SP1
                AND VALUE_SP1,ax
                
            AND169:
                cmp source_index,21
                jne TESTEE11
                
                mov ax,VALUE1
                AND VALUE_SP1,ax               
                        
                        
             TESTEE11: 
                        
              
        
        
        
        
        
        
        RET
        AND_INST ENDP               
SHL_INST PROC NEAR
        
           CMP INST_INDEX,5
           JNE TESTEE4
        
        
        cmp dest_index,1
    jne SHL2
    
            SHL11:
            
                cmp source_index,7 
                jne SHL12
                
                MOV CX,VALUE_CX1
                SHL VALUE_AX1,cl
                
                
            SHL12:
                cmp source_index,21
                jne SHL2
                
                
                                            ; first check the value of the VALUE1 
                                              ; first check the value of the VALUE1 
                MOV CX, VALUE1 
                                  ;as the value is lower than 16 then ot should be in the lower part : make sense 
                SHL VALUE_AX1,CL
                
                
    
    SHL2:
             
    cmp dest_index,2
    jne SHL3
    
            SHL21:
            
                cmp source_index,7 
                jne SHL22
                
                MOV CX,VALUE_CX1
                SHL VALUE_BX1,cl
                
                
            SHL22:
                cmp source_index,21
                jne SHL3
                
                                              ; first check the value of the VALUE1 
                MOV CX, VALUE1 
                                  ;as the value is lower than 16 then ot should be in the lower part : make sense 
                SHL VALUE_BX1,CL
                                   
     SHL3:
                
      cmp dest_index,3
    jne SHL4
    
            SHL31:
            
                cmp source_index,7 
                jne SHL32
                
                MOV CX,VALUE_CX1
                SHL VALUE_CX1,cl
                
                
            SHL32:
                cmp source_index,21
                jne SHL4
                
                MOV CX,VALUE1
                SHL VALUE_CX1,CL
      
     SHL4:
                      
     cmp dest_index,4
    jne SHL5
    
            SHL41:
            
                cmp source_index,7 
                jne SHL42
                
                MOV CX,VALUE_CX1
                SHL VALUE_DX1,cl
                
                
            SHL42:
                cmp source_index,21
                jne SHL5
                
                MOV CX,VALUE1
                SHL VALUE_DX1,CL  
                
                
    SHL5:            
                
    cmp dest_index,5
    jne SHL6
    
            SHL51:
            
                cmp source_index,7 
                jne SHL52
                
                
                MOV AX,VALUE_AX1
                SUB AH,AH
                MOV BX,VALUE_AX1
                SUB BL,BL
                MOV VALUE_AX1,AX
                MOV CX,VALUE_CX1
                SHL VALUE_AX1,cl
                AND VALUE_AX1,0000000011111111B
                ADD VALUE_AX1,BX
                
                
            SHL52:
                cmp source_index,21
                jne SHL6
                
                MOV AX,VALUE_AX1
                SUB AH,AH
                MOV BX,VALUE_AX1
                SUB BL,BL
                MOV VALUE_AX1,AX
                MOV CX,VALUE1
                SHL VALUE_AX1,CL
                AND VALUE_AX1,0000000011111111B
                ADD VALUE_AX1,BX
     
     SHL6:
                
     cmp dest_index,6
    jne SHL7
    
            SHL61:
            
                cmp source_index,7 
                jne SHL62
                
                MOV AX,VALUE_BX1
                SUB AH,AH
                MOV BX,VALUE_BX1
                SUB BL,BL
                MOV VALUE_BX1,AX
                MOV CX,VALUE_CX1
                SHL VALUE_BX1,cl
                AND VALUE_BX1,00001111B
                ADD VALUE_BX1,BX
                
                
            SHL62:
                cmp source_index,21
                jne SHL7
                
                MOV AX,VALUE_BX1
                SUB AH,AH
                MOV BX,VALUE_BX1
                SUB BL,BL
                MOV VALUE_BX1,AX
                MOV CX,VALUE1
                SHL VALUE_BX1,CL
                AND VALUE_BX1,0000000011111111B
                ADD VALUE_BX1,BX           
     
     SHL7:
                
     cmp dest_index,7
    jne SHL8
    
            SHL71:
            
                cmp source_index,7 
                jne SHL72
                
                MOV CX,VALUE_CX1
                MOV AX,VALUE_CX1
                SUB AH,AH
                MOV BX,VALUE_CX1
                SUB BL,BL
                MOV VALUE_CX1,AX
                
                SHL VALUE_CX1,cl
                AND VALUE_CX1,0000000011111111B
                ADD VALUE_CX1,BX
                
                
            SHL72:
                cmp source_index,21
                jne SHL8
                
                MOV AX,VALUE_CX1
                SUB AH,AH
                MOV BX,VALUE_CX1
                SUB BL,BL
                MOV VALUE_CX1,AX
                MOV CX,VALUE1
                SHL VALUE_CX1,CL
                AND VALUE_CX1,0000000011111111B
                ADD VALUE_CX1,BX           
     
     SHL8:
                
      cmp dest_index,8
    jne SHL9
    
            SHL81:
            
                cmp source_index,7 
                jne SHL82
                
                MOV AX,VALUE_DX1
                SUB AH,AH
                MOV BX,VALUE_DX1
                SUB BL,BL
                MOV VALUE_DX1,AX
                MOV CX,VALUE_CX1
                SHL VALUE_DX1,cl
                AND VALUE_DX1,0000000011111111B
                ADD VALUE_DX1,BX
                
                
            SHL82:
                cmp source_index,21
                jne SHL9
                
                MOV AX,VALUE_DX1
                SUB AH,AH
                MOV BX,VALUE_DX1
                SUB BL,BL
                MOV VALUE_DX1,AX
                MOV CX,VALUE1
                SHL VALUE_DX1,CL
                AND VALUE_DX1,0000000011111111B
                ADD VALUE_DX1,BX          
     
     SHL9:
                
     cmp dest_index,9
    jne SHL10
    
            SHL91:
            
                cmp source_index,7 
                jne SHL92
                
                MOV AX,VALUE_AX1
                SUB AL,AL
                MOV BX,VALUE_AX1
                SUB BH,BH
                MOV VALUE_AX1,AX
                MOV CX,VALUE_CX1
                SHL VALUE_AX1,cl
                ADD VALUE_AX1,BX
                
                
            SHL92:
                cmp source_index,21
                jne SHL10
                
                MOV AX,VALUE_AX1
                SUB AL,AL
                MOV BX,VALUE_AX1
                SUB BH,BH
                MOV VALUE_AX1,AX
                MOV CX,VALUE1
                SHL VALUE_AX1,CL
                ADD VALUE_AX1,BX           
     
    SHL10: 
                
     cmp dest_index,10
    jne SHLL11
    
            SHL101:
            
                cmp source_index,16 
                jne SHL102
                
                MOV AX,VALUE_BX1
                SUB AL,AL
                MOV BX,VALUE_BX1
                SUB BH,BH
                MOV VALUE_BX1,AX
                MOV CX,VALUE_CX1
                SHL VALUE_BX1,cl
                ADD VALUE_BX1,BX
                
                
            SHL102:
                cmp source_index,21
                jne SHLL11
                
                MOV AX,VALUE_BX1
                SUB AL,AL
                MOV BX,VALUE_BX1
                SUB BH,BH
                MOV VALUE_BX1,AX
                MOV CX,VALUE1
                SHL VALUE_BX1,CL
                ADD VALUE_BX1,BX 
                
  SHLL11:               
                
    cmp dest_index,11
    jne SHLL12
    
            SHL111:
            
                cmp source_index,7
                jne SHL112
                
                MOV CX,VALUE_CX1         
                MOV AX,VALUE_CX1
                SUB AL,AL
                MOV BX,VALUE_CX1
                SUB BH,BH
                MOV VALUE_CX1,AX
                SHL VALUE_CX1,cl
                ADD VALUE_CX1,BX
                
                
            SHL112:
                cmp source_index,21
                jne SHLL12
                
                MOV AX,VALUE_CX1
                SUB AL,AL
                MOV BX,VALUE_CX1
                SUB BH,BH
                MOV VALUE_CX1,AX
                MOV CX,VALUE1
                SHL VALUE_CX1,CL
                ADD VALUE_CX1,BX 
                
  SHLL12:
                
  cmp dest_index,12
    jne SHL13
    
            SHL121:
            
                cmp source_index,7
                jne SHL122
                
                MOV AX,VALUE_DX1
                SUB AL,AL
                MOV BX,VALUE_DX1
                SUB BH,BH
                MOV VALUE_DX1,AX
                MOV CX,VALUE_CX1
                SHL VALUE_DX1,cl
                ADD VALUE_DX1,BX
                
                
            SHL122:
                cmp source_index,21
                jne SHL13
                
                MOV AX,VALUE_DX1
                SUB AL,AL
                MOV BX,VALUE_DX1
                SUB BH,BH
                MOV VALUE_DX1,AX
                MOV CX,VALUE1
                SHL VALUE_DX1,CL
                ADD VALUE_DX1,BX 
   
   SHL13:             
                
   cmp dest_index,13
    jne SHL14
    
            SHL131:
            
                cmp source_index,16 
                jne SHL132
                
                MOV CX,VALUE_CX1
                SHL VALUE_SI1,cl
                
                
            SHL132:
                cmp source_index,21
                jne SHL14
                
                MOV CX,VALUE1
                SHL VALUE_SI1,CL   
                
    SHL14: 
             
    cmp dest_index,14
    jne SHL15
    
            SHL141:
            
                cmp source_index,7 
                jne SHL142
                
                MOV CX,VALUE_CX1
                SHL VALUE_DI1,cl
                
                
            SHL142:
                cmp source_index,21
                jne SHL15
                
                MOV CX,VALUE1
                SHL VALUE_DI1,CL             
      
     SHL15: 
                
      cmp dest_index,15
    jne SHL16
    
            SHL151:
            
                cmp source_index,7 
                jne SHL152
                
                MOV CX,VALUE_CX1
                SHL VALUE_BP1,cl
                
                
            SHL152:
                cmp source_index,21
                jne SHL16
                
                MOV CX,VALUE1
                SHL VALUE_BP1,CL
     
    SHL16: 
                      
     cmp dest_index,16
    jne TESTEE4
    
            SHL161:
            
                cmp source_index,7 
                jne SHL162
                
                MOV CX,VALUE_CX1
                SHL VALUE_SP1,cl
                
                
            SHL162:
                cmp source_index,21
                jne TESTEE4
                
                MOV CX,VALUE1
                SHL VALUE_SP1,CL   
        
        
        
        
        
        TESTEE4:
       RET
      SHL_INST ENDP      
SHR_INST PROC NEAR
        
           CMP INST_INDEX,4
           JNE TESTEE5
        
        
        cmp dest_index,1
    jne SHR2
    
            SHR11:
            
                cmp source_index,7 
                jne SHR12
                
                MOV CX,VALUE_CX1
                SHR VALUE_AX1,cl
                
                
            SHR12:
                cmp source_index,21
                jne SHR2
                
                MOV CX,VALUE1
                SHR VALUE_AX1,CL   
                
    
    SHR2:
             
    cmp dest_index,2
    jne SHR3
    
            SHR21:
            
                cmp source_index,7 
                jne SHR22
                
                MOV CX,VALUE_CX1
                SHR VALUE_BX1,cl
                
                
            SHR22:
                cmp source_index,21
                jne SHR3
                
                MOV CX,VALUE1
                SHR VALUE_BX1,CL             
     
     SHR3:
                
      cmp dest_index,3
    jne SHR4
    
            SHR31:
            
                cmp source_index,7 
                jne SHR32
                
                MOV CX,VALUE_CX1
                SHR VALUE_CX1,cl
                
                
            SHR32:
                cmp source_index,21
                jne SHR4
                
                MOV CX,VALUE1
                SHR VALUE_CX1,CL
      
     SHR4:
                      
     cmp dest_index,4
    jne SHR5
    
            SHR41:
            
                cmp source_index,7 
                jne SHR42
                
                MOV CX,VALUE_CX1
                SHR VALUE_DX1,cl
                
                
            SHR42:
                cmp source_index,21
                jne SHR5
                
                MOV CX,VALUE1
                SHR VALUE_DX1,CL  
                
                
    SHR5:            
                
    cmp dest_index,5
    jne SHR6
    
            SHR51:
            
                cmp source_index,7 
                jne SHR52
                
                
                MOV AX,VALUE_AX1
                SUB AH,AH
                MOV BX,VALUE_AX1
                SUB BL,BL
                MOV VALUE_AX1,AX
                MOV CX,VALUE_CX1
                SHR VALUE_AX1,cl
                ADD VALUE_AX1,BX
                
                
            SHR52:
                cmp source_index,21
                jne SHR6
                
                MOV AX,VALUE_AX1
                SUB AH,AH
                MOV BX,VALUE_AX1
                SUB BL,BL
                MOV VALUE_AX1,AX
                MOV CX,VALUE1
                SHR VALUE_AX1,CL
                ADD VALUE_AX1,BX
     
     SHR6:
                
     cmp dest_index,6
    jne SHR7
    
            SHR61:
            
                cmp source_index,7 
                jne SHR62
                
                MOV AX,VALUE_BX1
                SUB AH,AH
                MOV BX,VALUE_BX1
                SUB BL,BL
                MOV VALUE_BX1,AX
                MOV CX,VALUE_CX1
                SHR VALUE_BX1,cl
                ADD VALUE_BX1,BX
                
                
            SHR62:
                cmp source_index,21
                jne SHR7
                
                MOV AX,VALUE_BX1
                SUB AH,AH
                MOV BX,VALUE_BX1
                SUB BL,BL
                MOV VALUE_BX1,AX
                MOV CX,VALUE1
                SHR VALUE_BX1,CL
                ADD VALUE_BX1,BX           
     
     SHR7:
                
     cmp dest_index,7
    jne SHR8
    
            SHR71:
            
                cmp source_index,7 
                jne SHR72
                
                MOV CX,VALUE_CX1
                MOV AX,VALUE_CX1
                SUB AH,AH
                MOV BX,VALUE_CX1
                SUB BL,BL
                MOV VALUE_CX1,AX
                
                SHR VALUE_CX1,cl
                ADD VALUE_CX1,BX
                
                
            SHR72:
                cmp source_index,21
                jne SHR8
                
                MOV AX,VALUE_CX1
                SUB AH,AH
                MOV BX,VALUE_CX1
                SUB BL,BL
                MOV VALUE_CX1,AX
                MOV CX,VALUE1
                SHR VALUE_CX1,CL
                ADD VALUE_CX1,BX           
     
     SHR8:
                
      cmp dest_index,8
    jne SHR9
    
            SHR81:
            
                cmp source_index,7 
                jne SHR82
                
                MOV AX,VALUE_DX1
                SUB AH,AH
                MOV BX,VALUE_DX1
                SUB BL,BL
                MOV VALUE_DX1,AX
                MOV CX,VALUE_CX1
                SHR VALUE_DX1,cl
                ADD VALUE_DX1,BX
                
                
            SHR82:
                cmp source_index,21
                jne SHR9
                
                MOV AX,VALUE_DX1
                SUB AH,AH
                MOV BX,VALUE_DX1
                SUB BL,BL
                MOV VALUE_DX1,AX
                MOV CX,VALUE1
                SHR VALUE_DX1,CL
                ADD VALUE_DX1,BX          
     
     SHR9:
                
     cmp dest_index,9
    jne SHR10
    
            SHR91:
            
                cmp source_index,7 
                jne SHR92
                
                MOV AX,VALUE_AX1
                SUB AL,AL
                MOV BX,VALUE_AX1
                SUB BH,BH
                MOV VALUE_AX1,AX
                MOV CX,VALUE_CX1
                SHR VALUE_AX1,cl
                AND VALUE_AX1,1111111100000000B
                ADD VALUE_AX1,BX
                
                
            SHR92:
                cmp source_index,21
                jne SHR10
                
                MOV AX,VALUE_AX1
                SUB AL,AL
                MOV BX,VALUE_AX1
                SUB BH,BH
                MOV VALUE_AX1,AX
                MOV CX,VALUE1
                SHR VALUE_AX1,CL
                AND VALUE_AX1,1111111100000000B
                ADD VALUE_AX1,BX           
     
    SHR10: 
                
     cmp dest_index,10
    jne SHRL11
    
            SHR101:
            
                cmp source_index,7 
                jne SHR102
                
                MOV AX,VALUE_BX1
                SUB AL,AL
                MOV BX,VALUE_BX1
                SUB BH,BH
                MOV VALUE_BX1,AX
                MOV CX,VALUE_CX1
                SHR VALUE_BX1,cl
                AND VALUE_BX1,1111111100000000B
                ADD VALUE_BX1,BX
                
                
            SHR102:
                cmp source_index,21
                jne SHRL11
                
                MOV AX,VALUE_BX1
                SUB AL,AL
                MOV BX,VALUE_BX1
                SUB BH,BH
                MOV VALUE_BX1,AX
                MOV CX,VALUE1
                SHR VALUE_BX1,CL
                AND VALUE_BX1,1111111100000000B
                ADD VALUE_BX1,BX 
                
  SHRL11:               
                
    cmp dest_index,11
    jne SHRL12
    
            SHR111:
            
                cmp source_index,7 
                jne SHR112
                
                MOV CX,VALUE_CX1         
                MOV AX,VALUE_CX1
                SUB AL,AL
                MOV BX,VALUE_CX1
                SUB BH,BH
                MOV VALUE_CX1,AX
                SHR VALUE_CX1,cl
                AND VALUE_CX1,1111111100000000B
                ADD VALUE_CX1,BX
                
                
            SHR112:
                cmp source_index,21
                jne SHRL12
                
                MOV AX,VALUE_CX1
                SUB AL,AL
                MOV BX,VALUE_CX1
                SUB BH,BH
                MOV VALUE_CX1,AX
                MOV CX,VALUE1
                SHR VALUE_CX1,CL
                AND VALUE_CX1,1111111100000000B
                ADD VALUE_CX1,BX 
                
  SHRL12:
                
  cmp dest_index,12
    jne SHR13
    
            SHR121:
            
                cmp source_index,7 
                jne SHR122
                
                MOV AX,VALUE_DX1
                SUB AL,AL
                MOV BX,VALUE_DX1
                SUB BH,BH
                MOV VALUE_DX1,AX
                MOV CX,VALUE_CX1
                SHR VALUE_DX1,cl
                AND VALUE_DX1,1111111100000000B
                ADD VALUE_DX1,BX
                
                
            SHR122:
                cmp source_index,21
                jne SHR13
                
                MOV AX,VALUE_DX1
                SUB AL,AL
                MOV BX,VALUE_DX1
                SUB BH,BH
                MOV VALUE_DX1,AX
                MOV CX,VALUE1
                SHR VALUE_DX1,CL
                AND VALUE_DX1,1111111100000000B
                ADD VALUE_DX1,BX 
   
   SHR13:             
                
   cmp dest_index,13
    jne SHR14
    
            SHR131:
            
                cmp source_index,7 
                jne SHR132
                
                MOV CX,VALUE_CX1
                SHR VALUE_SI1,cl
                
                
            SHR132:
                cmp source_index,21
                jne SHR14
                
                MOV CX,VALUE1
                SHR VALUE_SI1,CL   
                
    SHR14: 
             
    cmp dest_index,14
    jne SHR15
    
            SHR141:
            
                cmp source_index,7 
                jne SHR142
                
                MOV CX,VALUE_CX1
                SHR VALUE_DI1,cl
                
                
            SHR142:
                cmp source_index,21
                jne SHR15
                
                MOV CX,VALUE1
                SHR VALUE_DI1,CL             
      
     SHR15: 
                
      cmp dest_index,15
    jne SHR16
    
            SHR151:
            
                cmp source_index,7 
                jne SHR152
                
                MOV CX,VALUE_CX1
                SHR VALUE_BP1,cl
                
                
            SHR152:
                cmp source_index,21
                jne SHR16
                
                MOV CX,VALUE1
                SHR VALUE_BP1,CL
     
    SHR16: 
                      
     cmp dest_index,16
    jne TESTEE5
    
            SHR161:
            
                cmp source_index,7 
                jne SHR162
                
                MOV CX,VALUE_CX1
                SHR VALUE_SP1,cl
                
                
            SHR162:
                cmp source_index,21
                jne TESTEE5
                
                MOV CX,VALUE1
                SHR VALUE_SP1,CL   
        
        
        
        
        
        TESTEE5:
       RET
      SHR_INST ENDP     
ROR_INST PROC NEAR
        
        cmp inst_index,7
        jne TESTEE6
        
        cmp dest_index,1
        JNE ROR2
       
    
            ROR11:
            
                cmp source_index,7 
                jne ROR12
                
                MOV CX,VALUE_CX1
                ROR VALUE_AX1,cl
                
                
            ROR12:
                cmp source_index,21
                jne ROR2
                
                MOV CX,VALUE1
                ROR VALUE_AX1,CL   
                
    
    ROR2:
             
    cmp dest_index,2
    jne ROR3
    
            ROR21:
            
                cmp source_index,7 
                jne ROR22
                
                MOV CX,VALUE_CX1
                ROR VALUE_BX1,cl
                
                
            ROR22:
                cmp source_index,21
                jne ROR3
                
                MOV CX,VALUE1
                ROR VALUE_BX1,CL             
     
     ROR3:
                
      cmp dest_index,3
    jne ROR4
    
            ROR31:
            
                cmp source_index,7 
                jne ROR32
                
                MOV CX,VALUE_CX1
                ROR VALUE_CX1,cl
                
                
            ROR32:
                cmp source_index,21
                jne ROR4
                
                MOV CX,VALUE1
                ROR VALUE_CX1,CL
      
     ROR4:
                      
     cmp dest_index,4
    jne ROR5
    
            ROR41:
            
                cmp source_index,7 
                jne ROR42
                
                MOV CX,VALUE_CX1
                ROR VALUE_DX1,cl
                
                
            ROR42:
                cmp source_index,21
                jne ROR5
                
                MOV CX,VALUE1
                ROR VALUE_DX1,CL  
                
                
    ROR5:            
                
    cmp dest_index,5
    jne ROR6
    
            ROR51:
            
                cmp source_index,7 
                jne ROR52
                
                
                MOV AX,VALUE_AX1
                SUB AH,AH
                MOV BX,VALUE_AX1
                SUB BL,BL
                MOV VALUE_AX1,AX
                MOV CX,VALUE_CX1
                ROR VALUE_AX1,cl
                AND VALUE_AX1,0000000011111111B
                ADD VALUE_AX1,BX
                
                
            ROR52:
                cmp source_index,21
                jne ROR6
                
                MOV AX,VALUE_AX1
                SUB AH,AH
                MOV BX,VALUE_AX1
                SUB BL,BL
                MOV VALUE_AX1,AX
                MOV CX,VALUE1
                ROR VALUE_AX1,CL
                AND VALUE_AX1,0000000011111111B
                ADD VALUE_AX1,BX
     
     ROR6:
                
     cmp dest_index,6
    jne ROR7
    
            ROR61:
            
                cmp source_index,7 
                jne ROR62
                
                MOV AX,VALUE_BX1
                SUB AH,AH
                MOV BX,VALUE_BX1
                SUB BL,BL
                MOV VALUE_BX1,AX
                MOV CX,VALUE_CX1
                ROR VALUE_BX1,cl
                AND VALUE_BX1,0000000011111111B
                ADD VALUE_BX1,BX
                
                
            ROR62:
                cmp source_index,21
                jne ROR7
                
                MOV AX,VALUE_BX1
                SUB AH,AH
                MOV BX,VALUE_BX1
                SUB BL,BL
                MOV VALUE_BX1,AX
                MOV CX,VALUE1
                ROR VALUE_BX1,CL
                AND VALUE_BX1,0000000011111111B
                ADD VALUE_BX1,BX           
     
     ROR7:
                
     cmp dest_index,7
    jne ROR8
    
            ROR71:
            
                cmp source_index,7 
                jne ROR72
                
                MOV CX,VALUE_CX1
                MOV AX,VALUE_CX1
                SUB AH,AH
                MOV BX,VALUE_CX1
                SUB BL,BL
                MOV VALUE_CX1,AX
                
                ROR VALUE_CX1,cl
                AND VALUE_CX1,0000000011111111B
                ADD VALUE_CX1,BX
                
                
            ROR72:
                cmp source_index,21
                jne ROR8
                
                MOV AX,VALUE_CX1
                SUB AH,AH
                MOV BX,VALUE_CX1
                SUB BL,BL
                MOV VALUE_CX1,AX
                MOV CX,VALUE1
                ROR VALUE_CX1,CL
                AND VALUE_CX1,0000000011111111B
                ADD VALUE_CX1,BX           
     
     ROR8:
                
      cmp dest_index,8
    jne ROR9
    
            ROR81:
            
                cmp source_index,7 
                jne ROR82
                
                MOV AX,VALUE_DX1
                SUB AH,AH
                MOV BX,VALUE_DX1
                SUB BL,BL
                MOV VALUE_DX1,AX
                MOV CX,VALUE_CX1
                ROR VALUE_DX1,cl
                AND VALUE_DX1,0000000011111111B
                ADD VALUE_DX1,BX
                
                
            ROR82:
                cmp source_index,21
                jne ROR9
                
                MOV AX,VALUE_DX1
                SUB AH,AH
                MOV BX,VALUE_DX1
                SUB BL,BL
                MOV VALUE_DX1,AX
                MOV CX,VALUE1
                ROR VALUE_DX1,CL
                AND VALUE_DX1,0000000011111111B
                ADD VALUE_DX1,BX          
     
     ROR9:
                
     cmp dest_index,9
    jne ROR10
    
            ROR91:
            
                cmp source_index,7 
                jne ROR92
                
                MOV AX,VALUE_AX1
                SUB AL,AL
                MOV BX,VALUE_AX1
                SUB BH,BH
                MOV VALUE_AX1,AX
                MOV CX,VALUE_CX1
                ROR VALUE_AX1,cl
                AND VALUE_AX1,1111111100000000B
                ADD VALUE_AX1,BX
                
                
            ROR92:
                cmp source_index,21
                jne ROR10
                
                MOV AX,VALUE_AX1
                SUB AL,AL
                MOV BX,VALUE_AX1
                SUB BH,BH
                MOV VALUE_AX1,AX
                MOV CX,VALUE1
                ROR VALUE_AX1,CL
                AND VALUE_AX1,1111111100000000B
                ADD VALUE_AX1,BX           
     
    ROR10: 
                
     cmp dest_index,10
    jne RORR11
    
            ROR101:
            
                cmp source_index,7 
                jne ROR102
                
                MOV AX,VALUE_BX1
                SUB AL,AL
                MOV BX,VALUE_BX1
                SUB BH,BH
                MOV VALUE_BX1,AX
                MOV CX,VALUE_CX1
                ROR VALUE_BX1,cl
                AND VALUE_BX1,1111111100000000B
                ADD VALUE_BX1,BX
                
                
            ROR102:
                cmp source_index,21
                jne RORR11
                
                MOV AX,VALUE_BX1
                SUB AL,AL
                MOV BX,VALUE_BX1
                SUB BH,BH
                MOV VALUE_BX1,AX
                MOV CX,VALUE1
                ROR VALUE_BX1,CL
                AND VALUE_BX1,1111111100000000B
                ADD VALUE_BX1,BX 
                
  RORR11:               
                
    cmp dest_index,11
    jne RORR12
    
            ROR111:
            
                cmp source_index,7 
                jne ROR112
                
                MOV CX,VALUE_CX1         
                MOV AX,VALUE_CX1
                SUB AL,AL
                MOV BX,VALUE_CX1
                SUB BH,BH
                MOV VALUE_CX1,AX
                ROR VALUE_CX1,cl
                AND VALUE_CX1,1111111100000000B
                ADD VALUE_CX1,BX
                
                
            ROR112:
                cmp source_index,21
                jne RORR12
                
                MOV AX,VALUE_CX1
                SUB AL,AL
                MOV BX,VALUE_CX1
                SUB BH,BH
                MOV VALUE_CX1,AX
                MOV CX,VALUE1
                ROR VALUE_CX1,CL
                AND VALUE_CX1,1111111100000000B
                ADD VALUE_CX1,BX 
                
  RORR12:
                
  cmp dest_index,12
    jne ROR13
    
            ROR121:
            
                cmp source_index,7 
                jne ROR122
                
                MOV AX,VALUE_DX1
                SUB AL,AL
                MOV BX,VALUE_DX1
                SUB BH,BH
                MOV VALUE_DX1,AX
                MOV CX,VALUE_CX1
                ROR VALUE_DX1,cl
                AND VALUE_DX1,1111111100000000B
                ADD VALUE_DX1,BX
                
                
            ROR122:
                cmp source_index,21
                jne ROR13
                
                MOV AX,VALUE_DX1
                SUB AL,AL
                MOV BX,VALUE_DX1
                SUB BH,BH
                MOV VALUE_DX1,AX
                MOV CX,VALUE1
                ROR VALUE_DX1,CL
                AND VALUE_DX1,1111111100000000B
                ADD VALUE_DX1,BX 
   
   ROR13:             
                
   cmp dest_index,13
    jne ROR14
    
            ROR131:
            
                cmp source_index,7 
                jne ROR132
                
                MOV CX,VALUE_CX1
                ROR VALUE_SI1,cl
                
                
            ROR132:
                cmp source_index,21
                jne ROR14
                
                MOV CX,VALUE1
                ROR VALUE_SI1,CL   
                
    ROR14: 
             
    cmp dest_index,14
    jne ROR15
    
            ROR141:
            
                cmp source_index,7 
                jne ROR142
                
                MOV CX,VALUE_CX1
                ROR VALUE_DI1,cl
                
                
            ROR142:
                cmp source_index,21
                jne ROR15
                
                MOV CX,VALUE1
                ROR VALUE_DI1,CL             
      
     ROR15: 
                
      cmp dest_index,15
    jne ROR16
    
            ROR151:
            
                cmp source_index,7 
                jne ROR152
                
                MOV CX,VALUE_CX1
                ROR VALUE_BP1,cl
                
                
            ROR152:
                cmp source_index,21
                jne ROR16
                
                MOV CX,VALUE1
                ROR VALUE_BP1,CL
     
    ROR16: 
                      
     cmp dest_index,16
    jne TESTEE6
    
            ROR161:
            
                cmp source_index,7 
                jne ROR162
                
                MOV CX,VALUE_CX1
                ROR VALUE_SP1,cl
                
                
            ROR162:
                cmp source_index,21
                jne TESTEE6
                
                MOV CX,VALUE1
                ROR VALUE_SP1,CL
        
        
        
        
        
        
        TESTEE6:
        RET
        ROR_INST ENDP      
ROL_INST PROC NEAR
        
        cmp inst_index,8
        jne TESTEE7
        
        cmp dest_index,1
        JNE ROL2
       
    
            ROL11:
            
                cmp source_index,7 
                jne ROL12
                
                MOV CX,VALUE_CX1
                ROL VALUE_AX1,cl
                
                
            ROL12:
                cmp source_index,21
                jne ROL2
                
                MOV CX,VALUE1
                ROL VALUE_AX1,CL   
                
    
    ROL2:
             
    cmp dest_index,2
    jne ROL3
    
            ROL21:
            
                cmp source_index,7 
                jne ROL22
                
                MOV CX,VALUE_CX1
                ROL VALUE_BX1,cl
                
                
            ROL22:
                cmp source_index,21
                jne ROL3
                
                MOV CX,VALUE1
                ROL VALUE_BX1,CL             
     
     ROL3:
                
      cmp dest_index,3
    jne ROL4
    
            ROL31:
            
                cmp source_index,7 
                jne ROL32
                
                MOV CX,VALUE_CX1
                ROL VALUE_CX1,cl
                
                
            ROL32:
                cmp source_index,21
                jne ROL4
                
                MOV CX,VALUE1
                ROL VALUE_CX1,CL
      
     ROL4:
                      
     cmp dest_index,4
    jne ROL5
    
            ROL41:
            
                cmp source_index,7 
                jne ROL42
                
                MOV CX,VALUE_CX1
                ROL VALUE_DX1,cl
                
                
            ROL42:
                cmp source_index,21
                jne ROL5
                
                MOV CX,VALUE1
                ROL VALUE_DX1,CL  
                
                
    ROL5:            
                
    cmp dest_index,5
    jne ROL6
    
            ROL51:
            
                cmp source_index,7 
                jne ROL52
                
                
                MOV AX,VALUE_AX1
                SUB AH,AH
                MOV BX,VALUE_AX1
                SUB BL,BL
                MOV VALUE_AX1,AX
                MOV CX,VALUE_CX1
                ROL VALUE_AX1,cl
                AND VALUE_AX1,0000000011111111B
                ADD VALUE_AX1,BX
                
                
            ROL52:
                cmp source_index,21
                jne ROL6
                
                MOV AX,VALUE_AX1
                SUB AH,AH
                MOV BX,VALUE_AX1
                SUB BL,BL
                MOV VALUE_AX1,AX
                MOV CX,VALUE1
                ROL VALUE_AX1,CL
                AND VALUE_AX1,0000000011111111B
                ADD VALUE_AX1,BX
     
     ROL6:
                
     cmp dest_index,6
    jne ROL7
    
            ROL61:
            
                cmp source_index,7 
                jne ROL62
                
                MOV AX,VALUE_BX1
                SUB AH,AH
                MOV BX,VALUE_BX1
                SUB BL,BL
                MOV VALUE_BX1,AX
                MOV CX,VALUE_CX1
                ROL VALUE_BX1,cl
                AND VALUE_BX1,0000000011111111B
                ADD VALUE_BX1,BX
                
                
            ROL62:
                cmp source_index,21
                jne ROL7
                
                MOV AX,VALUE_BX1
                SUB AH,AH
                MOV BX,VALUE_BX1
                SUB BL,BL
                MOV VALUE_BX1,AX
                MOV CX,VALUE1
                ROL VALUE_BX1,CL
                AND VALUE_BX1,0000000011111111B
                ADD VALUE_BX1,BX           
     
     ROL7:
                
     cmp dest_index,7
    jne ROL8
    
            ROL71:
            
                cmp source_index,7 
                jne ROL72
                
                MOV CX,VALUE_CX1
                MOV AX,VALUE_CX1
                SUB AH,AH
                MOV BX,VALUE_CX1
                SUB BL,BL
                MOV VALUE_CX1,AX
                
                ROL VALUE_CX1,cl
                AND VALUE_CX1,0000000011111111B
                ADD VALUE_CX1,BX
                
                
            ROL72:
                cmp source_index,21
                jne ROL8
                
                MOV AX,VALUE_CX1
                SUB AH,AH
                MOV BX,VALUE_CX1
                SUB BL,BL
                MOV VALUE_CX1,AX
                MOV CX,VALUE1
                ROL VALUE_CX1,CL
                AND VALUE_CX1,0000000011111111B
                ADD VALUE_CX1,BX           
     
     ROL8:
                
      cmp dest_index,8
    jne ROL9
    
            ROL81:
            
                cmp source_index,7 
                jne ROL82
                
                MOV AX,VALUE_DX1
                SUB AH,AH
                MOV BX,VALUE_DX1
                SUB BL,BL
                MOV VALUE_DX1,AX
                MOV CX,VALUE_CX1
                ROL VALUE_DX1,cl
                AND VALUE_DX1,0000000011111111B
                ADD VALUE_DX1,BX
                
                
            ROL82:
                cmp source_index,21
                jne ROL9
                
                MOV AX,VALUE_DX1
                SUB AH,AH
                MOV BX,VALUE_DX1
                SUB BL,BL
                MOV VALUE_DX1,AX
                MOV CX,VALUE1
                ROL VALUE_DX1,CL
                AND VALUE_DX1,0000000011111111B
                ADD VALUE_DX1,BX          
     
     ROL9:
                
     cmp dest_index,9
    jne ROL10
    
            ROL91:
            
                cmp source_index,7 
                jne ROL92
                
                MOV AX,VALUE_AX1
                SUB AL,AL
                MOV BX,VALUE_AX1
                SUB BH,BH
                MOV VALUE_AX1,AX
                MOV CX,VALUE_CX1
                ROL VALUE_AX1,cl
                AND VALUE_AX1,1111111100000000B
                ADD VALUE_AX1,BX
                
                
            ROL92:
                cmp source_index,21
                jne ROL10
                
                MOV AX,VALUE_AX1
                SUB AL,AL
                MOV BX,VALUE_AX1
                SUB BH,BH
                MOV VALUE_AX1,AX
                MOV CX,VALUE1
                ROL VALUE_AX1,CL
                AND VALUE_AX1,1111111100000000B
                ADD VALUE_AX1,BX           
     
    ROL10: 
                
     cmp dest_index,10
    jne ROLR11
    
            ROL101:
            
                cmp source_index,7 
                jne ROL102
                
                MOV AX,VALUE_BX1
                SUB AL,AL
                MOV BX,VALUE_BX1
                SUB BH,BH
                MOV VALUE_BX1,AX
                MOV CX,VALUE_CX1
                ROL VALUE_BX1,cl
                AND VALUE_BX1,1111111100000000B
                ADD VALUE_BX1,BX
                
                
            ROL102:
                cmp source_index,21
                jne ROLR11
                
                MOV AX,VALUE_BX1
                SUB AL,AL
                MOV BX,VALUE_BX1
                SUB BH,BH
                MOV VALUE_BX1,AX
                MOV CX,VALUE1
                ROL VALUE_BX1,CL
                AND VALUE_BX1,1111111100000000B
                ADD VALUE_BX1,BX 
                
  ROLR11:               
                
    cmp dest_index,11
    jne ROLR12
    
            ROL111:
            
                cmp source_index,7 
                jne ROL112
                
                MOV CX,VALUE_CX1         
                MOV AX,VALUE_CX1
                SUB AL,AL
                MOV BX,VALUE_CX1
                SUB BH,BH
                MOV VALUE_CX1,AX
                ROL VALUE_CX1,cl
                AND VALUE_CX1,1111111100000000B
                ADD VALUE_CX1,BX
                
                
            ROL112:
                cmp source_index,21
                jne ROLR12
                
                MOV AX,VALUE_CX1
                SUB AL,AL
                MOV BX,VALUE_CX1
                SUB BH,BH
                MOV VALUE_CX1,AX
                MOV CX,VALUE1
                ROL VALUE_CX1,CL
                AND VALUE_CX1,1111111100000000B
                ADD VALUE_CX1,BX 
                
  ROLR12:
                
  cmp dest_index,12
    jne ROL13
    
            ROL121:
            
                cmp source_index,7 
                jne ROL122
                
                MOV AX,VALUE_DX1
                SUB AL,AL
                MOV BX,VALUE_DX1
                SUB BH,BH
                MOV VALUE_DX1,AX
                MOV CX,VALUE_CX1
                ROL VALUE_DX1,cl
                AND VALUE_DX1,1111111100000000B
                ADD VALUE_DX1,BX
                
                
            ROL122:
                cmp source_index,21
                jne ROL13
                
                MOV AX,VALUE_DX1
                SUB AL,AL
                MOV BX,VALUE_DX1
                SUB BH,BH
                MOV VALUE_DX1,AX
                MOV CX,VALUE1
                ROL VALUE_DX1,CL
                AND VALUE_DX1,1111111100000000B
                ADD VALUE_DX1,BX 
   
   ROL13:             
                
   cmp dest_index,13
    jne ROL14
    
            ROL131:
            
                cmp source_index,7 
                jne ROL132
                
                MOV CX,VALUE_CX1
                ROL VALUE_SI1,cl
                
                
            ROL132:
                cmp source_index,21
                jne ROL14
                
                MOV CX,VALUE1
                ROL VALUE_SI1,CL   
                
    ROL14: 
             
    cmp dest_index,14
    jne ROL15
    
            ROL141:
            
                cmp source_index,7 
                jne ROL142
                
                MOV CX,VALUE_CX1
                ROL VALUE_DI1,cl
                
                
            ROL142:
                cmp source_index,21
                jne ROL15
                
                MOV CX,VALUE1
                ROL VALUE_DI1,CL             
      
     ROL15: 
                
      cmp dest_index,15
    jne ROL16
    
            ROL151:
            
                cmp source_index,7 
                jne ROL152
                
                MOV CX,VALUE_CX1
                ROL VALUE_BP1,cl
                
                
            ROL152:
                cmp source_index,21
                jne ROL16
                
                MOV CX,VALUE1
                ROL VALUE_BP1,CL
     
    ROL16: 
                      
     cmp dest_index,16
    jne TESTEE7
    
            ROL161:
            
                cmp source_index,7 
                jne ROL162
                
                MOV CX,VALUE_CX1
                ROL VALUE_SP1,cl
                
                
            ROL162:
                cmp source_index,21
                jne TESTEE7
                
                MOV CX,VALUE1
                ROL VALUE_SP1,CL
        
        
        
        
        
        
        TESTEE7:
        RET
        ROL_INST ENDP            
SUB_INST PROC NEAR
             
             cmp inst_index,3
            jne TESTEE3
    
    cmp dest_index,1
    jne SUB2
    
            SUB11:
    
                cmp source_index,1
                jne SUB12
                
                mov ax,VALUE_AX1
                SUB VALUE_AX1,ax
                
                
            SUB12:
                cmp source_index,2
                jne SUB13
                
                mov ax,VALUE_BX1
                SUB VALUE_AX1,ax
                
            SUB13:
                cmp source_index,3
                jne SUB14
                
                mov ax,VALUE_CX1
                SUB VALUE_AX1,ax
                           
            SUB14:
                cmp source_index,4
                jne SUB15
                
                mov ax,VALUE_DX1
                SUB VALUE_AX1,ax
                
            SUB15:
                cmp source_index,13
                jne SUB16
                
                mov ax,VALUE_SI1
                SUB VALUE_AX1,ax
                
            SUB16:
                cmp source_index,14
                jne SUB17
                
                mov ax,VALUE_DI1
                SUB VALUE_AX1,ax   
                
            SUB17:
                cmp source_index,15
                jne SUB18 
                
                mov ax,VALUE_BP1
                SUB VALUE_AX1,ax
                
            SUB18:
                cmp source_index,16
                jne SUB19
                
                mov ax,VALUE_SP1
                SUB VALUE_AX1,ax
                
            SUB19:
                cmp source_index,21
                jne SUB2
                
                mov ax,VALUE1
                SUB VALUE_AX1,ax
        
       SUB2: 
                
       cmp dest_index,2
       jne SUB3
       
       
      
            SUB21:
    
                cmp source_index,1
                jne SUB22
                
                mov ax,VALUE_AX1
                SUB VALUE_BX1,ax
                
                
            SUB22:
                cmp source_index,2
                jne SUB23
                
                MOV ax,VALUE_BX1
                SUB VALUE_BX1,ax
                
            SUB23:
                cmp source_index,3
                jne SUB24
                
                mov ax,VALUE_CX1
                SUB VALUE_BX1,ax
                           
            SUB24:
                cmp source_index,4
                jne SUB25
                
                mov ax,VALUE_DX1
                SUB VALUE_BX1,ax
                
            SUB25:
                cmp source_index,13
                jne SUB26
                
                mov ax,VALUE_SI1
                SUB VALUE_BX1,ax
                
            SUB26:
                cmp source_index,14
                jne SUB27
                
                mov ax,VALUE_DI1
                SUB VALUE_BX1,ax   
                
            SUB27:
                cmp source_index,15
                jne SUB28 
                
                mov ax,VALUE_BP1
                SUB VALUE_BX1,ax
                
            SUB28:
                cmp source_index,16
                jne SUB29
                
                mov ax,VALUE_SP1
                SUB VALUE_BX1,ax
                
            SUB29:
                cmp source_index,21
                jne SUB3
                
                mov ax,VALUE1
                SUB VALUE_BX1,ax     
       
    SUB3:   
       cmp dest_index,3
       jne SUB4
    
            SUB31:
    
                cmp source_index,1
                jne SUB32
                
                mov ax,VALUE_AX1
                SUB VALUE_CX1,ax
                
                
            SUB32:
                cmp source_index,2
                jne SUB33
                
                mov ax,VALUE_BX1
                SUB VALUE_CX1,ax
                
            SUB33:
                cmp source_index,3
                jne SUB34
                
                mov ax,VALUE_CX1
                SUB VALUE_CX1,ax
                           
            SUB34:
                cmp source_index,4
                jne SUB35
                
                mov ax,VALUE_DX1
                SUB VALUE_CX1,ax
                
            SUB35:
                cmp source_index,13
                jne SUB36
                
                mov ax,VALUE_SI1
                SUB VALUE_CX1,ax
                
            SUB36:
                cmp source_index,14
                jne SUB37
                
                mov ax,VALUE_DI1
                SUB VALUE_CX1,ax   
                
            SUB37:
                cmp source_index,15
                jne SUB38 
                
                mov ax,VALUE_BP1
                SUB VALUE_CX1,ax
                
            SUB38:
                cmp source_index,16
                jne SUB39
                
                mov ax,VALUE_SP1
                SUB VALUE_CX1,ax
                
            SUB39:
                cmp source_index,21
                jne SUB4
                
                mov ax,VALUE1
                SUB VALUE_CX1,ax
                
     SUB4:   
       cmp dest_index,4
       jne SUB5
    
            SUB41:
    
                cmp source_index,1
                jne SUB42
                
                mov ax,VALUE_AX1
                SUB VALUE_DX1,ax
                
                
            SUB42:
                cmp source_index,2
                jne SUB43
                
                mov ax,VALUE_BX1
                SUB VALUE_DX1,ax
                
            SUB43:
                cmp source_index,3
                jne SUB44
                
                mov ax,VALUE_CX1
                SUB VALUE_DX1,ax
                           
            SUB44:
                cmp source_index,4
                jne SUB45
                
                mov ax,VALUE_DX1
                SUB VALUE_DX1,ax
                
            SUB45:
                cmp source_index,13
                jne SUB46
                
                mov ax,VALUE_SI1
                SUB VALUE_DX1,ax
                
            SUB46:
                cmp source_index,14
                jne SUB47
                
                mov ax,VALUE_DI1
                SUB VALUE_DX1,ax   
                
            SUB47:
                cmp source_index,15
                jne SUB48 
                
                mov ax,VALUE_BP1
                SUB VALUE_DX1,ax
                
            SUB48:
                cmp source_index,16
                jne SUB49
                
                mov ax,VALUE_SP1
                SUB VALUE_DX1,ax
                
            SUB49:
                cmp source_index,21
                jne SUB5
                
                mov ax,VALUE1
                SUB VALUE_DX1,ax
                
                
      SUB5:   
       cmp dest_index,5
       jne SUB6
       
            SUB51:
                cmp source_index,5
                jne SUB52
                
                
                mov AX,VALUE_AX1
                SUB AH,AH
                SUB VALUE_AX1,AX
                
            SUB52:
                cmp source_index,6
                jne SUB53
                
                mov AX,VALUE_BX1
                SUB AH,AH
                SUB VALUE_AX1,AX
            
            SUB53:
                cmp source_index,7
                jne SUB54
                
                mov AX,VALUE_CX1
                SUB AH,AH
                SUB VALUE_AX1,AX 
                
            SUB54:
                cmp source_index,8
                jne SUB55
                
                mov AX,VALUE_DX1
                SUB AH,AH
                SUB VALUE_AX1,AX
                
           SUB55:
                cmp source_index,9
                jne SUB56
                
                mov AX,VALUE_AX1
                SUB AL,AL
                SHR AX,8
                SUB VALUE_AX1,AX
                
            SUB56:
                cmp source_index,10
                jne SUB57
                
                mov AX,VALUE_BX1
                SUB AL,AL 
                SHR AX,8
                SUB VALUE_AX1,AX
            
            SUB57:
                cmp source_index,11
                jne SUB58
                
                mov AX,VALUE_CX1
                SUB AL,AL
                SHR AX,8
                SUB VALUE_AX1,AX 
                
            SUB58:
                cmp source_index,12
                jne SUB59
                
                mov AX,VALUE_DX1
                SUB AL,AL
                SHR AX,8
                SUB VALUE_AX1,AX
                
            SUB59:
                cmp source_index,21
                jne SUB6
                
                mov AX,VALUE1
                SHL AX,8
                
                SUB VALUE_AX1,AX    
                  
                
       SUB6:   
       cmp dest_index,6
       jne SUB7
       
            SUB61:
                cmp source_index,5
                jne SUB62
                
                
                mov AX,VALUE_AX1
                SUB AH,AH
                SUB VALUE_AX1,AX
                
            SUB62:
                cmp source_index,6
                jne SUB63
                
                mov AX,VALUE_BX1
                SUB AH,AH
                SUB VALUE_BX1,AX
            
            SUB63:
                cmp source_index,7
                jne SUB64
                
                mov AX,VALUE_CX1
                SUB AH,AH
                SUB VALUE_BX1,AX 
                
            SUB64:
                cmp source_index,8
                jne SUB65
                
                mov AX,VALUE_DX1
                SUB AH,AH
                SUB VALUE_BX1,AX
                
           SUB65:
                cmp source_index,9
                jne SUB66
                
                mov AX,VALUE_AX1
                SUB AL,AL
                SHR AX,8
                SUB VALUE_BX1,AX
                
            SUB66:
                cmp source_index,10
                jne SUB67
                
                mov AX,VALUE_BX1
                SUB AL,AL 
                SHR AX,8
                SUB VALUE_BX1,AX
            
            SUB67:
                cmp source_index,11
                jne SUB68
                
                mov AX,VALUE_CX1
                SUB AL,AL
                SHR AX,8
                SUB VALUE_BX1,AX 
                
            SUB68:
                cmp source_index,12
                jne SUB69
                
                mov AX,VALUE_DX1
                SUB AL,AL
                SHR AX,8
                SUB VALUE_BX1,AX
                
            SUB69:
                cmp source_index,21
                jne SUB7
                
                mov AX,VALUE1
                SHL AX,8
                
                SUB VALUE_BX1,AX      
                
                
                
       SUB7:   
       cmp dest_index,7
       jne SUB8
       
            SUB71:
                cmp source_index,5
                jne SUB72
                
                
                mov AX,VALUE_AX1
                SUB AH,AH
                SUB VALUE_CX1,AX
                
            SUB72:
                cmp source_index,6
                jne SUB73
                
                mov AX,VALUE_BX1
                SUB AH,AH
                SUB VALUE_CX1,AX
            
            SUB73:
                cmp source_index,7
                jne SUB74
                
                mov AX,VALUE_CX1
                SUB AH,AH
                SUB VALUE_CX1,AX 
                
            SUB74:
                cmp source_index,8
                jne SUB75
                
                mov AX,VALUE_DX1
                SUB AH,AH
                SUB VALUE_CX1,AX
                
           SUB75:
                cmp source_index,9
                jne SUB76
                
                mov AX,VALUE_AX1
                SUB AL,AL
                SHR AX,8
                SUB VALUE_CX1,AX
                
            SUB76:
                cmp source_index,10
                jne SUB77
                
                mov AX,VALUE_BX1
                SUB AL,AL 
                SHR AX,8
                SUB VALUE_CX1,AX
            
            SUB77:
                cmp source_index,11
                jne SUB78
                
                mov AX,VALUE_CX1
                SUB AL,AL
                SHR AX,8
                SUB VALUE_CX1,AX 
                
            SUB78:
                cmp source_index,12
                jne SUB79
                
                mov AX,VALUE_DX1
                SUB AL,AL
                SHR AX,8
                SUB VALUE_CX1,AX 
                
            SUB79:
                cmp source_index,21
                jne SUB8
                
                mov AX,VALUE1
                SHL AX,8
                
                SUB VALUE_CX1,AX
                           
                
      SUB8:   
       cmp dest_index,8
       jne SUB9
       
             SUB81:
                cmp source_index,5
                jne SUB82
                       
                
                mov AX,VALUE_AX1
                SUB AH,AH
                SUB VALUE_DX1,AX
                
            SUB82:
                cmp source_index,6
                jne SUB83
                       
                mov AX,VALUE_BX1
                SUB AH,AH
                SUB VALUE_DX1,AX
            
            SUB83:
                cmp source_index,7
                jne SUB84
                
                mov AX,VALUE_CX1
                SUB AH,AH
                SUB VALUE_DX1,AX 
                
            SUB84:
                cmp source_index,8
                jne SUB85
                
                mov AX,VALUE_DX1
                SUB AH,AH
                SUB VALUE_DX1,AX
                
            SUB85:
                cmp source_index,9
                jne SUB86
                
                mov AX,VALUE_AX1
                SUB AL,AL
                SHR AX,8
                SUB VALUE_DX1,AX
                
            SUB86:
                cmp source_index,10
                jne SUB87
                
                mov AX,VALUE_BX1
                SUB AL,AL 
                SHR AX,8
                SUB VALUE_DX1,AX
            
            SUB87:
                cmp source_index,11
                jne SUB88
                
                mov AX,VALUE_CX1
                SUB AL,AL
                SHR AX,8
                SUB VALUE_DX1,AX 
                
            SUB88:
                cmp source_index,12
                jne SUB89
                
                mov AX,VALUE_DX1
                SUB AL,AL
                SHR AX,8
                SUB VALUE_DX1,AX 
                
                
            SUB89:
                cmp source_index,21
                jne SUB9
                
                mov AX,VALUE1
                SHL AX,8
                
                SUB VALUE_DX1,AX
      
      
      SUB9:   
       cmp dest_index,9
       jne SUB10
       
             SUB91:
                cmp source_index,5
                jne SUB92
                       
                
                mov AX,VALUE_AX1
                SUB AH,AH
                SHL AX,8
                SUB VALUE_AX1,AX
                
            SUB92:
                cmp source_index,6
                jne SUB93
                       
                mov AX,VALUE_BX1
                SUB AH,AH
                SHL AX,8
                SUB VALUE_AX1,AX
            
            SUB93:
                cmp source_index,7
                jne SUB94
                
                mov AX,VALUE_CX1
                SUB AH,AH
                SHL AX,8
                SUB VALUE_AX1,AX 
                
            SUB94:
                cmp source_index,8
                jne SUB95
                
                mov AX,VALUE_DX1
                SUB AH,AH
                SHL AX,8
                SUB VALUE_AX1,AX
                
           SUB95:
                cmp source_index,9
                jne SUB96
                
                mov AX,VALUE_AX1
                SUB AL,AL
                SUB VALUE_AX1,AX
                
            SUB96:
                cmp source_index,10
                jne SUB97
                
                mov AX,VALUE_BX1
                SUB AL,AL
                SUB VALUE_AX1,AX
            
            SUB97:
                cmp source_index,11
                jne SUB98
                
                mov AX,VALUE_CX1
                SUB AL,AL
                SUB VALUE_AX1,AX 
                
            SUB98:
                cmp source_index,12
                jne SUB99
                
                mov AX,VALUE_DX1
                SUB AL,AL
                SUB VALUE_AX1,AX
                
            SUB99:
                cmp source_index,21
                jne SUB10
                
                mov AX,VALUE1
                SUB VALUE_AX1,AX 
                
                    
      
      
      SUB10:   
       cmp dest_index,10
       jne SUBB11
       
            SUB101:
                cmp source_index,5
                jne SUB102
                       
                
                mov AX,VALUE_AX1
                SUB AH,AH
                SHL AX,8
                SUB VALUE_BX1,AX
                
            SUB102:
                cmp source_index,6
                jne SUB103
                       
                mov AX,VALUE_BX1
                SUB AH,AH
                SHL AX,8
                SUB VALUE_BX1,AX
            
            SUB103:
                cmp source_index,7
                jne SUB104
                
                mov AX,VALUE_CX1
                SUB AH,AH
                SHL AX,8
                SUB VALUE_BX1,AX 
                
            SUB104:
                cmp source_index,8
                jne SUB105
                
                mov AX,VALUE_DX1
                SUB AH,AH
                SHL AX,8
                SUB VALUE_BX1,AX
                
           SUB105:
                cmp source_index,9
                jne SUB106
                
                mov AX,VALUE_AX1
                SUB AL,AL
                SUB VALUE_BX1,AX
                
            SUB106:
                cmp source_index,10
                jne SUB107
                
                mov AX,VALUE_BX1
                SUB AL,AL
                SUB VALUE_BX1,AX
            
            SUB107:
                cmp source_index,11
                jne SUB108
                
                mov AX,VALUE_CX1
                SUB AL,AL
                SUB VALUE_BX1,AX 
                
            SUB108:
                cmp source_index,12
                jne SUB109
                
                mov AX,VALUE_DX1
                SUB AL,AL
                SUB VALUE_BX1,AX 
            
            SUB109:
                cmp source_index,21
                jne SUBB11
                
                mov AX,VALUE1
                SUB VALUE_BX1,AX             
      
      
      SUBB11:   
       cmp dest_index,11
       jne SUBB12
       
             SUB111:
                cmp source_index,5
                jne SUB112
                       
                
                mov AX,VALUE_AX1
                SUB AH,AH
                SHL AX,8
                SUB VALUE_CX1,AX
                
            SUB112:
                cmp source_index,6
                jne SUB113
                       
                mov AX,VALUE_BX1
                SUB AH,AH
                SHL AX,8
                SUB VALUE_CX1,AX
            
            SUB113:
                cmp source_index,7
                jne SUB114
                
                mov AX,VALUE_CX1
                SUB AH,AH
                SHL AX,8
                SUB VALUE_CX1,AX 
                
           SUB114:
                cmp source_index,8
                jne SUB115
                
                mov AX,VALUE_DX1
                SUB AH,AH
                SHL AX,8
                SUB VALUE_CX1,AX
                
           SUB115:
                cmp source_index,9
                jne SUB116
                
                mov AX,VALUE_AX1
                SUB AL,AL
                SUB VALUE_CX1,AX
                
            SUB116:
                cmp source_index,10
                jne SUB117
                
                mov AX,VALUE_BX1
                SUB AL,AL
                SUB VALUE_CX1,AX
            
            SUB117:
                cmp source_index,11
                jne SUB118
                
                mov AX,VALUE_CX1
                SUB AL,AL
                SUB VALUE_CX1,AX 
                
            SUB118:
                cmp source_index,12
                jne SUB119
                
                mov AX,VALUE_DX1
                SUB AL,AL
                SUB VALUE_CX1,AX
                
            SUB119:
                cmp source_index,21
                jne SUBB12
                
                mov AX,VALUE1
                SUB VALUE_CX1,AX 
                
                    
      
      
      SUBB12:   
       cmp dest_index,12
       jne SUBB13
       
             SUB121:
                cmp source_index,5
                jne SUB122
                       
                
                mov AX,VALUE_AX1
                SUB AH,AH
                SHL AX,8
                SUB VALUE_DX1,AX
                
            SUB122:
                cmp source_index,6
                jne SUB123
                       
                mov AX,VALUE_BX1
                SUB AH,AH
                SHL AX,8
                SUB VALUE_DX1,AX
            
            SUB123:
                cmp source_index,7
                jne SUB124
                
                mov AX,VALUE_CX1
                SUB AH,AH
                SHL AX,8
                SUB VALUE_DX1,AX 
                
            SUB124:
                cmp source_index,8
                jne SUB125
                
                mov AX,VALUE_DX1
                SUB AH,AH
                SHL AX,8
                SUB VALUE_DX1,AX
                
           SUB125:
                cmp source_index,9
                jne SUB126
                
                mov AX,VALUE_AX1
                SUB AL,AL
                SUB VALUE_DX1,AX
                
           SUB126:
                cmp source_index,10
                jne SUB127
                
                mov AX,VALUE_BX1
                SUB AL,AL
                SUB VALUE_DX1,AX
            
            SUB127:
                cmp source_index,11
                jne SUB128
                
                mov AX,VALUE_CX1
                SUB AL,AL
                SUB VALUE_DX1,AX 
                
            SUB128:
                cmp source_index,12
                jne SUB129
                
                mov AX,VALUE_DX1
                SUB AL,AL
                SUB VALUE_DX1,AX     
            
            SUB129:
                cmp source_index,21
                jne SUBB13
                
                mov AX,VALUE1
                SUB VALUE_DX1,AX 
   
   
   SUBB13:             
    cmp dest_index,13
    jne SUBB14
    
            SUB131:
    
                cmp source_index,1
                jne SUB132
                
                mov ax,VALUE_AX1
                SUB VALUE_SI1,ax
                
                
            SUB132:
                cmp source_index,2
                jne SUB133
                
                mov ax,VALUE_BX1
                SUB VALUE_SI1,ax
                
            SUB133:
                cmp source_index,3
                jne SUB134
                
                mov ax,VALUE_CX1
                SUB VALUE_SI1,ax
                           
            SUB134:
                cmp source_index,4
                jne SUB135
                
                mov ax,VALUE_DX1
                SUB VALUE_SI1,ax
                
            SUB135:
                cmp source_index,13
                jne SUB136
                
                mov ax,VALUE_SI1
                SUB VALUE_SI1,ax
                
            SUB136:
                cmp source_index,14
                jne SUB137
                
                mov ax,VALUE_DI1
                SUB VALUE_SI1,ax   
                
            SUB137:
                cmp source_index,15
                jne SUB138 
                
                mov ax,VALUE_BP1
                SUB VALUE_SI1,ax
                
            SUB138:
                cmp source_index,16
                jne SUB139
                
                mov ax,VALUE_SP1
                SUB VALUE_SI1,ax
                
            SUB139:
                cmp source_index,21
                jne SUBB14
                
                mov ax,VALUE1
                SUB VALUE_SI1,ax
        
       SUBB14: 
                
       cmp dest_index,14
       jne SUBB15
       
       
      
            SUB141:
    
                cmp source_index,1
                jne SUB142
                
                mov ax,VALUE_AX1
                SUB VALUE_DI1,ax
                
                
            SUB142:
                cmp source_index,2
                jne SUB143
                
                MOV ax,VALUE_BX1
                SUB VALUE_DI1,ax
                
            SUB143:
                cmp source_index,3
                jne SUB144
                
                mov ax,VALUE_CX1
                SUB VALUE_DI1,ax
                           
            SUB144:
                cmp source_index,4
                jne SUB145
                
                mov ax,VALUE_DX1
                SUB VALUE_DI1,ax
                
            SUB145:
                cmp source_index,13
                jne SUB146
                
                mov ax,VALUE_SI1
                SUB VALUE_DI1,ax
                
            SUB146:
                cmp source_index,14
                jne SUB147
                
                mov ax,VALUE_DI1
                SUB VALUE_DI1,ax   
                
            SUB147:
                cmp source_index,15
                jne SUB148 
                
                mov ax,VALUE_BP1
                SUB VALUE_DI1,ax
                
            SUB148:
                cmp source_index,16
                jne SUB149
                
                mov ax,VALUE_SP1
                SUB VALUE_DI1,ax
                
            SUB149:
                cmp source_index,21
                jne SUBB15
                
                mov ax,VALUE1
                SUB VALUE_DI1,ax     
       
    SUBB15:   
       cmp dest_index,15
       jne SUBB16
    
            SUB151:
    
                cmp source_index,1
                jne SUB152
                
                mov ax,VALUE_AX1
                SUB VALUE_BP1,ax
                
                
            SUB152:
                cmp source_index,2
                jne SUB153
                
                mov ax,VALUE_BX1
                SUB VALUE_BP1,ax
                
            SUB153:
                cmp source_index,3
                jne SUB154
                
                mov ax,VALUE_CX1
                SUB VALUE_BP1,ax
                           
            SUB154:
                cmp source_index,4
                jne SUB155
                
                mov ax,VALUE_DX1
                SUB VALUE_BP1,ax
                
            SUB155:
                cmp source_index,13
                jne SUB156
                
                mov ax,VALUE_SI1
                SUB VALUE_BP1,ax
                
            SUB156:
                cmp source_index,14
                jne SUB157
                
                mov ax,VALUE_DI1
                SUB VALUE_BP1,ax   
                
            SUB157:
                cmp source_index,15
                jne SUB158 
                
                mov ax,VALUE_BP1
                SUB VALUE_BP1,ax
                
            SUB158:
                cmp source_index,16
                jne SUB159
                
                mov ax,VALUE_SP1
                SUB VALUE_BP1,ax
                
            SUB159:
                cmp source_index,21
                jne SUBB16
                
                mov ax,VALUE1
                SUB VALUE_BP1,ax
                
     SUBB16:   
       cmp dest_index,16
       jne TESTEE3
    
            SUB161:
    
                cmp source_index,1
                jne SUB162
                
                mov ax,VALUE_AX1
                SUB VALUE_SP1,ax
                
                
            SUB162:
                cmp source_index,2
                jne SUB163
                
                mov ax,VALUE_BX1
                SUB VALUE_SP1,ax
                
            SUB163:
                cmp source_index,3
                jne SUB164
                
                mov ax,VALUE_CX1
                SUB VALUE_SP1,ax
                           
            SUB164:
                cmp source_index,4
                jne SUB165
                
                mov ax,VALUE_DX1
                SUB VALUE_SP1,ax
                
            SUB165:
                cmp source_index,13
                jne SUB166
                
                mov ax,VALUE_SI1
                SUB VALUE_SP1,ax
                
            SUB166:
                cmp source_index,14
                jne SUB167
                
                mov ax,VALUE_DI1
                SUB VALUE_SP1,ax   
                
            SUB167:
                cmp source_index,15
                jne SUB168 
                
                mov ax,VALUE_BP1
                SUB VALUE_SP1,ax
                
            SUB168:
                cmp source_index,16
                jne SUB169
                
                mov ax,VALUE_SP1
                SUB VALUE_SP1,ax
                
            SUB169:
                cmp source_index,21
                jne TESTEE3
                
                mov ax,VALUE1
                SUB VALUE_SP1,ax            
                
                
                                                 
             TESTEE3: 
             RET  
            SUB_INST ENDP     
MOV_INST PROC NEAR
			 
			 CMP INST_INDEX,1
			 JNE TESTEE
				cmp dest_index,13
				JNE MMOV2
				
				Cmp source_index,1
				JNE mmoov1
				MOV AX,VALUE_AX1
				MOV VALUE_SI1,AX
				JMP TESTEE
				
				mmoov1:
				Cmp source_index,2
				JNE mmoov2
				MOV AX,VALUE_BX1
				MOV VALUE_SI1,AX
				JMP TESTEE
				
				mmoov2:
				Cmp source_index,3
				JNE mmoov3
				MOV AX,VALUE_CX1
				MOV VALUE_SI1,AX
				JMP TESTEE
               
				
				mmoov3:
				Cmp source_index,4
				JNE mmoov2
				MOV AX,VALUE_DX1
				MOV VALUE_SI1,AX
				JMP TESTEE
			
			MMOV2:
			cmp Dest_Index,14
			JNE MMOV3
			
				Cmp source_index,1
				JNE mmoov1
				MOV AX,VALUE_AX1
				MOV VALUE_DI1,AX
				JMP TESTEE
				
				mmoov11:
				Cmp source_index,2
				JNE mmoov2
				MOV AX,VALUE_BX1
				MOV VALUE_DI1,AX
				JMP TESTEE
				
				mmoov12:
				Cmp source_index,3
				JNE mmoov3
				MOV AX,VALUE_CX1
				MOV VALUE_DI1,AX
				JMP TESTEE
                
             
				
				mmoov13:
				Cmp source_index,4
				JNE TESTEE
				MOV AX,VALUE_DX1
				MOV VALUE_DI1,AX
				JMP TESTEE
				
            MMOV3:
			CMP Dest_Index,15
			JNE MMOV4
				Cmp source_index,1
				JNE mmoov21
				MOV AX,VALUE_AX1
				MOV VALUE_BP1,AX
				JMP TESTEE
				
				mmoov21:
				Cmp source_index,2
				JNE mmoov22
				MOV AX,VALUE_BX1
				MOV VALUE_BP1,AX
				JMP TESTEE
				
				mmoov22:
				Cmp source_index,3
				JNE mmoov23
				MOV AX,VALUE_CX1
				MOV VALUE_BP1,AX
				JMP TESTEE
				
               
				
				mmoov23:
				Cmp source_index,4
				JNE TESTEE
				MOV AX,VALUE_DX1
				MOV VALUE_BP1,AX
				JMP TESTEE
				
				
		MMOV4:
		CMP DESt_index,16
		JNE mov11
		
			Cmp source_index,1
				JNE mmoov31
				MOV AX,VALUE_AX1
				MOV VALUE_SP1,AX
				JMP TESTEE
				
				mmoov31:
				Cmp source_index,2
				JNE mmoov32
				MOV AX,VALUE_BX1
				MOV VALUE_SP1,AX
				JMP TESTEE
				
				mmoov32:
				Cmp source_index,3
				JNE mmoov33
				MOV AX,VALUE_CX1
				MOV VALUE_SP1,AX
				JMP TESTEE
             
				
				mmoov33:
				Cmp source_index,4
				JNE TESTEE
				MOV AX,VALUE_DX1
				MOV VALUE_SP1,AX
				JMP TESTEE
				
                    mov11:
            cmp dest_index,1
                    jne mov2
                        cmp source_index,1
                        jne mov12
                        
                        mov ax,VALUE_AX1
                        mov VALUE_AX1,ax
                        JMP TESTEE
                        
                    mov12:
                        cmp source_index,2
                        jne mov13
                        
                        mov ax,VALUE_BX1
                        mov VALUE_AX1,ax
                        JMP TESTEE
                    mov13:
                        cmp source_index,3
                        jne mov14
                        
                        mov ax,VALUE_CX1
                        mov VALUE_AX1,ax
                        JMP TESTEE           
                    mov14:
                        cmp source_index,4
                        jne mov15
                        
                        mov ax,VALUE_DX1
                        mov VALUE_AX1,ax
                        JMP TESTEE
                    mov15:
                        cmp source_index,13
                        jne mov16
                        
                        mov ax,VALUE_SI1
                        mov VALUE_AX1,ax
                        JMP TESTEE
                    mov16:
                        cmp source_index,14
                        jne mov17
                        
                        mov ax,VALUE_DI1
                        mov VALUE_AX1,ax   
                        JMP TESTEE
                    mov17:
                        cmp source_index,16
                        jne mov18 
                        
                        mov ax,VALUE_SP1
                        mov VALUE_AX1,ax
                        JMP TESTEE
                    mov18:
                        cmp source_index,15
                        jne mov19
                        
                        mov ax,VALUE_BP1
                        mov VALUE_AX1,ax
                        JMP TESTEE
                    mov19:
                        cmp source_index,21
                        jne mov20
                        
                        mov ax,VALUE1
                        mov VALUE_AX1,ax
						JMP TESTEE
						 
				mov20:
				MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				mov AX,[BX]
				MOV VALUE_AX1,AX
				jmp TESTEE
                
               mov2: 
                        
               cmp dest_index,2
               jne mov3
               
               
              
                    mov21:
            
                        cmp source_index,1
                        jne mov22
                        
                        mov ax,VALUE_AX1
                        mov VALUE_BX1,ax
                        JMP TESTEE
                        
                    mov22:
                        cmp source_index,2
                        jne mov23
                        
                        mov ax,VALUE_BX1
                        mov VALUE_BX1,ax
                        JMP TESTEE
                    mov23:
                        cmp source_index,3
                        jne mov24
                        
                        mov ax,VALUE_CX1
                        mov VALUE_BX1,ax
                        JMP TESTEE           
                    mov24:
                        cmp source_index,4
                        jne mov25
                        
                        mov ax,VALUE_DX1
                        mov Value_BX1,ax
                        JMP TESTEE
                    mov25:
                        cmp source_index,13
                        jne mov26
                        
                        mov ax,VALUE_SI1
                        mov VALUE_BX1,ax
                        JMP TESTEE
                    mov26:
                        cmp source_index,14
                        jne mov27
                        
                        mov ax,VALUE_DI1
                        mov VALUE_BX1,ax   
                        JMP TESTEE
                    mov27:
                        cmp source_index,16
                        jne mov28 
                        
                        mov ax,VALUE_SP1
                        mov VALUE_BX1,ax
                        JMP TESTEE
                    mov28:
                        cmp source_index,15
                        jne mov29
                        
                        mov ax,VALUE_BP1
                        mov VALUE_BX1,ax
                        JMP TESTEE
                    mov29:
                        cmp source_index,21
                        jne mov30
                        
                        mov ax,VALUE1
                        mov VALUE_BX1,ax
						JMP TESTEE

	mov30:
				MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				mov AX,[BX]
				MOV VALUE_BX1,AX
				jmp TESTEE						
               
            mov3:   
               cmp dest_index,3
               jne mov4
            
                    mov31:
            
                        cmp source_index,1
                        jne mov32
                        
                        mov ax,VALUE_AX1
                        mov VALUE_CX1,ax
                        JMP TESTEE
                        
                    mov32:
                        cmp source_index,2
                        jne mov33
                        
                        mov ax,VALUE_BX1
                        mov VALUE_CX1,ax
                        JMP TESTEE
                    mov33:
                        cmp source_index,3
                        jne mov34
                        
                        mov ax,VALUE_CX1
                        mov VALUE_CX1,ax
                         JMP TESTEE          
                    mov34:
                        cmp source_index,4
                        jne mov35
                        
                        mov ax,VALUE_DX1
                        mov VALUE_CX1,ax
                        JMP TESTEE
                    mov35:
                        cmp source_index,13
                        jne mov36
                        
                        mov ax,VALUE_SI1
                        mov VALUE_CX1,ax
                        JMP TESTEE
                    mov36:
                        cmp source_index,14
                        jne mov37
                        
                        mov ax,VALUE_DI1
                        mov VALUE_CX1,ax   
                        JMP TESTEE
                    mov37:
                        cmp source_index,16
                        jne mov38 
                        
                        mov ax,VALUE_SP1
                        mov VALUE_CX1,ax
                        JMP TESTEE
                    mov38:
                        cmp source_index,15
                        jne mov39
                        
                        mov ax,VALUE_BP1
                        mov VALUE_CX1,ax
						JMP TESTEE
                        
                    mov39:
                        cmp source_index,21
                        jne mov40
                        
                        mov ax,VALUE1
                        mov VALUE_CX1,ax
						jmp TESTEE
				mov40:
				MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				mov AX,[BX]
				MOV VALUE_CX1,AX
				jmp TESTEE
                        
             mov4:   
               cmp dest_index,4
               jne mov5
            
                    mov41:
            
                        cmp source_index,1
                        jne mov42
                        
                        mov ax,VALUE_AX1
                        mov VALUE_DX1,ax
                        JMP TESTEE
                        
                    mov42:
                        cmp source_index,2
                        jne mov43
                        
                        mov ax,VALUE_BX1
                        mov VALUE_DX1,ax
                       JMP TESTEE 
                    mov43:
                        cmp source_index,3
                        jne mov44
                        
                        mov ax,VALUE_CX1
                        mov VALUE_DX1,ax
                         JMP TESTEE          
                    mov44:
                        cmp source_index,4
                        jne mov45
                        
                        mov ax,VALUE_DX1
                        mov VALUE_DX1,ax
                        JMP TESTEE
                    mov45:
                        cmp source_index,13
                        jne mov46
                        
                        mov ax,VALUE_SI1
                        mov VALUE_DX1,ax
                        JMP TESTEE
                    mov46:
                        cmp source_index,14
                        jne mov47
                        
                        mov ax,VALUE_DI1
                        mov VALUE_DX1,ax   
                        JMP TESTEE
                    mov47:
                        cmp source_index,16
                        jne mov48 
                        
                        mov ax,VALUE_SP1
                        mov VALUE_DX1,ax
                        JMP TESTEE
                    mov48:
                        cmp source_index,15
                        jne mov49
                        
                        mov ax,VALUE_BP1
                        mov VALUE_DX1,ax
                        JMP TESTEE
                    mov49:
                        cmp source_index,21
                        jne mov50
                        
                        mov ax,VALUE1
                        mov VALUE_DX1,ax
                        jmp TESTEE
						mov50:
							MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				
				mov AX,[BX]
				MOV VALUE_DX1,AX
				jmp TESTEE
                        
              mov5:   ;TO MOV FROM ALL POSSIBLE REGISTERS TO AL
               cmp dest_index,5
               jne mov6
               
                    mov51:
                        cmp source_index,5
                        jne mov52
                        
                        
                        mov AX,VALUE_AX1
                SUB AH,AH            ;AL ONLY(FROM AX)
                MOV BX,VALUE_AX1
                SUB BL,BL            ;BH ONLY(FROM AX)
                mov VALUE_AX1,AX      ;      
                ADD VALUE_AX1,BX
                   JMP TESTEE     
                    mov52:
                        cmp source_index,6
                        jne mov53
					
               mov AX,VALUE_BX1
                SUB AH,AH            ;AL ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_AX1
                SUB BL,BL            ;BH ONLY(FROM AX)
                mov VALUE_AX1,BX      ;      
                ADD VALUE_AX1,AX
                  JMP TESTEE  
                    mov53:
                        cmp source_index,7
                        jne mov54
                        
                     			
               mov AX,VALUE_CX1
                SUB AH,AH            ;AL ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_AX1
                SUB BL,BL            ;BH ONLY(FROM AX)
                mov VALUE_AX1,BX      ;      
                ADD VALUE_AX1,AX
                  JMP TESTEE      
                    mov54:
                        cmp source_index,8
                        jne mov55
                        
                			
               mov AX,VALUE_DX1
                SUB AH,AH            ;AL ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_DX1
                SUB BL,BL            ;BH ONLY(FROM AX)
                mov VALUE_AX1,BX      ;      
                ADD VALUE_AX1,AX
                 JMP TESTEE       
                   mov55:
                        cmp source_index,9
                        jne mov56
                        
                        			
               mov AX,VALUE_AX1
                SHR AX,8
				; NOW THE DEST 
                MOV BX,VALUE_AX1
                SUB BL,BL            ;BL ONLY(FROM AX)
                mov VALUE_AX1,BX      ;      
                ADD VALUE_AX1,AX
                   JMP TESTEE     
                    mov56:
                        cmp source_index,10
                        jne mov57
                    mov AX,VALUE_BX1
                SHR AX,8
				; NOW THE DEST 
                MOV BX,VALUE_AX1
                SUB BL,BL            ;BL ONLY(FROM AX)
                mov VALUE_AX1,BX      ;      
                ADD VALUE_AX1,AX
                  JMP TESTEE  
                    mov57:
                        cmp source_index,11
                        jne mov58
                        
            mov AX,VALUE_CX1
                SHR AX,8
				; NOW THE DEST 
                MOV BX,VALUE_AX1
                SUB BL,BL            ;BL ONLY(FROM AX)
                mov VALUE_AX1,BX      ;      
                ADD VALUE_AX1,AX
                  JMP TESTEE      
                    mov58:
                        cmp source_index,12
                        jne mov59
                        
                       mov AX,VALUE_DX1
                SHR AX,8
				; NOW THE DEST 
                MOV BX,VALUE_AX1
                SUB BL,BL            ;BL ONLY(FROM AX)
                mov VALUE_AX1,BX      ;      
                ADD VALUE_AX1,AX
                  JMP TESTEE      
                    mov59:
                        cmp source_index,21
                        jne mov60
                        
                        mov AX,VALUE1
                        SHR AX,8
						MOV BX,VALUE_AX1
						SUB BL,BL
                        mov VALUE_AX1,AX    
                        JMP TESTEE
mov60:
	MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				
				mov AX,[BX]
				MOV VALUE_AX1,AX
				jmp TESTEE						
                        
               mov6:   
               cmp dest_index,6
               jne mov7
               
                    mov61:
                        cmp source_index,5
                        jne mov62
                   JMP TESTEE     
                        
                mov AX,VALUE_AX1
                SUB AH,AH            ;AL ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_BX1
                SUB BL,BL            ;BH ONLY(FROM AX)
                mov VALUE_BX1,BX      ;      
                ADD VALUE_BX1,AX
                 JMP TESTEE       
                    mov62:
                        cmp source_index,6
                        jne mov63
                        
                         mov AX,VALUE_BX1
                SUB AH,AH            ;AL ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_BX1
                SUB BL,BL            ;BH ONLY(FROM AX)
                mov VALUE_BX1,BX      ;      
                ADD VALUE_BX1,AX
                 JMP TESTEE   
                    mov63:
                        cmp source_index,7
                        jne mov64
                        
                               mov AX,VALUE_CX1
                SUB AH,AH            ;AL ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_BX1
                SUB BL,BL            ;BH ONLY(FROM AX)
                mov VALUE_BX1,BX      ;      
                ADD VALUE_BX1,AX
                   JMP TESTEE     
                    mov64:
                        cmp source_index,8
                        jne mov65
                        
                             mov AX,VALUE_DX1
                SUB AH,AH            ;AL ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_BX1
                SUB BL,BL            ;BH ONLY(FROM AX)
                mov VALUE_BX1,BX      ;      
                ADD VALUE_BX1,AX
                   JMP TESTEE     
                   mov65:   ;MOV BL,AH
                        cmp source_index,9  
                        jne mov66
                        
                     mov AX,VALUE_AX1
                SHR AX,8
				; NOW THE DEST 
                MOV BX,VALUE_BX1
                SUB BL,BL            ;BL ONLY(FROM AX)
                mov VALUE_BX1,BX      ;      
                ADD VALUE_BX1,AX
                   JMP TESTEE     
                    mov66:
                        cmp source_index,10
                        jne mov67
                        
                           mov AX,VALUE_BX1
                SHR AX,8
				; NOW THE DEST 
                MOV BX,VALUE_BX1
                SUB BL,BL            ;BL ONLY(FROM AX)
                mov VALUE_BX1,BX      ;      
                ADD VALUE_BX1,AX
                   JMP TESTEE 
                    mov67:
                        cmp source_index,11
                        jne mov68
                        
                             mov AX,VALUE_CX1
                SHR AX,8
				; NOW THE DEST 
                MOV BX,VALUE_BX1
                SUB BL,BL            ;BL ONLY(FROM AX)
                mov VALUE_BX1,BX      ;      
                ADD VALUE_BX1,AX
                  JMP TESTEE      
                    mov68:
                        cmp source_index,12
                        jne mov69
                        
                                 mov AX,VALUE_DX1
                SHR AX,8
				; NOW THE DEST 
                MOV BX,VALUE_BX1
                SUB BL,BL            ;BL ONLY(FROM AX)
                mov VALUE_BX1,BX      ;      
                ADD VALUE_BX1,AX
                  JMP TESTEE      
                    mov69:
                        cmp source_index,21
                        jne mov70
                        
                               mov AX,VALUE1
                SHR AX,8
				; NOW THE DEST 
                MOV BX,VALUE_BX1
                SUB BL,BL            ;BL ONLY(FROM AX)
                mov VALUE_BX1,BX      ;      
                ADD VALUE_BX1,AX
                JMP TESTEE
mov70:
	MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
			
				mov AX,[BX]
				MOV Value_BX1,AX
				jmp TESTEE				
                        
                        
               mov7: 
			   
               cmp dest_index,7
               jne mov8
               
                    mov71:
                        cmp source_index,5
                        jne mov72
                        
                        
                          mov AX,VALUE_AX1
                SUB AH,AH            ;AL ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BL,BL            ;BH ONLY(FROM AX)
                mov VALUE_CX1,BX      ;      
                ADD VALUE_CX1,AX
                   JMP TESTEE     
                    mov72:
                        cmp source_index,6
                        jne mov73
                              mov AX,VALUE_BX1
                SUB AH,AH            ;AL ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BL,BL            ;BH ONLY(FROM AX)
                mov VALUE_CX1,BX      ;      
                ADD VALUE_CX1,AX
                  JMP TESTEE  
                    mov73:
                        cmp source_index,7
                        jne mov74
                              mov AX,VALUE_CX1
                SUB AH,AH            ;AL ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BL,BL            ;BH ONLY(FROM AX)
                mov VALUE_CX1,BX      ;      
                ADD VALUE_CX1,AX 
                 JMP TESTEE       
                    mov74:
                        cmp source_index,8
                        jne mov75
                        
                              mov AX,VALUE_DX1
                SUB AH,AH            ;AL ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BL,BL            ;BH ONLY(FROM AX)
                mov VALUE_CX1,BX      ;      
                ADD VALUE_CX1,AX
                 JMP TESTEE       
                   mov75:
                        cmp source_index,9
                        jne mov76
                              mov AX,VALUE_AX1
                SHR AX,8
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BL,BL            ;BL ONLY(FROM AX)
                mov VALUE_CX1,BX      ;      
                ADD VALUE_CX1,AX
                 JMP TESTEE       
                    mov76:
                        cmp source_index,10
                        jne mov77
                        
                            mov AX,VALUE_BX1
                SHR AX,8
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BL,BL            ;BL ONLY(FROM AX)
                mov VALUE_CX1,BX      ;      
                ADD VALUE_CX1,AX
                JMP TESTEE    
                    mov77:
                        cmp source_index,11
                        jne mov78
                        
                             mov AX,VALUE_CX1
                SHR AX,8
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BL,BL            ;BL ONLY(FROM AX)
                mov VALUE_CX1,BX      ;      
                ADD VALUE_CX1,AX
                 JMP TESTEE       
                    mov78:
                        cmp source_index,12
                        jne mov79
                        
                                   mov AX,VALUE_DX1
                SHR AX,8
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BL,BL            ;BL ONLY(FROM AX)
                mov VALUE_CX1,BX      ;      
                ADD VALUE_CX1,AX
                 JMP TESTEE       
                    mov79:
                        cmp source_index,21
                        jne mov80
                        
                        mov AX,VALUE1
                SHR AX,8
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BL,BL            ;BL ONLY(FROM AX)
                mov VALUE_CX1,BX      ;      
                ADD VALUE_CX1,AX
                JMP TESTEE
				mov80:
					MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				mov DX,[BX]
				MOV VALUE_CX1,DX
				JMP TESTEE
                        
              mov8:   
               cmp dest_index,8
               jne mov9
               
                     mov81:
                        cmp source_index,5
                        jne mov82
                               
                        
                     mov AX,VALUE_AX1
                SUB AH,AH            ;AL ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_DX1
                SUB BL,BL            ;BH ONLY(FROM AX)
                mov VALUE_DX1,BX      ;      
                ADD VALUE_DX1,AX
                  JMP TESTEE      
                    mov82:
                        cmp source_index,6
                        jne mov83
                               
                               mov AX,VALUE_BX1
                SUB AH,AH            ;AH ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_DX1
                SUB BL,BL            ;BH ONLY(FROM AX)
                mov VALUE_DX1,BX      ;      
                ADD VALUE_DX1,AX
                 JMP TESTEE   
                    mov83:
                        cmp source_index,7
                        jne mov84
                        
                              mov AX,VALUE_CX1
                SUB AH,AH            ;AL ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_DX1
                SUB BL,BL            ;BH ONLY(FROM AX)
                mov VALUE_DX1,BX      ;      
                ADD VALUE_DX1,AX
                JMP TESTEE        
                    mov84:
                        cmp source_index,8
                        jne mov85
                        
                              mov AX,VALUE_DX1
                SUB AL,AL            ;AL ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_DX1
                SUB BH,BH            ;BH ONLY(FROM AX)
                mov VALUE_DX1,BX      ;      
                ADD VALUE_DX1,AX
                 JMP TESTEE       
                   mov85:
                        cmp source_index,9
                        jne mov86
                        
                                 mov AX,VALUE_AX1
                SHR AX,8
				; NOW THE DEST 
                MOV BX,VALUE_DX1
                SUB BL,BL            ;BL ONLY(FROM AX)
                mov VALUE_DX1,BX      ;      
                ADD VALUE_DX1,AX
                 JMP TESTEE       
                    mov86:
                        cmp source_index,10
                        jne mov87
                        
                                  mov AX,VALUE_BX1
                SHR AX,8
				; NOW THE DEST 
                MOV BX,VALUE_DX1
                SUB BL,BL            ;BL ONLY(FROM AX)
                mov VALUE_DX1,BX      ;      
                ADD VALUE_DX1,AX
                JMP TESTEE    
                    mov87:
                        cmp source_index,11
                        jne mov88
                        
                                    mov AX,VALUE_CX1
                SHR AX,8
				; NOW THE DEST 
                MOV BX,VALUE_DX1
                SUB BL,BL            ;BL ONLY(FROM AX)
                mov VALUE_DX1,BX      ;      
                ADD VALUE_DX1,AX
                 JMP TESTEE       
                    mov88:
                        cmp source_index,12
                        jne mov89
                        
                                    mov AX,VALUE_DX1
                SHR AX,8
				; NOW THE DEST 
                MOV BX,VALUE_DX1
                SUB BL,BL            ;BL ONLY(FROM AX)
                mov VALUE_DX1,BX      ;      
                ADD VALUE_DX1,AX
                 JMP TESTEE       
                        
                    mov89:
                        cmp source_index,21
                        jne mov90
                        
                                   mov AX,VALUE1
                SHR AX,8            ;AH ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_BX1
                SUB BH,BH            ;BH ONLY(FROM AX)
                mov VALUE_BX1,BX      ;      
                ADD VALUE_BX1,AX
				JMP TESTEE
              mov90:
			  	MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
			
				mov AX,[BX]
				MOV VALUE_DX1,AX
				jmp TESTEE
              
              mov9:   
               cmp dest_index,9
               jne mov10
               
                     mov91:
                        cmp source_index,5
                        jne mov92
                               
                        
                                    mov AX,VALUE_AX1
                SHL AX,8
				; NOW THE DEST 
                MOV BX,VALUE_AX1
                SUB BH,BH            ;BL ONLY(FROM AX)
                mov VALUE_AX1,BX      ;      
                ADD VALUE_AX1,AX
                 JMP TESTEE       
                    mov92:
                        cmp source_index,6
                        jne mov93
                               
                                  mov AX,VALUE_BX1
                SHL AX,8
				; NOW THE DEST 
                MOV BX,VALUE_AX1
                SUB BH,BH            ;BL ONLY(FROM AX)
                mov VALUE_AX1,BX      ;      
                ADD VALUE_AX1,AX
                  JMP TESTEE  
                    mov93:
                        cmp source_index,7
                        jne mov94
                        
                                    mov AX,VALUE_CX1
                SHR AX,8
				; NOW THE DEST 
                MOV BX,VALUE_AX1
                SUB BH,BH            ;BL ONLY(FROM AX)
                mov VALUE_AX1,BX      ;      
                ADD VALUE_AX1,AX
                  JMP TESTEE      
                    mov94:
                        cmp source_index,8
                        jne mov95
                        
                                   mov AX,VALUE_DX1
                SHL AX,8
				; NOW THE DEST 
                MOV BX,VALUE_AX1
                SUB BH,BH            ;BL ONLY(FROM AX)
                mov VALUE_AX1,BX      ;      
                ADD VALUE_AX1,AX
                  JMP TESTEE      
                   mov95:
                        cmp source_index,9
                        jne mov96
                        
                             mov AX,VALUE_AX1
                SUB AL,AL            ;AH ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_AX1
                SUB BH,BH            ;BH ONLY(FROM AX)
                mov VALUE_AX1,BX      ;      
                ADD VALUE_AX1,AX
                 JMP TESTEE       
                    mov96:
                        cmp source_index,10
                        jne mov97
                        
                                mov AX,VALUE_BX1
                SUB AL,AL            ;AH ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_AX1
                SUB BH,BH            ;BH ONLY(FROM AX)
                mov VALUE_AX1,BX      ;      
                ADD VALUE_AX1,AX
                 JMP TESTEE   
                    mov97:
                        cmp source_index,11
                        jne mov98
                        
                               mov AX,VALUE_CX1
                SUB AL,AL            ;AH ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_AX1
                SUB BH,BH            ;BH ONLY(FROM AX)
                mov VALUE_AX1,BX      ;      
                ADD VALUE_AX1,AX
                   JMP TESTEE     
                    mov98:
                        cmp source_index,12
                        jne mov10
                        
                                 mov AX,VALUE_DX1
                SUB AL,AL            ;AH ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_AX1
                SUB BH,BH            ;BH ONLY(FROM AX)
                mov VALUE_AX1,BX      ;      
                ADD VALUE_AX1,AX
                 JMP TESTEE       
                    mov99:
                        cmp source_index,21
                        jne mov100
                        
                MOV AX,VALUE1
                SUB AL,AL            ;AH ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_AX1
                SUB BH,BH            ;BH ONLY(FROM AX)
                mov VALUE_AX1,BX      ;      
                ADD VALUE_AX1,AX
                 JMP TESTEE       
                 mov100:
	MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				
				mov AX,[BX]
				MOV VALUE_AX1,AX
				jmp TESTEE				 
              
              
              mov10:   
               cmp dest_index,10
               jne movv11
               
                     mov101:
                        cmp source_index,5
                        jne mov102
                               
                        
                             mov AX,VALUE_AX1
                SHL AX,8
				; NOW THE DEST 
                MOV BX,VALUE_BX1
                SUB BH,BH            ;BL ONLY(FROM AX)
                mov VALUE_BX1,BX      ;      
                ADD VALUE_BX1,AX
                 JMP TESTEE       
                    mov102:
                        cmp source_index,6
                        jne mov103
                               
                               mov AX,VALUE_BX1
                SHL AX,8
				; NOW THE DEST 
                MOV BX,VALUE_BX1
                SUB BH,BH            ;BL ONLY(FROM AX)
                mov VALUE_BX1,BX      ;      
                ADD VALUE_BX1,AX
                 JMP TESTEE   
                    mov103:
                        cmp source_index,7
                        jne mov104
                        
                                  mov AX,VALUE_CX1
                SHL AX,8
				; NOW THE DEST 
                MOV BX,VALUE_BX1
                SUB BH,BH            ;BL ONLY(FROM AX)
                mov VALUE_BX1,BX      ;      
                ADD VALUE_BX1,AX
                 JMP TESTEE       
                    mov104:
                        cmp source_index,8
                        jne mov105
                        
                               mov AX,VALUE_DX1
                SHL AX,8
				; NOW THE DEST 
                MOV BX,VALUE_BX1
                SUB BH,BH            ;BL ONLY(FROM AX)
                mov VALUE_BX1,BX      ;      
                ADD VALUE_BX1,AX
                 JMP TESTEE       
                   mov105:
                        cmp source_index,9
                        jne mov106
                        
                              mov AX,VALUE_AX1
                SUB AL,AL            ;AH ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_BX1
                SUB BH,BH            ;BL ONLY(FROM AX)
                mov VALUE_BX1,BX      ;      
                ADD VALUE_BX1,AX
                  JMP TESTEE      
                    mov106:
                        cmp source_index,10
                        jne mov107
                        
                                   mov AX,VALUE_BX1
                SUB AL,AL            ;AH ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_BX1
                SUB BH,BH            ;BH ONLY(FROM AX)
                mov VALUE_BX1,BX      ;      
                ADD VALUE_BX1,AX
                 JMP TESTEE   
                    mov107:
                        cmp source_index,11
                        jne mov108
                        
                                mov AX,VALUE_CX1
                SUB AL,AL            ;AH ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_BX1
                SUB BH,BH            ;BH ONLY(FROM AX)
                mov VALUE_BX1,BX      ;      
                ADD VALUE_BX1,AX
                  JMP TESTEE      
                    mov108:
                        cmp source_index,12
                        jne mov109
                        
                            mov AX,VALUE_DX1
                SUB AL,AL            ;AH ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_BX1
                SUB BH,BH            ;BH ONLY(FROM AX)
                mov VALUE_BX1,BX      ;      
                ADD VALUE_BX1,AX 
                   JMP TESTEE 
                    mov109:
                        cmp source_index,21
                        jne mov110
                        
                               mov AX,VALUE1
                SUB AL,AL            ;AH ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_BX1
                SUB BH,BH            ;BH ONLY(FROM AX)
                mov VALUE_BX1,BX      ;      
                ADD VALUE_BX1,AX           
              JMP TESTEE
			  
			  mov110:
			  	MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
			
				mov AX,[BX]
				MOV VALUE_BX1,AX
				jmp TESTEE
              
              movv11:   
               cmp dest_index,11
               jne movv12
               
                     mov111:
                        cmp source_index,5
                        jne mov112
                               
                        
                                         mov AX,VALUE_AX1
                SHL AX,8
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BH,BH            ;BL ONLY(FROM AX)
                mov VALUE_CX1,BX      ;      
                ADD VALUE_CX1,AX
                 JMP TESTEE
				 
                    mov112:
                        cmp source_index,6
                        jne mov113
                               
                              
                                         mov AX,VALUE_BX1
                SHL AX,8
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BH,BH            ;BL ONLY(FROM AX)
                mov VALUE_CX1,BX      ;      
                ADD VALUE_CX1,AX
				JMP TESTEE
                    mov113:
                        cmp source_index,7
                        jne mov114
                        
                             
                                         mov AX,VALUE_CX1
                SHL AX,8
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BH,BH            ;BL ONLY(FROM AX)
                mov VALUE_CX1,BX      ;      
                ADD VALUE_CX1,AX
                JMP TESTEE        
                    mov114:
                        cmp source_index,8
                        jne mov115
                        
                             
                mov AX,VALUE_DX1
                SHL AX,8
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BH,BH            ;BL ONLY(FROM AX)
                mov VALUE_CX1,BX      ;      
                ADD VALUE_CX1,AX
                JMP TESTEE        
                   mov115:
                        cmp source_index,9
                        jne mov116
                        
                                mov AX,VALUE_AX1
                SUB AL,AL            ;AH ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BH,BH            ;BH ONLY(FROM AX)
                mov VALUE_CX1,BX      ;      
                ADD VALUE_CX1,AX 
                 JMP TESTEE   
                        
                    mov116:
                        cmp source_index,10
                        jne mov117
                        
                                     mov AX,VALUE_BX1
                SUB AL,AL            ;AH ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BH,BH            ;BH ONLY(FROM AX)
                mov VALUE_CX1,BX      ;      
                ADD VALUE_CX1,AX 
                 JMP TESTEE   
                    mov117:
                        cmp source_index,11
                        jne mov118
                        
                                  mov AX,VALUE_CX1
                SUB AL,AL            ;AH ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BH,BH            ;BH ONLY(FROM AX)
                mov VALUE_CX1,BX      ;      
                ADD VALUE_CX1,AX 
                 JMP TESTEE       
                    mov118:
                        cmp source_index,12
                        jne mov119
                        
                                    mov AX,VALUE_CX1
                SUB AL,AL            ;AH ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BH,BH            ;BH ONLY(FROM AX)
                mov VALUE_CX1,BX      ;      
                ADD VALUE_CX1,AX 
				JMP TESTEE
                        
                    mov119:
                        cmp source_index,21
                        jne mov120
                        
                                   mov AX,VALUE1
                SUB AL,AL            ;AH ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BH,BH            ;BH ONLY(FROM AX)
                mov VALUE_CX1,BX      ;      
                ADD VALUE_CX1,AX 
				JMP TESTEE
				
              mov120:
			  	MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
			
				mov AX,[BX]
				MOV VALUE_CX1,AX
				jmp TESTEE
              
              movv12:   
               cmp dest_index,12
               jne movv17
               
                     mov121:
                        cmp source_index,5
                        jne mov122
                               
                        
             mov AX,VALUE_AX1
                SHL AX,8
				; NOW THE DEST 
                MOV BX,VALUE_DX1
                SUB BH,BH            ;BL ONLY(FROM AX)
                mov VALUE_DX1,BX      ;      
                ADD VALUE_DX1,AX
                  JMP TESTEE      
                    mov122:
                        cmp source_index,6
                        jne mov123
                               
                            mov AX,VALUE_BX1
                SHL AX,8
				; NOW THE DEST 
                MOV BX,VALUE_DX1
                SUB BH,BH            ;BL ONLY(FROM AX)
                mov VALUE_DX1,BX      ;      
                ADD VALUE_DX1,AX
                 JMP TESTEE   
                    mov123:
                        cmp source_index,7
                        jne mov124
                        
                          mov AX,VALUE_CX1
                SHL AX,8
				; NOW THE DEST 
                MOV BX,VALUE_DX1
                SUB BH,BH            ;BL ONLY(FROM AX)
                mov VALUE_DX1,BX      ;      
                ADD VALUE_DX1,AX
                 JMP TESTEE       
                    mov124:
                        cmp source_index,8
                        jne mov125
                        
                     mov AX,VALUE_DX1
                SHL AX,8
				; NOW THE DEST 
                MOV BX,VALUE_DX1
                SUB BH,BH            ;BL ONLY(FROM AX)
                mov VALUE_DX1,BX      ;      
                ADD VALUE_DX1,AX
                 JMP TESTEE       
                   mov125:
                        cmp source_index,9
                        jne mov126
                        
                                                         mov AX,VALUE_AX1
                SUB AL,AL            ;AH ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BH,BH            ;BH ONLY(FROM AX)
                mov VALUE_DX1,BX      ;      
                ADD VALUE_DX1,AX 
                 JMP TESTEE       
                    mov126:
                        cmp source_index,10
                        jne mov127
                        
                     mov AX,VALUE_BX1
                SUB AL,AL            ;AH ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BH,BH            ;BH ONLY(FROM AX)
                mov VALUE_DX1,BX      ;      
                ADD VALUE_DX1,AX 
                  JMP TESTEE  
                    mov127:
                        cmp source_index,11
                        jne mov128
                        
                      mov AX,VALUE_CX1
                SUB AL,AL            ;AH ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BH,BH            ;BH ONLY(FROM AX)
                mov VALUE_DX1,BX      ;      
                ADD VALUE_DX1,AX 
                 JMP TESTEE       
                    mov128:
                        cmp source_index,12
                        jne mov129
                        
                      mov AX,VALUE_DX1
                SUB AL,AL            ;AH ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BH,BH            ;BH ONLY(FROM AX)
                mov VALUE_DX1,BX      ;      
                ADD VALUE_DX1,AX    
                 JMP TESTEE   
                    mov129:
                        cmp source_index,21
                        jne mov130
                        
                     mov AX,VALUE1
                SUB AL,AL            ;AH ONLY(FROM AX)
				; NOW THE DEST 
                MOV BX,VALUE_CX1
                SUB BH,BH            ;BH ONLY(FROM AX)
                mov VALUE_DX1,BX      ;      
                ADD VALUE_DX1,AX 
				JMP TESTEE
				
				mov130:
					MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
			
				mov AX,[BX]
				MOV VALUE_DX1,AX
				jmp TESTEE
				
                     movv17:
			   
			   
				cmp source_index,1
				jne movv1702
				MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				MOV DX,VALUE_AX1
				mov [bx],dx
				jmp TESTEE
				
				movv1702:
				cmp source_index,2
				jne movv1703
				MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				MOV DX,VALUE_BX1
				mov [bx],dx
				JMP TESTEE
				
				movv1703:
				cmp source_index,3
				jne movv1704
				MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				MOV DX,VALUE_CX1
				mov [bx],dx
				JMP TESTEE
				
				movv1704:
				cmp source_index,4
				jne movv1705
				MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				MOV DX,VALUE_DX1
				mov [bx],dx
				JMP TESTEE
				
				movv1705:
				cmp source_index,5
				jne movv1706
				
				MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				MOV DX,VALUE_AX1
				mov [bx],dx
				JMP TESTEE
				
				movv1706:
				cmp source_index,6
				jne movv1707
				MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				MOV DX,VALUE_BX1
				mov [bx],dx
				JMP TESTEE
				
				movv1707:
				
				cmp source_index,7
				jne movv1708
				
				MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				MOV DX,VALUE_CX1
				mov [bx],dx
				JMP TESTEE
				
				movv1708:
				
				cmp source_index,8
				jne movv1709
				
				MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				MOV DX,VALUE_DX1
				mov [bx],dx
				JMP TESTEE
				
				movv1709:
				cmp source_index,9
				jne movv1710
				
				mov CX,VALUE_AX1
				SHR CX,8
				MOV DX,VALUE_BX1
				SHL DX,8
				
				ADD DX,CX   ;DX->[BL,AH]
				
				MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				MOV [BX],DX
				JMP TESTEE
				
				movv1710:
				cmp source_index,10
				jne movv1711
				
				mov CX,VALUE_BX1
				SHR CX,8
				MOV DX,VALUE_CX1
				SHL DX,8
				
				ADD DX,CX   ;DX->[BL,AH]
				
				MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				MOV [BX],DX
				JMP TESTEE
				
				movv1711:
				cmp source_index,11
				jne movv1712
				
				mov CX,VALUE_CX1
				SHR CX,8
				MOV DX,VALUE_DX1
				SHL DX,8
				
				ADD DX,CX   ;DX->[BL,AH]
				
				MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				MOV [BX],DX
				JMP TESTEE
				
				movv1712:
				cmp source_index,12
				jne movv1713
				MOV DX,VALUE_DX1
				SHR DX,8
				
				
				MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				MOV [BX],DX
				JMP TESTEE
				
				movv1713:
				cmp source_index,13
				jne movv1714
				MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				MOV DX,VALUE_SI1
				mov [bx],dx
				JMP TESTEE
				
				movv1714:
				cmp source_index,14
				jne movv1715
				MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				MOV DX,VALUE_DI1
				mov [bx],dx
				JMP TESTEE
				
				movv1715:
				cmp source_index,15
				jne movv1716
				MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				MOV DX,VALUE_BP1
				mov [bx],dx
				JMP TESTEE
				
				movv1716:
				cmp source_index,16
				jne TESTEE
				MOV CX,0
				LEA BX,Memory
				MOV CL,MValue
				ADD CL,CL
				ADD BX,CX
				MOV DX,VALUE_SP1
				mov [bx],dx
				JMP TESTEE
				
                      TESTEE:
                       RET
                        MOV_INST ENDP                            

NOP_INST PROC NEAR                                              
CMP INST_INDEX,16
RET
ENDP                  
DIV_INST PROC NEAR 
CMP INST_INDEX,14
JNE DONE4
        AAX4:	
        CMP Dest_Index,1
        JNE BBX4
        MOV DX,0
        MOV CX,VALUE_AX1
        MOV AX,VALUE_AX1
        DIV CX
        AND DX,1111
        JZ DV0
        MOV VALUE_DX1,DX
        DV0:
        MOV VALUE_AX1,AX
        JMP DONE4
        
        BBX4:
        CMP Dest_Index,2
        JNE CCX4
        MOV DX,0
        MOV CX,VALUE_BX1
        MOV AX,VALUE_AX1
        DIV CX
        AND DX,1111
        JZ DV1
        MOV VALUE_DX1,DX
        DV1:
        MOV VALUE_AX1,AX
        JMP DONE4
        
        CCX4:
        CMP Dest_Index,3
        JNE DDX4
        MOV DX,0
        MOV CX,VALUE_CX1
        MOV AX,VALUE_AX1
        DIV CX
        AND DX,1111   ;DX has a value cuz the num that result from the product is greater than 16bits
        JZ DV2
        MOV VALUE_DX1,DX
        DV2:
        MOV VALUE_AX1,AX
        JMP DONE4
        
        DDX4:
        CMP Dest_Index,4
        JNE AAL4
        MOV DX,0
        MOV CX,VALUE_DX1
        MOV AX,VALUE_AX1
        DIV CX
        AND DX,1111
        JZ DV3
        MOV VALUE_DX1,DX
        DV3:
        MOV VALUE_AX1,AX
        JMP DONE4
        
        AAL4:     ;IF IT IS NOT WORKING WE CAN USE MOV AX,VALUE_AX1 THEN SUB AH,AH THEN DEC AL SAME AS BELOW 
        CMP Dest_Index,5
        JNE BBL4
        MOV CX,VALUE_AX1
        MOV AX,VALUE_AX1
        SUB AH,AH
        DIV CL
        MOV VALUE_AX1,AX
        JMP DONE4
        
        BBL4:
        CMP Dest_Index,6
        JNE CCL4
        MOV CX,VALUE_BX1
        MOV AX,VALUE_AX1
        SUB AH,AH
        DIV CL
        MOV VALUE_AX1,AX
        JMP DONE4
        
        CCL4:
        CMP Dest_Index,7
        JNE DDL4
        MOV CX,VALUE_CX1
        MOV AX,VALUE_AX1
        SUB AH,AH
        DIV CL
        MOV VALUE_AX1,AX
        JMP DONE4
        
        DDL4:
        CMP Dest_Index,8
        JNE AAH4
        MOV CX,VALUE_DX1
        MOV AX,VALUE_AX1
        SUB AH,AH
        DIV CL
        MOV VALUE_AX1,AX
        JMP DONE4
        
        AAH4:
        CMP Dest_Index,9
        JNE BBH4
        MOV CX,VALUE_AX1
        MOV AX,VALUE_AX1
        SUB AH,AH
        DIV CH
        MOV VALUE_AX1,AX
        JMP DONE4
        
        BBH4:
        CMP Dest_Index,10
        JNE CCH4
        MOV CX,VALUE_BX1
        MOV AX,VALUE_AX1
        SUB AH,AH
        DIV CH
        MOV VALUE_AX1,AX
        JMP DONE4
        
        CCH4:
        CMP Dest_Index,11
        JNE DDH4
        MOV CX,VALUE_CX1
        MOV AX,VALUE_AX1
        SUB AH,AH
        DIV CH
        MOV VALUE_AX1,AX
        JMP DONE4
        
        DDH4:
        CMP Dest_Index,12
        JNE SSI4
        MOV CX,VALUE_DX1
        MOV AX,VALUE_AX1
        DIV CH
        MOV VALUE_AX1,AX
        JMP DONE4
        
        SSI4:
        CMP Dest_Index,13
        JNE DDI4
        MOV DX,0
        MOV CX,VALUE_SI1
        MOV AX,VALUE_AX1
        DIV CX
        AND DX,1111
        JZ DV7
        MOV VALUE_DX1,DX
        DV7:
        MOV VALUE_AX1,AX
        JMP DONE4
        
        DDI4:
        CMP Dest_Index,14
        JNE BBP4
        MOV DX,0
        MOV CX,VALUE_DI1
        MOV AX,VALUE_AX1
        DIV CX
        AND DX,1111
        JZ DV8
        MOV VALUE_DX1,DX
        DV8:
        MOV VALUE_AX1,AX
        JMP DONE4
        
        BBP4:
        CMP Dest_Index,15
        JNE SSP4
        MOV DX,0
        MOV CX,VALUE_BP1
        MOV AX,VALUE_AX1
        DIV CX
        AND DX,1111
        JZ DV9
        MOV VALUE_DX1,DX
        DV9:
        MOV VALUE_AX1,AX
        JMP DONE4
        
        
        SSP4:
        CMP Dest_Index,16
        JNE DONE4
        MOV DX,0
        MOV CX,VALUE_SP1
        MOV AX,VALUE_AX1
        DIV CX
        AND DX,1111
        JZ DV10
        MOV VALUE_DX1,DX
        DV10:
        MOV VALUE_AX1,AX
        JMP DONE4
        
        DONE4:
        RET
        DIV_INST ENDP  
CLCC_INST PROC NEAR 


CMP INST_INDEX,6
JNE TER
MOV BX,OFFSET CCF
MOV CX,9
WHILE:
MOV [BX],0
INC BX
LOOP WHILE
TER:
RET
CLCC_INST ENDP;;Player2 Instructions

 

MAIN proc  far
    mov ax,@data
    mov ds,ax

    mov ah,0h       ;SET TEXT_MODE
    mov al,10h
    int 10h
    CALL P1_INFO
    CALL P2_INFO
    LOBBY:
    CALL MAIN_INTERFACE
    CALL INTERFACE_OPERATIONS
    
  CALL CLR_SCR
  SPLIT_SCREEN_INTERFACE8:
  CursorPosition 28H,TEXT_ROW 
  displaystring msg15
  INC TEXT_ROW       
  CMP TEXT_ROW,25
  JNE SPLIT_SCREEN_INTERFACE8
  CursorPosition 0,0
  displaystring Name1
  displaystring NEWLINE
  displaystring LEVEL
  JMP CHOOSING
  RE_CHOOSE1:
  MOV TEXT_ROW,0
  SPLIT_SCREEN_INTERFACE4:
  CursorPosition 28H,TEXT_ROW 
  displaystring msg15
  INC TEXT_ROW       
  CMP TEXT_ROW,25
  JNE SPLIT_SCREEN_INTERFACE4
  CursorPosition 0,0
  displaystring Name1
  displaystring NEWLINE
  displaystring ERROR
  displaystring NEWLINE
  displaystring LEVEL
  CHOOSING:
  mov ah,07
  int 21h
  MOV CHOSEN_LVL,AL
  CMP AL,31H
  JE LEVEL1
  CMP AL,32H
  JE LEVEL2
  CMP AL,31H
  JB RE_CHOOSE1
  CMP AL,32H
  JA RE_CHOOSE1
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  displaystring CHOSEN_LVL
  
 

  ;;;;ASUME THIS IS LEVEL 1
  LEVEL1:
   CALL CLR_SCR
  SPLIT_SCREEN_INTERFACE5:
  CursorPosition 28H,TEXT_ROW 
  displaystring msg15
  INC TEXT_ROW       
  CMP TEXT_ROW,25
  JNE SPLIT_SCREEN_INTERFACE5
  CursorPosition 41,0
  displaystring NEWLINE
  CursorPosition 41,0
  displaystring Name1
  displaystring OP_LEVEL
  displaystring CHOSEN_LVL
  displaystring DE_LIMITER
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
    mov AH,00H
    MOV AL,10H
    int 10H
    CALL MAINDESIGN
	MOV X_REC, 0   ;DRAW INITIAL PLAYER 1 SPACESHIP 
	MOV Y_REC, 208
	MOV REC_SIZE, 20
    CALL DRAW_REC2

    MOV X_REC2, 335   ;DRAW INITIAL PLAYER 2 SPACESHIP 
	MOV Y_REC2, 208
	MOV REC_SIZE2, 20
    CALL DRAW_REC3
    CALL ROCKET_GAME
    JMP LOBBY

  LEVEL2:
    mov AH,00H
    MOV AL,10H
    int 10H
  ;displaystring QUIT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT
  HLT

Eroor:

END_PROGRAM:
MAIN ENDP 
end main 
        